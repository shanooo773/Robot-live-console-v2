{"version":3,"file":"vendors-node_modules_theia_core_lib_node_messaging_ipc-channel_js-node_modules_theia_core_lib-0e805d.js","mappings":"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","sources":["webpack:////home/shayan/Robot-live-console-v2/theia/node_modules/@theia/core/src/node/messaging/binary-message-pipe.ts?","webpack:////home/shayan/Robot-live-console-v2/theia/node_modules/@theia/core/src/node/messaging/ipc-channel.ts?","webpack:////home/shayan/Robot-live-console-v2/theia/node_modules/@theia/core/src/node/messaging/ipc-protocol.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Duplex } from 'stream';\nimport { Disposable, Emitter, Event } from '../../common';\nimport { Uint8ArrayReadBuffer, Uint8ArrayWriteBuffer } from '../../common/message-rpc/uint8-array-message-buffer';\n\n/**\n * A `BinaryMessagePipe` is capable of sending and retrieving binary messages i.e. {@link Uint8Array}s over\n * and underlying streamed process pipe/fd. The message length of individual messages is encoding at the beginning of\n * a new message. This makes it possible to extract messages from the streamed data.\n */\nexport class BinaryMessagePipe implements Disposable {\n    static readonly MESSAGE_START_IDENTIFIER = '<MessageStart>';\n    protected dataHandler = (chunk: Uint8Array) => this.handleChunk(chunk);\n\n    protected onMessageEmitter = new Emitter<Uint8Array>();\n    protected cachedMessageData: StreamedMessageData = {\n        chunks: [],\n        missingBytes: 0\n    };\n\n    get onMessage(): Event<Uint8Array> {\n        return this.onMessageEmitter.event;\n    }\n\n    constructor(protected readonly underlyingPipe: Duplex) {\n        underlyingPipe.on('data', this.dataHandler);\n    }\n\n    send(message: Uint8Array): void {\n        this.underlyingPipe.write(this.encodeMessageStart(message));\n        this.underlyingPipe.write(message);\n    }\n\n    protected handleChunk(chunk: Uint8Array): void {\n        if (this.cachedMessageData.missingBytes === 0) {\n            // There is no currently streamed message => We expect that the beginning of the chunk is the message start for a new message\n            this.handleNewMessage(chunk);\n        } else {\n            // The chunk contains message data intended for the currently cached message\n            this.handleMessageContentChunk(chunk);\n        }\n    }\n\n    protected handleNewMessage(chunk: Uint8Array): void {\n        if (chunk.byteLength < this.messageStartByteLength) {\n            // The chunk only contains a part of the encoded message start\n            this.cachedMessageData.partialMessageStart = chunk;\n            return;\n        }\n\n        const messageLength = this.readMessageStart(chunk);\n\n        if (chunk.length - this.messageStartByteLength > messageLength) {\n            // The initial chunk contains more than one binary message => Fire `onMessage` for first message and handle remaining content\n            const firstMessage = chunk.slice(this.messageStartByteLength, this.messageStartByteLength + messageLength);\n            this.onMessageEmitter.fire(firstMessage);\n            this.handleNewMessage(chunk.slice(this.messageStartByteLength + messageLength));\n\n        } else if (chunk.length - this.messageStartByteLength === messageLength) {\n            // The initial chunk contains exactly one complete message. => Directly fire the `onMessage` event.\n            this.onMessageEmitter.fire(chunk.slice(this.messageStartByteLength));\n        } else {\n            // The initial chunk contains only part of the message content => Cache message data\n            this.cachedMessageData.chunks = [chunk.slice(this.messageStartByteLength)];\n            this.cachedMessageData.missingBytes = messageLength - chunk.byteLength + this.messageStartByteLength;\n        }\n    }\n\n    protected handleMessageContentChunk(chunk: Uint8Array): void {\n        if (this.cachedMessageData) {\n            if (chunk.byteLength < this.cachedMessageData.missingBytes) {\n                // The chunk only contains parts of the missing bytes for the cached message.\n                this.cachedMessageData.chunks.push(chunk);\n                this.cachedMessageData.missingBytes -= chunk.byteLength;\n            } else if (chunk.byteLength === this.cachedMessageData.missingBytes) {\n                // Chunk contains exactly the missing data for the cached message\n                this.cachedMessageData.chunks.push(chunk);\n                this.emitCachedMessage();\n            } else {\n                // Chunk contains missing data for the cached message + data for the next message\n                const messageEnd = this.cachedMessageData.missingBytes;\n                const missingData = chunk.slice(0, messageEnd);\n                this.cachedMessageData.chunks.push(missingData);\n                this.emitCachedMessage();\n                this.handleNewMessage(chunk.slice(messageEnd));\n            }\n\n        }\n    }\n\n    protected emitCachedMessage(): void {\n        const message = Buffer.concat(this.cachedMessageData.chunks);\n        this.onMessageEmitter.fire(message);\n        this.cachedMessageData.chunks = [];\n        this.cachedMessageData.missingBytes = 0;\n    }\n\n    /**\n     * Encodes the start of a new message into a {@link Uint8Array}.\n     * The message start consists of a identifier string and the length of the following message.\n     * @returns the buffer contains the encoded message start\n     */\n    protected encodeMessageStart(message: Uint8Array): Uint8Array {\n        const writer = new Uint8ArrayWriteBuffer()\n            .writeString(BinaryMessagePipe.MESSAGE_START_IDENTIFIER)\n            .writeUint32(message.length);\n        const messageStart = writer.getCurrentContents();\n        writer.dispose();\n        return messageStart;\n    }\n\n    protected get messageStartByteLength(): number {\n        // 4 bytes for length of id + id string length + 4 bytes for length of message\n        return 4 + BinaryMessagePipe.MESSAGE_START_IDENTIFIER.length + 4;\n    }\n\n    /**\n     * Reads the start of a new message from a stream chunk (or cached message) received from the underlying pipe.\n     * The message start is expected to consist of an identifier string and the length of the message.\n     * @param chunk The stream chunk.\n     * @returns The length of the message content to read.\n     * @throws An error if the message start can not be read successfully.\n     */\n    protected readMessageStart(chunk: Uint8Array): number {\n        const messageData = this.cachedMessageData.partialMessageStart ? Buffer.concat([this.cachedMessageData.partialMessageStart, chunk]) : chunk;\n        this.cachedMessageData.partialMessageStart = undefined;\n\n        const reader = new Uint8ArrayReadBuffer(messageData);\n        const identifier = reader.readString();\n\n        if (identifier !== BinaryMessagePipe.MESSAGE_START_IDENTIFIER) {\n            throw new Error(`Could not read message start. The start identifier should be '${BinaryMessagePipe.MESSAGE_START_IDENTIFIER}' but was '${identifier}`);\n        }\n        const length = reader.readUint32();\n        return length;\n    }\n\n    dispose(): void {\n        this.underlyingPipe.removeListener('data', this.dataHandler);\n        this.underlyingPipe.end();\n        this.onMessageEmitter.dispose();\n        this.cachedMessageData = {\n            chunks: [],\n            missingBytes: 0\n        };\n    }\n}\n\ninterface StreamedMessageData {\n    chunks: Uint8Array[];\n    missingBytes: number;\n    partialMessageStart?: Uint8Array;\n}\n","// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as cp from 'child_process';\nimport { Socket } from 'net';\nimport { Duplex } from 'stream';\nimport { AbstractChannel, Disposable, WriteBuffer } from '../../common';\nimport { Uint8ArrayReadBuffer, Uint8ArrayWriteBuffer } from '../../common/message-rpc/uint8-array-message-buffer';\nimport { BinaryMessagePipe } from './binary-message-pipe';\n\n/**\n * A {@link Channel} to send messages between two processes using a dedicated pipe/fd for binary messages.\n * This fd is opened as 5th channel in addition to the default stdios (stdin, stdout, stderr, ipc). This means the default channels\n * are not blocked and can be used by the respective process for additional custom message handling.\n */\nexport class IPCChannel extends AbstractChannel {\n\n    protected messagePipe: BinaryMessagePipe;\n\n    protected ipcErrorListener: (error: Error) => void = error => this.onErrorEmitter.fire(error);\n\n    constructor(childProcess?: cp.ChildProcess) {\n        super();\n        if (childProcess) {\n            this.setupChildProcess(childProcess);\n        } else {\n            this.setupProcess();\n        }\n        this.messagePipe.onMessage(message => {\n            this.onMessageEmitter.fire(() => new Uint8ArrayReadBuffer(message));\n        });\n    }\n\n    protected setupChildProcess(childProcess: cp.ChildProcess): void {\n        childProcess.once('exit', code => this.onCloseEmitter.fire({ reason: 'Child process has been terminated', code: code ?? undefined }));\n        this.messagePipe = new BinaryMessagePipe(childProcess.stdio[4] as Duplex);\n        childProcess.on('error', this.ipcErrorListener);\n        this.toDispose.push(Disposable.create(() => {\n            childProcess.removeListener('error', this.ipcErrorListener);\n            this.messagePipe.dispose();\n        }));\n    }\n\n    protected setupProcess(): void {\n        process.once('beforeExit', code => this.onCloseEmitter.fire({ reason: 'Process is about to be terminated', code }));\n        this.messagePipe = new BinaryMessagePipe(new Socket({ fd: 4 }));\n        process.on('uncaughtException', this.ipcErrorListener);\n        this.toDispose.push(Disposable.create(() => {\n            (process as NodeJS.EventEmitter).removeListener('uncaughtException', this.ipcErrorListener);\n            this.messagePipe.dispose();\n        }));\n    }\n\n    getWriteBuffer(): WriteBuffer {\n        const result = new Uint8ArrayWriteBuffer();\n        result.onCommit(buffer => {\n            this.messagePipe.send(buffer);\n        });\n\n        return result;\n    }\n\n}\n","\n// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Channel } from '../../common/message-rpc/channel';\n\nconst THEIA_PARENT_PID = 'THEIA_PARENT_PID';\nconst THEIA_ENTRY_POINT = 'THEIA_ENTRY_POINT';\n\nexport const ipcEntryPoint: string | undefined = process.env[THEIA_ENTRY_POINT];\n\nexport type IPCEntryPoint = (connection: Channel) => void;\nexport namespace IPCEntryPoint {\n    /**\n     * Throws if `THEIA_ENTRY_POINT` is undefined or empty.\n     */\n    export function getScriptFromEnv(): string {\n        if (!ipcEntryPoint) {\n            throw new Error(`\"${THEIA_ENTRY_POINT}\" is missing from the environment`);\n        }\n        return ipcEntryPoint;\n    }\n}\n\n/**\n * Exit the current process if the parent process is not alive.\n * Relevant only for some OS, like Windows\n */\nexport function checkParentAlive(): void {\n    if (process.env[THEIA_PARENT_PID]) {\n        const parentPid = Number(process.env[THEIA_PARENT_PID]);\n\n        if (typeof parentPid === 'number' && !isNaN(parentPid)) {\n            setInterval(() => {\n                try {\n                    // throws an exception if the main process doesn't exist anymore.\n                    process.kill(parentPid, 0);\n                } catch {\n                    process.exit();\n                }\n            }, 5000).unref(); // we don't want this timeout to keep the process alive\n        }\n    }\n}\n\nexport function createIpcEnv(options?: {\n    entryPoint?: string\n    env?: NodeJS.ProcessEnv\n}): NodeJS.ProcessEnv {\n    const op = Object.assign({}, options);\n    const childEnv = Object.assign({}, op.env);\n\n    for (const key of Object.keys(childEnv)) {\n        if (key.startsWith('THEIA_')) {\n            delete childEnv[key];\n        }\n    }\n\n    childEnv[THEIA_PARENT_PID] = String(process.pid);\n    childEnv[THEIA_ENTRY_POINT] = op.entryPoint;\n\n    return childEnv;\n}\n"],"names":[],"sourceRoot":""}