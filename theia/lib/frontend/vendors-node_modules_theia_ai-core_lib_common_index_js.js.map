{"version":3,"file":"vendors-node_modules_theia_ai-core_lib_common_index_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/ai-core/src/common/agent-service.ts?","webpack:///./node_modules/@theia/ai-core/src/common/agent.ts?","webpack:///./node_modules/@theia/ai-core/src/common/agents-variable-contribution.ts?","webpack:///./node_modules/@theia/ai-core/src/common/ai-variable-resource.ts?","webpack:///./node_modules/@theia/ai-core/src/common/configurable-in-memory-resources.ts?","webpack:///./node_modules/@theia/ai-core/src/common/index.ts?","webpack:///./node_modules/@theia/ai-core/src/common/language-model-alias.ts?","webpack:///./node_modules/@theia/ai-core/src/common/language-model-delegate.ts?","webpack:///./node_modules/@theia/ai-core/src/common/language-model-service.ts?","webpack:///./node_modules/@theia/ai-core/src/common/language-model-util.ts?","webpack:///./node_modules/@theia/ai-core/src/common/language-model.ts?","webpack:///./node_modules/@theia/ai-core/src/common/notification-types.ts?","webpack:///./node_modules/@theia/ai-core/src/common/prompt-service-util.ts?","webpack:///./node_modules/@theia/ai-core/src/common/prompt-service.ts?","webpack:///./node_modules/@theia/ai-core/src/common/prompt-text.ts?","webpack:///./node_modules/@theia/ai-core/src/common/protocol.ts?","webpack:///./node_modules/@theia/ai-core/src/common/settings-service.ts?","webpack:///./node_modules/@theia/ai-core/src/common/today-variable-contribution.ts?","webpack:///./node_modules/@theia/ai-core/src/common/token-usage-service.ts?","webpack:///./node_modules/@theia/ai-core/src/common/tool-invocation-registry.ts?","webpack:///./node_modules/@theia/ai-core/src/common/variable-service.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { inject, injectable, optional, postConstruct } from '@theia/core/shared/inversify';\nimport { Emitter, Event } from '@theia/core';\nimport { Agent } from './agent';\nimport { AISettingsService } from './settings-service';\nimport { PromptService } from './prompt-service';\n\nexport const AgentService = Symbol('AgentService');\n\n/**\n * Service to access the list of known Agents.\n */\nexport interface AgentService {\n    /**\n     * Retrieves a list of all available agents, i.e. agents which are not disabled\n     */\n    getAgents(): Agent[];\n    /**\n     * Retrieves a list of all agents, including disabled ones.\n     */\n    getAllAgents(): Agent[];\n    /**\n     * Enable the agent with the specified id.\n     * @param agentId the agent id.\n     */\n    enableAgent(agentId: string): void;\n    /**\n     * disable the agent with the specified id.\n     * @param agentId the agent id.\n     */\n    disableAgent(agentId: string): void;\n    /**\n     * query whether this agent is currently enabled or disabled.\n     * @param agentId the agent id.\n     * @return true if the agent is enabled, false otherwise.\n     */\n    isEnabled(agentId: string): boolean;\n\n    /**\n     * Allows to register an agent programmatically.\n     * @param agent the agent to register\n     */\n    registerAgent(agent: Agent): void;\n\n    /**\n     * Allows to unregister an agent programmatically.\n     * @param agentId the agent id to unregister\n     */\n    unregisterAgent(agentId: string): void;\n\n    /**\n     * Emitted when the list of agents changes.\n     * This can be used to update the UI when agents are added or removed.\n     */\n    onDidChangeAgents: Event<void>;\n}\n\n@injectable()\nexport class AgentServiceImpl implements AgentService {\n\n    @inject(AISettingsService) @optional()\n    protected readonly aiSettingsService: AISettingsService | undefined;\n\n    @inject(PromptService)\n    protected readonly promptService: PromptService;\n\n    protected disabledAgents = new Set<string>();\n\n    protected _agents: Agent[] = [];\n\n    private readonly onDidChangeAgentsEmitter = new Emitter<void>();\n    readonly onDidChangeAgents = this.onDidChangeAgentsEmitter.event;\n\n    @postConstruct()\n    protected init(): void {\n        this.aiSettingsService?.getSettings().then(settings => {\n            Object.entries(settings).forEach(([agentId, agentSettings]) => {\n                if (agentSettings.enable === false) {\n                    this.disabledAgents.add(agentId);\n                }\n            });\n        });\n    }\n\n    registerAgent(agent: Agent): void {\n        this._agents.push(agent);\n        agent.prompts.forEach(\n            prompt => {\n                this.promptService.addBuiltInPromptFragment(prompt.defaultVariant, prompt.id, true);\n                prompt.variants?.forEach(variant => {\n                    this.promptService.addBuiltInPromptFragment(variant, prompt.id);\n                });\n            }\n        );\n        this.onDidChangeAgentsEmitter.fire();\n    }\n\n    unregisterAgent(agentId: string): void {\n        const agent = this._agents.find(a => a.id === agentId);\n        this._agents = this._agents.filter(a => a.id !== agentId);\n        this.onDidChangeAgentsEmitter.fire();\n        agent?.prompts.forEach(\n            prompt => {\n                this.promptService.removePromptFragment(prompt.defaultVariant.id);\n                prompt.variants?.forEach(variant => {\n                    this.promptService.removePromptFragment(variant.id);\n                });\n            }\n        );\n    }\n\n    getAgents(): Agent[] {\n        return this._agents.filter(agent => this.isEnabled(agent.id));\n    }\n\n    getAllAgents(): Agent[] {\n        return this._agents;\n    }\n\n    enableAgent(agentId: string): void {\n        this.disabledAgents.delete(agentId);\n        this.aiSettingsService?.updateAgentSettings(agentId, { enable: true });\n    }\n\n    disableAgent(agentId: string): void {\n        this.disabledAgents.add(agentId);\n        this.aiSettingsService?.updateAgentSettings(agentId, { enable: false });\n    }\n\n    isEnabled(agentId: string): boolean {\n        return !this.disabledAgents.has(agentId);\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { LanguageModelRequirement } from './language-model';\nimport { BasePromptFragment } from './prompt-service';\n\nexport interface AgentSpecificVariables {\n    name: string;\n    description: string;\n    usedInPrompt: boolean;\n}\n\nexport interface PromptVariantSet {\n    id: string;\n    defaultVariant: BasePromptFragment;\n    variants?: BasePromptFragment[];\n}\n\nexport const Agent = Symbol('Agent');\n/**\n * Agents represent the main functionality of the AI system. They are responsible for processing user input, collecting information from the environment,\n * invoking and processing LLM responses, and providing the final response to the user while recording their actions in the AI history.\n *\n * Agents are meant to cover all use cases, from specialized scenarios to general purpose chat bots.\n *\n * Agents are encouraged to provide a detailed description of their functionality and their processed inputs.\n * They can also declare their used prompt templates, which makes them configurable for the user.\n */\nexport interface Agent {\n    /**\n     * Used to identify an agent, e.g. when it is requesting language models, etc.\n     *\n     * @note This parameter might be removed in favor of `name`. Therefore, it is recommended to set `id` to the same value as `name` for now.\n     */\n    readonly id: string;\n\n    /**\n     * Human-readable name shown to users to identify the agent. Must be unique.\n     * Use short names without \"Agent\" or \"Chat\" (see `tags` for adding further properties).\n     */\n    readonly name: string;\n\n    /** A markdown description of its functionality and its privacy-relevant requirements, including function call handlers that access some data autonomously. */\n    readonly description: string;\n\n    /** The list of global variable identifiers this agent needs to clarify its context requirements. See #39. */\n    readonly variables: string[];\n\n    /** The prompts introduced and used by this agent. */\n    readonly prompts: PromptVariantSet[];\n\n    /** Required language models. This includes the purpose and optional language model selector arguments. See #47. */\n    readonly languageModelRequirements: LanguageModelRequirement[];\n\n    /** A list of tags to filter agents and to display capabilities in the UI */\n    readonly tags?: string[];\n\n    /** The list of local variable identifiers this agent needs to clarify its context requirements. */\n    readonly agentSpecificVariables: AgentSpecificVariables[];\n\n    /** The list of global function identifiers this agent needs to clarify its context requirements. */\n    readonly functions: string[];\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { AIVariable, AIVariableContext, AIVariableContribution, AIVariableResolutionRequest, AIVariableResolver, AIVariableService, ResolvedAIVariable } from './variable-service';\nimport { MaybePromise, nls } from '@theia/core';\nimport { AgentService } from './agent-service';\n\nexport const AGENTS_VARIABLE: AIVariable = {\n    id: 'agents',\n    name: 'agents',\n    description: nls.localize('theia/ai/core/agentsVariable/description', 'Returns the list of agents available in the system')\n};\n\nexport interface ResolvedAgentsVariable extends ResolvedAIVariable {\n    agents: AgentDescriptor[];\n}\n\nexport interface AgentDescriptor {\n    id: string;\n    name: string;\n    description: string;\n}\n\n@injectable()\nexport class AgentsVariableContribution implements AIVariableContribution, AIVariableResolver {\n\n    @inject(AgentService)\n    protected readonly agentService: AgentService;\n\n    registerVariables(service: AIVariableService): void {\n        service.registerResolver(AGENTS_VARIABLE, this);\n    }\n\n    canResolve(request: AIVariableResolutionRequest, _context: AIVariableContext): MaybePromise<number> {\n        if (request.variable.name === AGENTS_VARIABLE.name) {\n            return 1;\n        }\n        return -1;\n    }\n\n    async resolve(request: AIVariableResolutionRequest, context: AIVariableContext): Promise<ResolvedAgentsVariable | undefined> {\n        if (request.variable.name === AGENTS_VARIABLE.name) {\n            const agents = this.agentService.getAgents().map(agent => ({\n                id: agent.id,\n                name: agent.name,\n                description: agent.description\n            }));\n            return { variable: AGENTS_VARIABLE, agents, value: JSON.stringify(agents) };\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2025 EclipseSource GmbH and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport * as deepEqual from 'fast-deep-equal';\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { Resource, URI, generateUuid } from '@theia/core';\nimport { AIVariableContext, AIVariableResolutionRequest } from './variable-service';\nimport stableJsonStringify = require('fast-json-stable-stringify');\nimport { ConfigurableInMemoryResources, ConfigurableMutableReferenceResource } from './configurable-in-memory-resources';\n\nexport const AI_VARIABLE_RESOURCE_SCHEME = 'ai-variable';\nexport const NO_CONTEXT_AUTHORITY = 'context-free';\n\n@injectable()\nexport class AIVariableResourceResolver {\n    @inject(ConfigurableInMemoryResources) protected readonly inMemoryResources: ConfigurableInMemoryResources;\n\n    @postConstruct()\n    protected init(): void {\n        this.inMemoryResources.onWillDispose(resource => this.cache.delete(resource.uri.toString()));\n    }\n\n    protected readonly cache = new Map<string, [Resource, AIVariableContext]>();\n\n    getOrCreate(request: AIVariableResolutionRequest, context: AIVariableContext, value: string): ConfigurableMutableReferenceResource {\n        const uri = this.toUri(request, context);\n        try {\n            const existing = this.inMemoryResources.resolve(uri);\n            existing.update({ contents: value });\n            return existing;\n        } catch { /* No-op */ }\n        const fresh = this.inMemoryResources.add(uri, { contents: value, readOnly: true, initiallyDirty: false });\n        const key = uri.toString();\n        this.cache.set(key, [fresh, context]);\n        return fresh;\n    }\n\n    protected toUri(request: AIVariableResolutionRequest, context: AIVariableContext): URI {\n        return URI.fromComponents({\n            scheme: AI_VARIABLE_RESOURCE_SCHEME,\n            query: stableJsonStringify({ arg: request.arg, name: request.variable.name }),\n            path: '/',\n            authority: this.toAuthority(context),\n            fragment: ''\n        });\n    }\n\n    protected toAuthority(context: AIVariableContext): string {\n        try {\n            if (deepEqual(context, {})) { return NO_CONTEXT_AUTHORITY; }\n            for (const [resource, cachedContext] of this.cache.values()) {\n                if (deepEqual(context, cachedContext)) {\n                    return resource.uri.authority;\n                }\n            }\n        } catch (err) {\n            // Mostly that deep equal could overflow the stack, but it should run into === or inequality before that.\n            console.warn('Problem evaluating context in AIVariableResourceResolver', err);\n        }\n        return generateUuid();\n    }\n\n    fromUri(uri: URI): { variableName: string, arg: string | undefined } | undefined {\n        if (uri.scheme !== AI_VARIABLE_RESOURCE_SCHEME) { return undefined; }\n        try {\n            const { name: variableName, arg } = JSON.parse(uri.query);\n            return variableName ? {\n                variableName,\n                arg,\n            } : undefined;\n        } catch { return undefined; }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2025 EclispeSource GmbH and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { SyncReferenceCollection, Reference, ResourceResolver, Resource, Event, Emitter, URI } from '@theia/core';\nimport { MarkdownString } from '@theia/core/lib/common/markdown-rendering';\n\n@injectable()\n/** For creating highly configurable in-memory resources */\nexport class ConfigurableInMemoryResources implements ResourceResolver {\n\n    protected readonly resources = new SyncReferenceCollection<string, ConfigurableMutableResource>(uri => new ConfigurableMutableResource(new URI(uri)));\n\n    get onWillDispose(): Event<ConfigurableMutableResource> {\n        return this.resources.onWillDispose;\n    }\n\n    add(uri: URI, options: ResourceInitializationOptions): ConfigurableMutableReferenceResource {\n        const resourceUri = uri.toString();\n        if (this.resources.has(resourceUri)) {\n            throw new Error(`Cannot add already existing in-memory resource '${resourceUri}'`);\n        }\n        const resource = this.acquire(resourceUri);\n        resource.update(options);\n        return resource;\n    }\n\n    update(uri: URI, options: ResourceInitializationOptions): Resource {\n        const resourceUri = uri.toString();\n        const resource = this.resources.get(resourceUri);\n        if (!resource) {\n            throw new Error(`Cannot update non-existent in-memory resource '${resourceUri}'`);\n        }\n        resource.update(options);\n        return resource;\n    }\n\n    resolve(uri: URI): ConfigurableMutableReferenceResource {\n        const uriString = uri.toString();\n        if (!this.resources.has(uriString)) {\n            throw new Error(`In memory '${uriString}' resource does not exist.`);\n        }\n        return this.acquire(uriString);\n    }\n\n    protected acquire(uri: string): ConfigurableMutableReferenceResource {\n        const reference = this.resources.acquire(uri);\n        return new ConfigurableMutableReferenceResource(reference);\n    }\n}\n\nexport type ResourceInitializationOptions = Pick<Resource, 'autosaveable' | 'initiallyDirty' | 'readOnly'>\n    & { contents?: string | Promise<string>, onSave?: Resource['saveContents'] };\n\nexport class ConfigurableMutableResource implements Resource {\n    protected readonly onDidChangeContentsEmitter = new Emitter<void>();\n    readonly onDidChangeContents = this.onDidChangeContentsEmitter.event;\n    protected fireDidChangeContents(): void {\n        this.onDidChangeContentsEmitter.fire();\n    }\n\n    protected readonly onDidChangeReadonlyEmitter = new Emitter<boolean | MarkdownString>();\n    readonly onDidChangeReadOnly = this.onDidChangeReadonlyEmitter.event;\n\n    constructor(readonly uri: URI, protected options?: ResourceInitializationOptions) { }\n\n    get readOnly(): Resource['readOnly'] {\n        return this.options?.readOnly;\n    }\n\n    get autosaveable(): boolean {\n        return this.options?.autosaveable !== false;\n    }\n\n    get initiallyDirty(): boolean {\n        return !!this.options?.initiallyDirty;\n    }\n\n    get contents(): string | Promise<string> {\n        return this.options?.contents ?? '';\n    }\n\n    readContents(): Promise<string> {\n        return Promise.resolve(this.options?.contents ?? '');\n    }\n\n    async saveContents(contents: string): Promise<void> {\n        await this.options?.onSave?.(contents);\n        this.update({ contents });\n    }\n\n    update(options: ResourceInitializationOptions): void {\n        const didContentsChange = 'contents' in options && options.contents !== this.options?.contents;\n        const didReadOnlyChange = 'readOnly' in options && options.readOnly !== this.options?.readOnly;\n        this.options = { ...this.options, ...options };\n        if (didContentsChange) {\n            this.onDidChangeContentsEmitter.fire();\n        }\n        if (didReadOnlyChange) {\n            this.onDidChangeReadonlyEmitter.fire(this.readOnly ?? false);\n        }\n    }\n\n    dispose(): void {\n        this.onDidChangeContentsEmitter.dispose();\n    }\n}\n\nexport class ConfigurableMutableReferenceResource implements Resource {\n    constructor(protected reference: Reference<ConfigurableMutableResource>) { }\n\n    get uri(): URI {\n        return this.reference.object.uri;\n    }\n\n    get onDidChangeContents(): Event<void> {\n        return this.reference.object.onDidChangeContents;\n    }\n\n    dispose(): void {\n        this.reference.dispose();\n    }\n\n    readContents(): Promise<string> {\n        return this.reference.object.readContents();\n    }\n\n    saveContents(contents: string): Promise<void> {\n        return this.reference.object.saveContents(contents);\n    }\n\n    update(options: ResourceInitializationOptions): void {\n        this.reference.object.update(options);\n    }\n\n    get readOnly(): Resource['readOnly'] {\n        return this.reference.object.readOnly;\n    }\n\n    get initiallyDirty(): boolean {\n        return this.reference.object.initiallyDirty;\n    }\n\n    get autosaveable(): boolean {\n        return this.reference.object.autosaveable;\n    }\n\n    get contents(): string | Promise<string> {\n        return this.reference.object.contents;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nexport * from './agent-service';\nexport * from './agent';\nexport * from './agents-variable-contribution';\nexport * from './tool-invocation-registry';\nexport * from './language-model-delegate';\nexport * from './language-model-util';\nexport * from './language-model';\nexport * from './language-model-alias';\nexport * from './prompt-service';\nexport * from './prompt-service-util';\nexport * from './prompt-text';\nexport * from './protocol';\nexport * from './today-variable-contribution';\nexport * from './variable-service';\nexport * from './settings-service';\nexport * from './language-model-service';\nexport * from './token-usage-service';\nexport * from './ai-variable-resource';\nexport * from './configurable-in-memory-resources';\nexport * from './notification-types';\n","// *****************************************************************************\n// Copyright (C) 2024-2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Event } from '@theia/core';\n\n/**\n * Represents an alias for a language model, allowing fallback and selection.\n */\nexport interface LanguageModelAlias {\n    /**\n     * The unique identifier for the alias.\n     */\n    id: string;\n    /**\n     * The list of default model IDs to use if no selectedModelId is set.\n     * Ordered by priority. The first entry also serves as fallback.\n     */\n    defaultModelIds: string[];\n    /**\n     * A human-readable description of the alias.\n     */\n    description?: string;\n    /**\n     * The currently selected model ID, if any.\n     */\n    selectedModelId?: string;\n}\n\nexport const LanguageModelAliasRegistry = Symbol('LanguageModelAliasRegistry');\n/**\n * Registry for managing language model aliases.\n */\nexport interface LanguageModelAliasRegistry {\n    /**\n     * Promise that resolves when the registry is ready for use (preferences loaded).\n     */\n    ready: Promise<void>;\n\n    /**\n     * Event that is fired when the alias list changes.\n     */\n    onDidChange: Event<void>;\n    /**\n     * Add a new alias or update an existing one.\n     */\n    addAlias(alias: LanguageModelAlias): void;\n    /**\n     * Remove an alias by its id.\n     */\n    removeAlias(id: string): void;\n    /**\n     * Get all aliases.\n     */\n    getAliases(): LanguageModelAlias[];\n    /**\n     * Resolve an alias or model id to a prioritized list of model ids.\n     * If the id is not an alias, returns [id].\n     * If the alias exists and has a selectedModelId, returns [selectedModelId].\n     * If the alias exists and has no selectedModelId, returns defaultModelIds.\n     * If the alias does not exist, returns undefined.\n     */\n    resolveAlias(id: string): string[] | undefined;\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CancellationToken } from '@theia/core';\nimport {\n    LanguageModelMetaData, LanguageModelParsedResponse, LanguageModelRequest, LanguageModelStreamResponsePart,\n    LanguageModelTextResponse, ToolCallResult\n} from './language-model';\n\nexport const LanguageModelDelegateClient = Symbol('LanguageModelDelegateClient');\nexport interface LanguageModelDelegateClient {\n    toolCall(requestId: string, toolId: string, args_string: string): Promise<ToolCallResult>;\n    send(id: string, token: LanguageModelStreamResponsePart | undefined): void;\n    error(id: string, error: Error): void;\n}\nexport const LanguageModelRegistryFrontendDelegate = Symbol('LanguageModelRegistryFrontendDelegate');\nexport interface LanguageModelRegistryFrontendDelegate {\n    getLanguageModelDescriptions(): Promise<LanguageModelMetaData[]>;\n}\n\nexport interface LanguageModelStreamResponseDelegate {\n    streamId: string;\n}\nexport const isLanguageModelStreamResponseDelegate = (obj: unknown): obj is LanguageModelStreamResponseDelegate =>\n    !!(obj && typeof obj === 'object' && 'streamId' in obj && typeof (obj as { streamId: unknown }).streamId === 'string');\n\nexport type LanguageModelResponseDelegate = LanguageModelTextResponse | LanguageModelParsedResponse | LanguageModelStreamResponseDelegate;\n\nexport const LanguageModelFrontendDelegate = Symbol('LanguageModelFrontendDelegate');\nexport interface LanguageModelFrontendDelegate {\n    cancel(requestId: string): void;\n    request(modelId: string, request: LanguageModelRequest, requestId: string, cancellationToken?: CancellationToken): Promise<LanguageModelResponseDelegate>;\n}\n\nexport const languageModelRegistryDelegatePath = '/services/languageModelRegistryDelegatePath';\nexport const languageModelDelegatePath = '/services/languageModelDelegatePath';\n","// *****************************************************************************\n// Copyright (C) 2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject } from '@theia/core/shared/inversify';\nimport { isLanguageModelStreamResponse, LanguageModel, LanguageModelRegistry, LanguageModelResponse, LanguageModelStreamResponsePart, UserRequest } from './language-model';\nimport { LanguageModelExchangeRequest, LanguageModelSession } from './language-model-interaction-model';\nimport { Emitter } from '@theia/core';\n\nexport interface RequestAddedEvent {\n    type: 'requestAdded',\n    id: string;\n}\nexport interface ResponseCompletedEvent {\n    type: 'responseCompleted',\n    requestId: string;\n}\nexport interface SessionsClearedEvent {\n    type: 'sessionsCleared'\n}\nexport type SessionEvent = RequestAddedEvent | ResponseCompletedEvent | SessionsClearedEvent;\n\nexport const LanguageModelService = Symbol('LanguageModelService');\nexport interface LanguageModelService {\n    onSessionChanged: Emitter<SessionEvent>['event'];\n    /**\n     * Collection of all recorded LanguageModelSessions.\n     */\n    sessions: LanguageModelSession[];\n    /**\n     * Submit a language model request, it will automatically be recorded within a LanguageModelSession.\n     */\n    sendRequest(\n        languageModel: LanguageModel,\n        languageModelRequest: UserRequest\n    ): Promise<LanguageModelResponse>;\n}\nexport class LanguageModelServiceImpl implements LanguageModelService {\n\n    @inject(LanguageModelRegistry)\n    protected languageModelRegistry: LanguageModelRegistry;\n\n    private _sessions: LanguageModelSession[] = [];\n\n    get sessions(): LanguageModelSession[] {\n        return this._sessions;\n    }\n\n    set sessions(newSessions: LanguageModelSession[]) {\n        this._sessions = newSessions;\n        if (newSessions.length === 0) {\n            this.sessionChangedEmitter.fire({ type: 'sessionsCleared' });\n        }\n    }\n\n    protected sessionChangedEmitter = new Emitter<SessionEvent>();\n    onSessionChanged = this.sessionChangedEmitter.event;\n\n    async sendRequest(\n        languageModel: LanguageModel,\n        languageModelRequest: UserRequest\n    ): Promise<LanguageModelResponse> {\n        // Filter messages based on client settings\n        languageModelRequest.messages = languageModelRequest.messages.filter(message => {\n            if (message.type === 'thinking' && languageModelRequest.clientSettings?.keepThinking === false) {\n                return false;\n            }\n            if ((message.type === 'tool_result' || message.type === 'tool_use') &&\n                languageModelRequest.clientSettings?.keepToolCalls === false) {\n                return false;\n            }\n            // Keep all other messages\n            return true;\n        });\n\n        let response = await languageModel.request(languageModelRequest, languageModelRequest.cancellationToken);\n        let storedResponse: LanguageModelExchangeRequest['response'];\n        if (isLanguageModelStreamResponse(response)) {\n            const parts: LanguageModelStreamResponsePart[] = [];\n            response = {\n                ...response,\n                stream: createLoggingAsyncIterable(response.stream,\n                    parts,\n                    () => this.sessionChangedEmitter.fire({ type: 'responseCompleted', requestId: languageModelRequest.subRequestId ?? languageModelRequest.requestId }))\n            };\n            storedResponse = { parts };\n        } else {\n            storedResponse = response;\n        }\n        this.storeRequest(languageModel, languageModelRequest, storedResponse);\n\n        return response;\n    }\n\n    protected storeRequest(languageModel: LanguageModel, languageModelRequest: UserRequest, response: LanguageModelExchangeRequest['response']): void {\n        // Find or create the session for this request\n        let session = this._sessions.find(s => s.id === languageModelRequest.sessionId);\n        if (!session) {\n            session = {\n                id: languageModelRequest.sessionId,\n                exchanges: []\n            };\n            this._sessions.push(session);\n        }\n\n        // Find or create the exchange for this request\n        let exchange = session.exchanges.find(r => r.id === languageModelRequest.requestId);\n        if (!exchange) {\n            exchange = {\n                id: languageModelRequest.requestId,\n                requests: [],\n                metadata: { agent: languageModelRequest.agentId }\n            };\n            session.exchanges.push(exchange);\n        }\n\n        // Create and add the LanguageModelExchangeRequest to the exchange\n        const exchangeRequest: LanguageModelExchangeRequest = {\n            id: languageModelRequest.subRequestId ?? languageModelRequest.requestId,\n            request: languageModelRequest,\n            languageModel: languageModel.id,\n            response: response,\n            metadata: {}\n        };\n\n        exchange.requests.push(exchangeRequest);\n\n        exchangeRequest.metadata.agent = languageModelRequest.agentId;\n        exchangeRequest.metadata.timestamp = Date.now();\n\n        this.sessionChangedEmitter.fire({ type: 'requestAdded', id: languageModelRequest.subRequestId ?? languageModelRequest.requestId });\n    }\n\n}\n\n/**\n * Creates an AsyncIterable wrapper that stores each yielded item while preserving the\n * original AsyncIterable behavior.\n */\nasync function* createLoggingAsyncIterable(\n    stream: AsyncIterable<LanguageModelStreamResponsePart>,\n    parts: LanguageModelStreamResponsePart[],\n    streamFinished: () => void\n): AsyncIterable<LanguageModelStreamResponsePart> {\n    try {\n        for await (const part of stream) {\n            parts.push(part);\n            yield part;\n        }\n    } catch (error) {\n        parts.push({ content: `[NOT FROM LLM] An error occurred: ${error.message}` });\n        throw error;\n    } finally {\n        streamFinished();\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport {\n    isLanguageModelParsedResponse,\n    isLanguageModelStreamResponse,\n    isLanguageModelTextResponse,\n    isTextResponsePart,\n    LanguageModelResponse,\n    ToolRequest\n} from './language-model';\nimport { LanguageModelMonitoredStreamResponse } from './language-model-interaction-model';\n\n/**\n * Retrieves the text content from a `LanguageModelResponse` object.\n *\n * **Important:** For stream responses, the stream can only be consumed once. Calling this function multiple times on the same stream response will return an empty string (`''`)\n * on subsequent calls, as the stream will have already been consumed.\n *\n * @param {LanguageModelResponse} response - The response object, which may contain a text, stream, or parsed response.\n * @returns {Promise<string>} - A promise that resolves to the text content of the response.\n * @throws {Error} - Throws an error if the response type is not supported or does not contain valid text content.\n */\nexport const getTextOfResponse = async (response: LanguageModelResponse | LanguageModelMonitoredStreamResponse): Promise<string> => {\n    if (isLanguageModelTextResponse(response)) {\n        return response.text;\n    } else if (isLanguageModelStreamResponse(response)) {\n        let result = '';\n        for await (const chunk of response.stream) {\n            result += (isTextResponsePart(chunk) && chunk.content) ? chunk.content : '';\n        }\n        return result;\n    } else if (isLanguageModelParsedResponse(response)) {\n        return response.content;\n    } else if ('parts' in response) {\n        // Handle monitored stream response\n        let result = '';\n        for (const chunk of response.parts) {\n            result += (isTextResponsePart(chunk) && chunk.content) ? chunk.content : '';\n        }\n        return result;\n    }\n    throw new Error(`Invalid response type ${response}`);\n};\n\nexport const getJsonOfResponse = async (response: LanguageModelResponse | LanguageModelMonitoredStreamResponse): Promise<unknown> => {\n    const text = await getTextOfResponse(response);\n    return getJsonOfText(text);\n};\n\nexport const getJsonOfText = (text: string): unknown => {\n    if (text.startsWith('```json')) {\n        const regex = /```json\\s*([\\s\\S]*?)\\s*```/g;\n        let match;\n        // eslint-disable-next-line no-null/no-null\n        while ((match = regex.exec(text)) !== null) {\n            try {\n                return JSON.parse(match[1]);\n            } catch (error) {\n                console.error('Failed to parse JSON:', error);\n            }\n        }\n    } else if (text.startsWith('{') || text.startsWith('[')) {\n        return JSON.parse(text);\n    }\n    throw new Error('Invalid response format');\n};\n\nexport const toolRequestToPromptText = (toolRequest: ToolRequest): string => `${toolRequest.id}`;\n","// *****************************************************************************\n// Copyright (C) 2024-2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ContributionProvider, ILogger, isFunction, isObject, Event, Emitter, CancellationToken } from '@theia/core';\nimport { inject, injectable, named, postConstruct } from '@theia/core/shared/inversify';\n\nexport type MessageActor = 'user' | 'ai' | 'system';\n\nexport type LanguageModelMessage = TextMessage | ThinkingMessage | ToolUseMessage | ToolResultMessage | ImageMessage;\nexport namespace LanguageModelMessage {\n\n    export function isTextMessage(obj: LanguageModelMessage): obj is TextMessage {\n        return obj.type === 'text';\n    }\n    export function isThinkingMessage(obj: LanguageModelMessage): obj is ThinkingMessage {\n        return obj.type === 'thinking';\n    }\n    export function isToolUseMessage(obj: LanguageModelMessage): obj is ToolUseMessage {\n        return obj.type === 'tool_use';\n    }\n    export function isToolResultMessage(obj: LanguageModelMessage): obj is ToolResultMessage {\n        return obj.type === 'tool_result';\n    }\n    export function isImageMessage(obj: LanguageModelMessage): obj is ImageMessage {\n        return obj.type === 'image';\n    }\n}\nexport interface TextMessage {\n    actor: MessageActor;\n    type: 'text';\n    text: string;\n}\nexport interface ThinkingMessage {\n    actor: 'ai'\n    type: 'thinking';\n    thinking: string;\n    signature: string;\n}\n\nexport interface ToolResultMessage {\n    actor: 'user';\n    tool_use_id: string;\n    name: string;\n    type: 'tool_result';\n    content?: ToolCallResult;\n    is_error?: boolean;\n}\n\nexport interface ToolUseMessage {\n    actor: 'ai';\n    type: 'tool_use';\n    id: string;\n    input: unknown;\n    name: string;\n}\nexport type ImageMimeType = 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp' | 'image/bmp' | 'image/svg+xml' | string & {};\nexport interface UrlImageContent { url: string };\nexport interface Base64ImageContent {\n    base64data: string;\n    mimeType: ImageMimeType;\n};\nexport type ImageContent = UrlImageContent | Base64ImageContent;\nexport namespace ImageContent {\n    export const isUrl = (obj: ImageContent): obj is UrlImageContent => 'url' in obj;\n    export const isBase64 = (obj: ImageContent): obj is Base64ImageContent => 'base64data' in obj && 'mimeType' in obj;\n}\nexport interface ImageMessage {\n    actor: 'ai' | 'user';\n    type: 'image';\n    image: ImageContent;\n}\n\nexport const isLanguageModelRequestMessage = (obj: unknown): obj is LanguageModelMessage =>\n    !!(obj && typeof obj === 'object' &&\n        'type' in obj &&\n        typeof (obj as { type: unknown }).type === 'string' &&\n        (obj as { type: unknown }).type === 'text' &&\n        'query' in obj &&\n        typeof (obj as { query: unknown }).query === 'string'\n    );\n\nexport interface ToolRequestParameterProperty {\n    type?: | 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null';\n    anyOf?: ToolRequestParameterProperty[];\n    [key: string]: unknown;\n}\n\nexport type ToolRequestParametersProperties = Record<string, ToolRequestParameterProperty>;\nexport interface ToolRequestParameters {\n    type?: 'object';\n    properties: ToolRequestParametersProperties;\n    required?: string[];\n}\nexport interface ToolRequest {\n    id: string;\n    name: string;\n    parameters: ToolRequestParameters\n    description?: string;\n    handler: (arg_string: string, ctx?: unknown) => Promise<ToolCallResult>;\n    providerName?: string;\n}\n\nexport namespace ToolRequest {\n    function isToolRequestParameterProperty(obj: unknown): obj is ToolRequestParameterProperty {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        const record = obj as Record<string, unknown>;\n\n        // Check that at least one of \"type\" or \"anyOf\" exists\n        if (!('type' in record) && !('anyOf' in record)) {\n            return false;\n        }\n\n        // If an \"anyOf\" field is present, it must be an array where each item is also a valid property.\n        if ('anyOf' in record) {\n            if (!Array.isArray(record.anyOf)) {\n                return false;\n            }\n            for (const item of record.anyOf) {\n                if (!isToolRequestParameterProperty(item)) {\n                    return false;\n                }\n            }\n        }\n        if ('type' in record && typeof record.type !== 'string') {\n            return false;\n        }\n\n        // No further checks required for additional properties.\n        return true;\n    }\n    export function isToolRequestParametersProperties(obj: unknown): obj is ToolRequestParametersProperties {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        return Object.entries(obj).every(([key, value]) => {\n            if (typeof key !== 'string') {\n                return false;\n            }\n            return isToolRequestParameterProperty(value);\n        });\n    }\n    export function isToolRequestParameters(obj: unknown): obj is ToolRequestParameters {\n        return !!obj && typeof obj === 'object' &&\n            (!('type' in obj) || obj.type === 'object') &&\n            'properties' in obj && isToolRequestParametersProperties(obj.properties) &&\n            (!('required' in obj) || (Array.isArray(obj.required) && obj.required.every(prop => typeof prop === 'string')));\n    }\n}\nexport interface LanguageModelRequest {\n    messages: LanguageModelMessage[],\n    tools?: ToolRequest[];\n    response_format?: { type: 'text' } | { type: 'json_object' } | ResponseFormatJsonSchema;\n    settings?: { [key: string]: unknown };\n    clientSettings?: { keepToolCalls: boolean; keepThinking: boolean }\n}\nexport interface ResponseFormatJsonSchema {\n    type: 'json_schema';\n    json_schema: {\n        name: string,\n        description?: string,\n        schema?: Record<string, unknown>,\n        strict?: boolean | null\n    };\n}\n\n/**\n * The UserRequest extends the \"pure\" LanguageModelRequest for cancelling support as well as\n * logging metadata.\n * The additional metadata might also be used for other use cases, for example to query default\n * request settings based on the agent id, merging with the request settings handed over.\n */\nexport interface UserRequest extends LanguageModelRequest {\n    /**\n     * Identifier of the Ai/ChatSession\n     */\n    sessionId: string;\n    /**\n     * Identifier of the request or overall exchange. Corresponds to request id in Chat sessions\n     */\n    requestId: string;\n    /**\n     * Id of a request in case a single exchange consists of multiple requests. In this case the requestId corresponds to the overall exchange.\n     */\n    subRequestId?: string;\n    /**\n     * Optional agent identifier in case the request was sent by an agent\n     */\n    agentId?: string;\n    /**\n     * Cancellation support\n     */\n    cancellationToken?: CancellationToken;\n}\n\nexport interface LanguageModelTextResponse {\n    text: string;\n}\nexport const isLanguageModelTextResponse = (obj: unknown): obj is LanguageModelTextResponse =>\n    !!(obj && typeof obj === 'object' && 'text' in obj && typeof (obj as { text: unknown }).text === 'string');\n\nexport type LanguageModelStreamResponsePart = TextResponsePart | ToolCallResponsePart | ThinkingResponsePart | UsageResponsePart;\n\nexport const isLanguageModelStreamResponsePart = (part: unknown): part is LanguageModelStreamResponsePart =>\n    isUsageResponsePart(part) || isTextResponsePart(part) || isThinkingResponsePart(part) || isToolCallResponsePart(part);\n\nexport interface UsageResponsePart {\n    input_tokens: number;\n    output_tokens: number;\n}\nexport const isUsageResponsePart = (part: unknown): part is UsageResponsePart =>\n    !!(part && typeof part === 'object' &&\n        'input_tokens' in part && typeof part.input_tokens === 'number' &&\n        'output_tokens' in part && typeof part.output_tokens === 'number');\nexport interface TextResponsePart {\n    content: string;\n}\nexport const isTextResponsePart = (part: unknown): part is TextResponsePart =>\n    !!(part && typeof part === 'object' && 'content' in part && typeof part.content === 'string');\n\nexport interface ToolCallResponsePart {\n    tool_calls: ToolCall[];\n}\nexport const isToolCallResponsePart = (part: unknown): part is ToolCallResponsePart =>\n    !!(part && typeof part === 'object' && 'tool_calls' in part && Array.isArray(part.tool_calls));\n\nexport interface ThinkingResponsePart {\n    thought: string;\n    signature: string;\n}\nexport const isThinkingResponsePart = (part: unknown): part is ThinkingResponsePart =>\n    !!(part && typeof part === 'object' && 'thought' in part && typeof part.thought === 'string');\n\nexport interface ToolCallTextResult { type: 'text', text: string; };\nexport interface ToolCallImageResult extends Base64ImageContent { type: 'image' };\nexport interface ToolCallAudioResult { type: 'audio', data: string; mimeType: string };\nexport interface ToolCallErrorResult { type: 'error', data: string; };\nexport type ToolCallContentResult = ToolCallTextResult | ToolCallImageResult | ToolCallAudioResult | ToolCallErrorResult;\nexport interface ToolCallContent {\n    content: ToolCallContentResult[];\n}\nexport type ToolCallResult = undefined | object | string | ToolCallContent;\nexport interface ToolCall {\n    id?: string;\n    function?: {\n        arguments?: string;\n        name?: string;\n    },\n    finished?: boolean;\n    result?: ToolCallResult;\n}\n\nexport interface LanguageModelStreamResponse {\n    stream: AsyncIterable<LanguageModelStreamResponsePart>;\n}\nexport const isLanguageModelStreamResponse = (obj: unknown): obj is LanguageModelStreamResponse =>\n    !!(obj && typeof obj === 'object' && 'stream' in obj);\n\nexport interface LanguageModelParsedResponse {\n    parsed: unknown;\n    content: string;\n}\nexport const isLanguageModelParsedResponse = (obj: unknown): obj is LanguageModelParsedResponse =>\n    !!(obj && typeof obj === 'object' && 'parsed' in obj && 'content' in obj);\n\nexport type LanguageModelResponse = LanguageModelTextResponse | LanguageModelStreamResponse | LanguageModelParsedResponse;\n\n///////////////////////////////////////////\n// Language Model Provider\n///////////////////////////////////////////\n\nexport const LanguageModelProvider = Symbol('LanguageModelProvider');\nexport type LanguageModelProvider = () => Promise<LanguageModel[]>;\n\n// See also VS Code `ILanguageModelChatMetadata`\nexport interface LanguageModelMetaData {\n    readonly id: string;\n    readonly name?: string;\n    readonly vendor?: string;\n    readonly version?: string;\n    readonly family?: string;\n    readonly maxInputTokens?: number;\n    readonly maxOutputTokens?: number;\n    readonly status: LanguageModelStatus;\n}\n\nexport namespace LanguageModelMetaData {\n    export function is(arg: unknown): arg is LanguageModelMetaData {\n        return isObject(arg) && 'id' in arg;\n    }\n}\n\nexport interface LanguageModelStatus {\n    status: 'ready' | 'unavailable';\n    message?: string;\n}\n\nexport interface LanguageModel extends LanguageModelMetaData {\n    request(request: UserRequest, cancellationToken?: CancellationToken): Promise<LanguageModelResponse>;\n}\n\nexport namespace LanguageModel {\n    export function is(arg: unknown): arg is LanguageModel {\n        return isObject(arg) && 'id' in arg && isFunction(arg.request);\n    }\n}\n\n// See also VS Code `ILanguageModelChatSelector`\ninterface VsCodeLanguageModelSelector {\n    readonly identifier?: string;\n    readonly name?: string;\n    readonly vendor?: string;\n    readonly version?: string;\n    readonly family?: string;\n    readonly tokens?: number;\n}\n\nexport interface LanguageModelSelector extends VsCodeLanguageModelSelector {\n    readonly agent: string;\n    readonly purpose: string;\n}\n\nexport type LanguageModelRequirement = Omit<LanguageModelSelector, 'agent'>;\n\nexport const LanguageModelRegistry = Symbol('LanguageModelRegistry');\n\n/**\n * Base interface for language model registries (frontend and backend).\n */\nexport interface LanguageModelRegistry {\n    onChange: Event<{ models: LanguageModel[] }>;\n    addLanguageModels(models: LanguageModel[]): void;\n    getLanguageModels(): Promise<LanguageModel[]>;\n    getLanguageModel(id: string): Promise<LanguageModel | undefined>;\n    removeLanguageModels(id: string[]): void;\n    selectLanguageModel(request: LanguageModelSelector): Promise<LanguageModel | undefined>;\n    selectLanguageModels(request: LanguageModelSelector): Promise<LanguageModel[] | undefined>;\n    patchLanguageModel<T extends LanguageModel = LanguageModel>(id: string, patch: Partial<T>): Promise<void>;\n}\n\nexport const FrontendLanguageModelRegistry = Symbol('FrontendLanguageModelRegistry');\n\n/**\n * Frontend-specific language model registry interface (supports alias resolution).\n */\nexport interface FrontendLanguageModelRegistry extends LanguageModelRegistry {\n    /**\n     * If an id of a language model is provded, returns the LanguageModel if it is `ready`.\n     * If an alias is provided, finds the highest-priority ready model from that alias.\n     * If none are ready returns undefined.\n     */\n    getReadyLanguageModel(idOrAlias: string): Promise<LanguageModel | undefined>;\n}\n\n@injectable()\nexport class DefaultLanguageModelRegistryImpl implements LanguageModelRegistry {\n    @inject(ILogger)\n    protected logger: ILogger;\n    @inject(ContributionProvider) @named(LanguageModelProvider)\n    protected readonly languageModelContributions: ContributionProvider<LanguageModelProvider>;\n\n    protected languageModels: LanguageModel[] = [];\n\n    protected markInitialized: () => void;\n    protected initialized: Promise<void> = new Promise(resolve => { this.markInitialized = resolve; });\n\n    protected changeEmitter = new Emitter<{ models: LanguageModel[] }>();\n    onChange = this.changeEmitter.event;\n\n    @postConstruct()\n    protected init(): void {\n        const contributions = this.languageModelContributions.getContributions();\n        const promises = contributions.map(provider => provider());\n        Promise.allSettled(promises).then(results => {\n            for (const result of results) {\n                if (result.status === 'fulfilled') {\n                    this.languageModels.push(...result.value);\n                } else {\n                    this.logger.error('Failed to add some language models:', result.reason);\n                }\n            }\n            this.markInitialized();\n        });\n    }\n\n    addLanguageModels(models: LanguageModel[]): void {\n        models.forEach(model => {\n            if (this.languageModels.find(lm => lm.id === model.id)) {\n                console.warn(`Tried to add already existing language model with id ${model.id}. The new model will be ignored.`);\n                return;\n            }\n            this.languageModels.push(model);\n            this.changeEmitter.fire({ models: this.languageModels });\n        });\n    }\n\n    async getLanguageModels(): Promise<LanguageModel[]> {\n        await this.initialized;\n        return this.languageModels;\n    }\n\n    async getLanguageModel(id: string): Promise<LanguageModel | undefined> {\n        await this.initialized;\n        return this.languageModels.find(model => model.id === id);\n    }\n\n    removeLanguageModels(ids: string[]): void {\n        ids.forEach(id => {\n            const index = this.languageModels.findIndex(model => model.id === id);\n            if (index !== -1) {\n                this.languageModels.splice(index, 1);\n                this.changeEmitter.fire({ models: this.languageModels });\n            } else {\n                console.warn(`Language model with id ${id} was requested to be removed, however it does not exist`);\n            }\n        });\n    }\n\n    async selectLanguageModels(request: LanguageModelSelector): Promise<LanguageModel[] | undefined> {\n        await this.initialized;\n        // TODO check for actor and purpose against settings\n        return this.languageModels.filter(model => model.status.status === 'ready' && isModelMatching(request, model));\n    }\n\n    async selectLanguageModel(request: LanguageModelSelector): Promise<LanguageModel | undefined> {\n        const models = await this.selectLanguageModels(request);\n        return models ? models[0] : undefined;\n    }\n\n    async patchLanguageModel<T extends LanguageModel = LanguageModel>(id: string, patch: Partial<T>): Promise<void> {\n        await this.initialized;\n        const model = this.languageModels.find(m => m.id === id);\n        if (!model) {\n            this.logger.warn(`Language model with id ${id} not found for patch.`);\n            return;\n        }\n        Object.assign(model, patch);\n        this.changeEmitter.fire({ models: this.languageModels });\n    }\n\n}\n\nexport function isModelMatching(request: LanguageModelSelector, model: LanguageModel): boolean {\n    return (!request.identifier || model.id === request.identifier) &&\n        (!request.name || model.name === request.name) &&\n        (!request.vendor || model.vendor === request.vendor) &&\n        (!request.version || model.version === request.version) &&\n        (!request.family || model.family === request.family);\n}\n","// *****************************************************************************\n// Copyright (C) 2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport const NOTIFICATION_TYPE_OFF = 'off';\nexport const NOTIFICATION_TYPE_OS_NOTIFICATION = 'os-notification';\nexport const NOTIFICATION_TYPE_MESSAGE = 'message';\nexport const NOTIFICATION_TYPE_BLINK = 'blink';\nexport type NotificationType =\n    | typeof NOTIFICATION_TYPE_OFF\n    | typeof NOTIFICATION_TYPE_OS_NOTIFICATION\n    | typeof NOTIFICATION_TYPE_MESSAGE\n    | typeof NOTIFICATION_TYPE_BLINK;\nexport const NOTIFICATION_TYPES: NotificationType[] = [\n    NOTIFICATION_TYPE_OFF,\n    NOTIFICATION_TYPE_OS_NOTIFICATION,\n    NOTIFICATION_TYPE_MESSAGE,\n    NOTIFICATION_TYPE_BLINK,\n];\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/** Should match the one from VariableResolverService. The format is `{{variableName:arg}}`. We allow {{}} and {{{}}} but no mixtures */\nexport const PROMPT_VARIABLE_TWO_BRACES_REGEX = /(?<!\\{)\\{\\{\\s*([^{}]+?)\\s*\\}\\}(?!\\})/g;\nexport const PROMPT_VARIABLE_THREE_BRACES_REGEX = /(?<!\\{)\\{\\{\\{\\s*([^{}]+?)\\s*\\}\\}\\}(?!\\})/g;\nexport function matchVariablesRegEx(template: string): RegExpMatchArray[] {\n    const twoBraceMatches = [...template.matchAll(PROMPT_VARIABLE_TWO_BRACES_REGEX)];\n    const threeBraceMatches = [...template.matchAll(PROMPT_VARIABLE_THREE_BRACES_REGEX)];\n    return twoBraceMatches.concat(threeBraceMatches);\n}\n\n/** Match function/tool references in the prompt. The format is `~{functionId}`. */\nexport const PROMPT_FUNCTION_REGEX = /\\~\\{\\s*(.*?)\\s*\\}/g;\n\nexport function matchFunctionsRegEx(template: string): RegExpMatchArray[] {\n    return [...template.matchAll(PROMPT_FUNCTION_REGEX)];\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Event, Emitter, URI, ILogger, DisposableCollection } from '@theia/core';\nimport { inject, injectable, optional, postConstruct } from '@theia/core/shared/inversify';\nimport { AIVariableArg, AIVariableContext, AIVariableService, createAIResolveVariableCache, ResolvedAIVariable } from './variable-service';\nimport { ToolInvocationRegistry } from './tool-invocation-registry';\nimport { toolRequestToPromptText } from './language-model-util';\nimport { ToolRequest } from './language-model';\nimport { matchFunctionsRegEx, matchVariablesRegEx } from './prompt-service-util';\nimport { AISettingsService } from './settings-service';\n\n/**\n * Represents a basic prompt fragment with an ID and template content.\n */\nexport interface BasePromptFragment {\n    /** Unique identifier for this prompt fragment */\n    id: string;\n\n    /** The template content, which may contain variables and function references */\n    template: string;\n}\n\n/**\n * Represents a customized prompt fragment with an assigned customization ID and priority.\n */\nexport interface CustomizedPromptFragment extends BasePromptFragment {\n    /**\n     * Unique identifier for this customization\n     */\n    customizationId: string;\n\n    /**\n     * The order/priority of this customization, higher values indicate higher priority\n     * when multiple customizations exist for the same fragment\n     */\n    priority: number;\n}\n\n/**\n * Union type representing either a built-in or customized prompt fragment\n */\nexport type PromptFragment = BasePromptFragment | CustomizedPromptFragment;\n\n/**\n * Type guard to check if a PromptFragment is a built-in fragment (not customized)\n * @param fragment The fragment to check\n * @returns True if the fragment is a basic BasePromptFragment (not customized)\n */\nexport function isBasePromptFragment(fragment: PromptFragment): fragment is BasePromptFragment {\n    return !('customizationId' in fragment && 'priority' in fragment);\n}\n\n/**\n * Type guard to check if a PromptFragment is a CustomizedPromptFragment\n * @param fragment The fragment to check\n * @returns True if the fragment is a CustomizedPromptFragment\n */\nexport function isCustomizedPromptFragment(fragment: PromptFragment): fragment is CustomizedPromptFragment {\n    return 'customizationId' in fragment && 'priority' in fragment;\n}\n\n/**\n * Map of prompt fragment IDs to prompt fragments\n */\nexport interface PromptMap { [id: string]: PromptFragment }\n\n/**\n * Represents a prompt fragment with all variables and function references resolved\n */\nexport interface ResolvedPromptFragment {\n    /** The fragment ID */\n    id: string;\n\n    /** The resolved prompt text with variables and function requests being replaced */\n    text: string;\n\n    /** All functions referenced in the prompt fragment */\n    functionDescriptions?: Map<string, ToolRequest>;\n\n    /** All variables resolved in the prompt fragment */\n    variables?: ResolvedAIVariable[];\n}\n\n/**\n * Describes a custom agent with its properties\n */\nexport interface CustomAgentDescription {\n    /** Unique identifier for this agent */\n    id: string;\n\n    /** Display name for the agent */\n    name: string;\n\n    /** Description of the agent's purpose and capabilities */\n    description: string;\n\n    /** The prompt text for this agent */\n    prompt: string;\n\n    /** The default large language model to use with this agent */\n    defaultLLM: string;\n}\n\nexport namespace CustomAgentDescription {\n    /**\n     * Type guard to check if an object is a CustomAgentDescription\n     */\n    export function is(entry: unknown): entry is CustomAgentDescription {\n        // eslint-disable-next-line no-null/no-null\n        return typeof entry === 'object' && entry !== null\n            && 'id' in entry && typeof entry.id === 'string'\n            && 'name' in entry && typeof entry.name === 'string'\n            && 'description' in entry && typeof entry.description === 'string'\n            && 'prompt' in entry && typeof entry.prompt === 'string'\n            && 'defaultLLM' in entry && typeof entry.defaultLLM === 'string';\n    }\n\n    /**\n     * Compares two CustomAgentDescription objects for equality\n     */\n    export function equals(a: CustomAgentDescription, b: CustomAgentDescription): boolean {\n        return a.id === b.id && a.name === b.name && a.description === b.description && a.prompt === b.prompt && a.defaultLLM === b.defaultLLM;\n    }\n}\n\n/**\n * Service responsible for customizing prompt fragments\n */\nexport const PromptFragmentCustomizationService = Symbol('PromptFragmentCustomizationService');\nexport interface PromptFragmentCustomizationService {\n    /**\n     * Event fired when a prompt fragment is changed\n     */\n    readonly onDidChangePromptFragmentCustomization: Event<string[]>;\n\n    /**\n     * Event fired when custom agents are modified\n     */\n    readonly onDidChangeCustomAgents: Event<void>;\n\n    /**\n     * Checks if a prompt fragment has customizations\n     * @param fragmentId The prompt fragment ID\n     * @returns Whether the fragment has any customizations\n     */\n    isPromptFragmentCustomized(fragmentId: string): boolean;\n\n    /**\n     * Gets the active customized prompt fragment for a given ID\n     * @param fragmentId The prompt fragment ID\n     * @returns The active customized fragment or undefined if none exists\n     */\n    getActivePromptFragmentCustomization(fragmentId: string): CustomizedPromptFragment | undefined;\n\n    /**\n     * Gets all customizations for a prompt fragment ordered by priority\n     * @param fragmentId The prompt fragment ID\n     * @returns Array of customized fragments ordered by priority (highest first)\n     */\n    getAllCustomizations(fragmentId: string): CustomizedPromptFragment[];\n\n    /**\n     * Gets the IDs of all prompt fragments that have customizations\n     * @returns Array of prompt fragment IDs\n     */\n    getCustomizedPromptFragmentIds(): string[];\n\n    /**\n     * Creates a new customization for a prompt fragment\n     * @param fragmentId The fragment ID to customize\n     * @param defaultContent Optional default content for the customization\n     */\n    createPromptFragmentCustomization(fragmentId: string, defaultContent?: string): Promise<void>;\n\n    /**\n     * Creates a customization based on a built-in fragment\n     * @param fragmentId The ID of the built-in fragment to customize\n     * @param defaultContent Optional default content for the customization\n     */\n    createBuiltInPromptFragmentCustomization(fragmentId: string, defaultContent?: string): Promise<void>;\n\n    /**\n     * Edits a specific customization of a prompt fragment\n     * @param fragmentId The prompt fragment ID\n     * @param customizationId The customization ID to edit\n     */\n    editPromptFragmentCustomization(fragmentId: string, customizationId: string): Promise<void>;\n\n    /**\n     * Edits the built-in customization of a prompt fragment\n     * @param fragmentId The prompt fragment ID to edit\n     * @param defaultContent Optional default content for the customization\n     */\n    editBuiltInPromptFragmentCustomization(fragmentId: string, defaultContent?: string): Promise<void>;\n\n    /**\n     * Removes a specific customization of a prompt fragment\n     * @param fragmentId The prompt fragment ID\n     * @param customizationId The customization ID to remove\n     */\n    removePromptFragmentCustomization(fragmentId: string, customizationId: string): Promise<void>;\n\n    /**\n     * Resets a fragment to its built-in version by removing all customizations\n     * @param fragmentId The fragment ID to reset\n     */\n    removeAllPromptFragmentCustomizations(fragmentId: string): Promise<void>;\n\n    /**\n     * Resets to a specific customization by removing higher-priority customizations\n     * @param fragmentId The fragment ID\n     * @param customizationId The customization ID to reset to\n     */\n    resetToCustomization(fragmentId: string, customizationId: string): Promise<void>;\n\n    /**\n     * Gets information about the description of a customization\n     * @param fragmentId The fragment ID\n     * @param customizationId The customization ID\n     * @returns Description of the customization\n     */\n    getPromptFragmentCustomizationDescription(fragmentId: string, customizationId: string): Promise<string | undefined>;\n\n    /**\n     * Gets information about the source/type of a customization\n     * @param fragmentId The fragment ID\n     * @param customizationId The customization ID\n     * @returns Type of the customization source\n     */\n    getPromptFragmentCustomizationType(fragmentId: string, customizationId: string): Promise<string | undefined>;\n\n    /**\n     * Gets the fragment ID from a resource identifier\n     * @param resourceId Resource identifier (implementation specific)\n     * @returns Fragment ID or undefined if not found\n     */\n    getPromptFragmentIDFromResource(resourceId: unknown): string | undefined;\n\n    /**\n     * Gets all custom agent descriptions\n     * @returns Array of custom agent descriptions\n     */\n    getCustomAgents(): Promise<CustomAgentDescription[]>;\n\n    /**\n     * Gets the locations of custom agent configuration files\n     * @returns Array of URIs and existence status\n     */\n    getCustomAgentsLocations(): Promise<{ uri: URI, exists: boolean }[]>;\n\n    /**\n     * Opens an existing customAgents.yml file at the given URI, or creates a new one if it doesn't exist.\n     *\n     * @param uri The URI of the customAgents.yml file to open or create\n     */\n    openCustomAgentYaml(uri: URI): Promise<void>;\n}\n\n/**\n * Service for managing and resolving prompt fragments\n */\nexport const PromptService = Symbol('PromptService');\nexport interface PromptService {\n    /**\n     * Event fired when the prompts change\n     */\n    readonly onPromptsChange: Event<void>;\n\n    /**\n     * Event fired when the selected variant for a prompt variant set changes\n     */\n    readonly onSelectedVariantChange: Event<{ promptVariantSetId: string, variantId: string | undefined }>;\n\n    /**\n     * Gets the raw prompt fragment with comments\n     * @param fragmentId The prompt fragment ID\n     * @returns The raw prompt fragment or undefined if not found\n     */\n    getRawPromptFragment(fragmentId: string): PromptFragment | undefined;\n\n    /**\n     * Gets the raw prompt fragment without comments\n     * @param fragmentId The prompt fragment ID\n     * @returns The raw prompt fragment or undefined if not found\n     */\n    getPromptFragment(fragmentId: string): PromptFragment | undefined;\n\n    /**\n     * Gets the built-in raw prompt fragment (before any customizations)\n     * @param fragmentId The prompt fragment ID\n     * @returns The built-in fragment or undefined if not found\n     */\n    getBuiltInRawPrompt(fragmentId: string): PromptFragment | undefined;\n\n    /**\n     * Resolves a prompt fragment by replacing variables and function references\n     * @param fragmentId The prompt fragment ID\n     * @param args Optional object with values for variable replacement\n     * @param context Optional context for variable resolution\n     * @returns The resolved prompt fragment or undefined if not found\n     */\n    getResolvedPromptFragment(fragmentId: string, args?: { [key: string]: unknown }, context?: AIVariableContext): Promise<ResolvedPromptFragment | undefined>;\n\n    /**\n     * Resolves a prompt fragment by replacing variables but preserving function references\n     * @param fragmentId The prompt fragment ID\n     * @param args Optional object with values for variable replacement\n     * @param context Optional context for variable resolution\n     * @param resolveVariable Optional custom variable resolution function\n     * @returns The partially resolved prompt fragment or undefined if not found\n     */\n    getResolvedPromptFragmentWithoutFunctions(\n        fragmentId: string,\n        args?: { [key: string]: unknown },\n        context?: AIVariableContext,\n        resolveVariable?: (variable: AIVariableArg) => Promise<ResolvedAIVariable | undefined>\n    ): Promise<Omit<ResolvedPromptFragment, 'functionDescriptions'> | undefined>;\n\n    /**\n     * Adds a prompt fragment to the service\n     * @param promptFragment The fragment to store\n     * @param promptVariantSetId Optional ID of the prompt variant set this is a variant of\n     */\n    addBuiltInPromptFragment(promptFragment: BasePromptFragment, promptVariantSetId?: string, isDefault?: boolean): void;\n\n    /**\n     * Removes a prompt fragment from the service\n     * @param fragmentId The fragment ID to remove\n     */\n    removePromptFragment(fragmentId: string): void;\n\n    /**\n     * Gets all known prompts, including variants and customizations\n     * @returns Map of fragment IDs to arrays of fragments\n     */\n    getAllPromptFragments(): Map<string, PromptFragment[]>;\n\n    /**\n     * Gets all active prompts (highest priority version of each fragment)\n     * @returns Array of active prompt fragments\n     */\n    getActivePromptFragments(): PromptFragment[];\n\n    /**\n     * Returns all IDs of all prompt fragments of the given set\n     * @param promptVariantSetId The prompt variant set id\n     * @returns Array of variant IDs\n     */\n    getVariantIds(promptVariantSetId: string): string[];\n\n    /**\n     * Gets the explicitly selected variant ID for a prompt fragment from settings.\n     * This returns only the variant that was explicitly selected in settings, not the default.\n     * @param promptVariantSetId The prompt variant set id\n     * @returns The selected variant ID from settings, or undefined if none is selected\n     */\n    getSelectedVariantId(promptVariantSetId: string): string | undefined;\n\n    /**\n     * Gets the effective variant ID that is guaranteed to be valid if one exists.\n     * This checks if the selected variant ID is valid, and falls back to the default variant if it isn't.\n     * @param promptVariantSetId The prompt variant set id\n     * @returns A valid variant ID if one exists, or undefined if no valid variant can be found\n     */\n    getEffectiveVariantId(promptVariantSetId: string): string | undefined;\n\n    /**\n     * Gets the default variant ID of the given set\n     * @param promptVariantSetId The prompt variant set id\n     * @returns The default variant ID or undefined if no default is set\n     */\n    getDefaultVariantId(promptVariantSetId: string): string | undefined;\n\n    /**\n     * Updates the selected variant for a prompt variant set\n     * @param agentId The ID of the agent to update\n     * @param promptVariantSetId The prompt variant set ID\n     * @param newVariant The new variant ID to set as selected\n     */\n    updateSelectedVariantId(agentId: string, promptVariantSetId: string, newVariant: string): Promise<void>;\n\n    /**\n     * Gets all prompt variant sets and their variants\n     * @returns Map of prompt variant set IDs to arrays of variant IDs\n     */\n    getPromptVariantSets(): Map<string, string[]>;\n\n    /**\n     * The following methods delegate to the PromptFragmentCustomizationService\n     */\n    createCustomization(fragmentId: string): Promise<void>;\n    createBuiltInCustomization(fragmentId: string): Promise<void>;\n    editBuiltInCustomization(fragmentId: string): Promise<void>;\n    editCustomization(fragmentId: string, customizationId: string): Promise<void>;\n    removeCustomization(fragmentId: string, customizationId: string): Promise<void>;\n    resetAllToBuiltIn(): Promise<void>;\n    resetToBuiltIn(fragmentId: string): Promise<void>;\n    resetToCustomization(fragmentId: string, customizationId: string): Promise<void>;\n    getCustomizationDescription(fragmentId: string, customizationId: string): Promise<string | undefined>;\n    getCustomizationType(fragmentId: string, customizationId: string): Promise<string | undefined>;\n    getTemplateIDFromResource(resourceId: unknown): string | undefined;\n}\n\n@injectable()\nexport class PromptServiceImpl implements PromptService {\n    @inject(ILogger)\n    protected readonly logger: ILogger;\n\n    @inject(AISettingsService) @optional()\n    protected readonly settingsService: AISettingsService | undefined;\n\n    @inject(PromptFragmentCustomizationService) @optional()\n    protected readonly customizationService: PromptFragmentCustomizationService | undefined;\n\n    // Map to store selected variant for each prompt variant set (key: promptVariantSetId, value: variantId)\n    protected _selectedVariantsMap = new Map<string, string>();\n\n    @inject(AIVariableService) @optional()\n    protected readonly variableService: AIVariableService | undefined;\n\n    @inject(ToolInvocationRegistry) @optional()\n    protected readonly toolInvocationRegistry: ToolInvocationRegistry | undefined;\n\n    // Collection of built-in prompt fragments\n    protected _builtInFragments: BasePromptFragment[] = [];\n\n    // Map to store prompt variants sets (key: promptVariantSetId, value: array of variantIds)\n    protected _promptVariantSetsMap = new Map<string, string[]>();\n\n    // Map to store default variant for each prompt variant set (key: promptVariantSetId, value: variantId)\n    protected _defaultVariantsMap = new Map<string, string>();\n\n    // Event emitter for prompt changes\n    protected _onPromptsChangeEmitter = new Emitter<void>();\n    readonly onPromptsChange = this._onPromptsChangeEmitter.event;\n\n    // Event emitter for selected variant changes\n    protected _onSelectedVariantChangeEmitter = new Emitter<{ promptVariantSetId: string, variantId: string | undefined }>();\n    readonly onSelectedVariantChange = this._onSelectedVariantChangeEmitter.event;\n\n    protected promptChangeDebounceTimer?: NodeJS.Timeout;\n\n    protected toDispose = new DisposableCollection();\n\n    protected fireOnPromptsChangeDebounced(): void {\n        if (this.promptChangeDebounceTimer) {\n            clearTimeout(this.promptChangeDebounceTimer);\n        }\n        this.promptChangeDebounceTimer = setTimeout(() => {\n            this._onPromptsChangeEmitter.fire();\n        }, 300);\n    }\n\n    @postConstruct()\n    protected init(): void {\n        if (this.customizationService) {\n            this.toDispose.pushAll([\n                this.customizationService.onDidChangePromptFragmentCustomization(() => {\n                    this.fireOnPromptsChangeDebounced();\n                }),\n                this.customizationService.onDidChangeCustomAgents(() => {\n                    this.fireOnPromptsChangeDebounced();\n                })\n            ]);\n        }\n        if (this.settingsService) {\n            this.recalculateSelectedVariantsMap();\n            this.toDispose.push(\n                this.settingsService!.onDidChange(async () => {\n                    await this.recalculateSelectedVariantsMap();\n                })\n            );\n        }\n    }\n\n    /**\n     * Recalculates the selected variants map for all variant sets and fires the onSelectedVariantChangeEmitter\n     * if the selectedVariants field has changed.\n     */\n    protected async recalculateSelectedVariantsMap(): Promise<void> {\n        if (!this.settingsService) {\n            return;\n        }\n        const agentSettingsMap = await this.settingsService.getSettings();\n        const newSelectedVariants = new Map<string, string>();\n        for (const agentSettings of Object.values(agentSettingsMap)) {\n            if (agentSettings.selectedVariants) {\n                for (const [variantSetId, variantId] of Object.entries(agentSettings.selectedVariants)) {\n                    if (!newSelectedVariants.has(variantSetId)) {\n                        newSelectedVariants.set(variantSetId, variantId);\n                    }\n                }\n            }\n        }\n        // Compare with the old map and fire events for changes and removed variant sets\n        for (const [variantSetId, newVariantId] of newSelectedVariants.entries()) {\n            const oldVariantId = this._selectedVariantsMap.get(variantSetId);\n            if (oldVariantId !== newVariantId) {\n                this._onSelectedVariantChangeEmitter.fire({ promptVariantSetId: variantSetId, variantId: newVariantId });\n            }\n        }\n        for (const oldVariantSetId of this._selectedVariantsMap.keys()) {\n            if (!newSelectedVariants.has(oldVariantSetId)) {\n                this._onSelectedVariantChangeEmitter.fire({ promptVariantSetId: oldVariantSetId, variantId: undefined });\n            }\n        }\n        this._selectedVariantsMap = newSelectedVariants;\n        // Also fire a full prompts change, because other fields (like effectiveVariantId) might have changed\n        this.fireOnPromptsChangeDebounced();\n    }\n\n    // ===== Fragment Retrieval Methods =====\n\n    /**\n     * Finds a built-in fragment by its ID\n     * @param fragmentId The ID of the fragment to find\n     * @returns The built-in fragment or undefined if not found\n     */\n    protected findBuiltInFragmentById(fragmentId: string): BasePromptFragment | undefined {\n        return this._builtInFragments.find(fragment => fragment.id === fragmentId);\n    }\n\n    getRawPromptFragment(fragmentId: string): PromptFragment | undefined {\n        if (this.customizationService?.isPromptFragmentCustomized(fragmentId)) {\n            const customizedFragment = this.customizationService.getActivePromptFragmentCustomization(fragmentId);\n            if (customizedFragment !== undefined) {\n                return customizedFragment;\n            }\n        }\n        return this.getBuiltInRawPrompt(fragmentId);\n    }\n\n    getBuiltInRawPrompt(fragmentId: string): PromptFragment | undefined {\n        return this.findBuiltInFragmentById(fragmentId);\n    }\n\n    getPromptFragment(fragmentId: string): PromptFragment | undefined {\n        const rawFragment = this.getRawPromptFragment(fragmentId);\n        if (!rawFragment) {\n            return undefined;\n        }\n        return {\n            ...rawFragment,\n            template: this.stripComments(rawFragment.template)\n        };\n    }\n\n    /**\n     * Strips comments from a template string\n     * @param templateText The template text to process\n     * @returns Template text with comments removed\n     */\n    protected stripComments(templateText: string): string {\n        const commentRegex = /^\\s*{{!--[\\s\\S]*?--}}\\s*\\n?/;\n        return commentRegex.test(templateText) ? templateText.replace(commentRegex, '').trimStart() : templateText;\n    }\n\n    getSelectedVariantId(variantSetId: string): string | undefined {\n        return this._selectedVariantsMap.get(variantSetId);\n    }\n\n    getEffectiveVariantId(variantSetId: string): string | undefined {\n        const selectedVariantId = this.getSelectedVariantId(variantSetId);\n\n        // Check if the selected variant actually exists\n        if (selectedVariantId) {\n            const variantIds = this.getVariantIds(variantSetId);\n            if (!variantIds.includes(selectedVariantId)) {\n                this.logger.warn(`Selected variant '${selectedVariantId}' for prompt set '${variantSetId}' does not exist. Falling back to default variant.`);\n            } else {\n                return selectedVariantId;\n            }\n        }\n\n        // Fall back to default variant\n        const defaultVariantId = this.getDefaultVariantId(variantSetId);\n        if (defaultVariantId) {\n            const variantIds = this.getVariantIds(variantSetId);\n            if (!variantIds.includes(defaultVariantId)) {\n                this.logger.error(`Default variant '${defaultVariantId}' for prompt set '${variantSetId}' does not exist.`);\n                return undefined;\n            }\n            return defaultVariantId;\n        }\n\n        // No valid selected or default variant\n        if (this.getVariantIds(variantSetId).length > 0) {\n            this.logger.error(`No valid selected or default variant found for prompt set '${variantSetId}'.`);\n        }\n        return undefined;\n    }\n\n    protected resolvePotentialSystemPrompt(promptFragmentId: string): PromptFragment | undefined {\n        if (this._promptVariantSetsMap.has(promptFragmentId)) {\n            // This is a systemPrompt find the effective variant\n            const effectiveVariantId = this.getEffectiveVariantId(promptFragmentId);\n            if (effectiveVariantId === undefined) {\n                return undefined;\n            }\n            return this.getPromptFragment(effectiveVariantId);\n        }\n        return this.getPromptFragment(promptFragmentId);\n    }\n\n    // ===== Fragment Resolution Methods =====\n\n    async getResolvedPromptFragment(systemOrFragmentId: string, args?: { [key: string]: unknown }, context?: AIVariableContext): Promise<ResolvedPromptFragment | undefined> {\n        const promptFragment = this.resolvePotentialSystemPrompt(systemOrFragmentId);\n        if (promptFragment === undefined) {\n            return undefined;\n        }\n\n        // First resolve variables and arguments\n        let resolvedTemplate = promptFragment.template;\n        const variableAndArgResolutions = await this.resolveVariablesAndArgs(promptFragment.template, args, context);\n        variableAndArgResolutions.replacements.forEach(replacement =>\n            resolvedTemplate = resolvedTemplate.replace(replacement.placeholder, replacement.value));\n\n        // Then resolve function references with already resolved variables and arguments\n        // This allows to resolve function references contained in resolved variables (e.g. prompt fragments)\n        const functionMatches = matchFunctionsRegEx(resolvedTemplate);\n        const functionMap = new Map<string, ToolRequest>();\n        const functionReplacements = functionMatches.map(match => {\n            const completeText = match[0];\n            const functionId = match[1];\n            const toolRequest = this.toolInvocationRegistry?.getFunction(functionId);\n            if (toolRequest) {\n                functionMap.set(toolRequest.id, toolRequest);\n            }\n            return {\n                placeholder: completeText,\n                value: toolRequest ? toolRequestToPromptText(toolRequest) : completeText\n            };\n        });\n        functionReplacements.forEach(replacement =>\n            resolvedTemplate = resolvedTemplate.replace(replacement.placeholder, replacement.value));\n\n        return {\n            id: systemOrFragmentId,\n            text: resolvedTemplate,\n            functionDescriptions: functionMap.size > 0 ? functionMap : undefined,\n            variables: variableAndArgResolutions.resolvedVariables\n        };\n    }\n\n    async getResolvedPromptFragmentWithoutFunctions(\n        systemOrFragmentId: string,\n        args?: { [key: string]: unknown },\n        context?: AIVariableContext,\n        resolveVariable?: (variable: AIVariableArg) => Promise<ResolvedAIVariable | undefined>\n    ): Promise<Omit<ResolvedPromptFragment, 'functionDescriptions'> | undefined> {\n        const promptFragment = this.resolvePotentialSystemPrompt(systemOrFragmentId);\n        if (promptFragment === undefined) {\n            return undefined;\n        }\n\n        const resolutions = await this.resolveVariablesAndArgs(promptFragment.template, args, context, resolveVariable);\n        let resolvedTemplate = promptFragment.template;\n        resolutions.replacements.forEach(replacement =>\n            resolvedTemplate = resolvedTemplate.replace(replacement.placeholder, replacement.value));\n\n        return {\n            id: systemOrFragmentId,\n            text: resolvedTemplate,\n            variables: resolutions.resolvedVariables\n        };\n    }\n\n    /**\n     * Calculates all variable and argument replacements for an unresolved template.\n     *\n     * @param templateText the unresolved template text\n     * @param args the object with placeholders, mapping the placeholder key to the value\n     * @param context the {@link AIVariableContext} to use during variable resolution\n     * @param resolveVariable the variable resolving method. Fall back to using the {@link AIVariableService} if not given.\n     * @returns Object containing replacements and resolved variables\n     */\n    protected async resolveVariablesAndArgs(\n        templateText: string,\n        args?: { [key: string]: unknown },\n        context?: AIVariableContext,\n        resolveVariable?: (variable: AIVariableArg) => Promise<ResolvedAIVariable | undefined>\n    ): Promise<{\n        replacements: { placeholder: string; value: string }[],\n        resolvedVariables: ResolvedAIVariable[]\n    }> {\n        const variableMatches = matchVariablesRegEx(templateText);\n        const variableCache = createAIResolveVariableCache();\n        const replacementsList: { placeholder: string; value: string }[] = [];\n        const resolvedVariablesSet: Set<ResolvedAIVariable> = new Set();\n\n        for (const match of variableMatches) {\n            const placeholderText = match[0];\n            const variableAndArg = match[1];\n            let variableName = variableAndArg;\n            let argument: string | undefined;\n\n            const parts = variableAndArg.split(':', 2);\n            if (parts.length > 1) {\n                variableName = parts[0];\n                argument = parts[1];\n            }\n\n            let replacementValue: string;\n            if (args && args[variableAndArg] !== undefined) {\n                replacementValue = String(args[variableAndArg]);\n            } else {\n                const variableToResolve = { variable: variableName, arg: argument };\n                const resolvedVariable = resolveVariable\n                    ? await resolveVariable(variableToResolve)\n                    : await this.variableService?.resolveVariable(variableToResolve, context ?? {}, variableCache);\n\n                // Track resolved variable and its dependencies in all resolved variables\n                if (resolvedVariable) {\n                    resolvedVariablesSet.add(resolvedVariable);\n                    resolvedVariable.allResolvedDependencies?.forEach(v => resolvedVariablesSet.add(v));\n                }\n                replacementValue = String(resolvedVariable?.value ?? placeholderText);\n            }\n            replacementsList.push({ placeholder: placeholderText, value: replacementValue });\n        }\n\n        return {\n            replacements: replacementsList,\n            resolvedVariables: Array.from(resolvedVariablesSet)\n        };\n    }\n\n    // ===== Fragment Collection Management Methods =====\n\n    getAllPromptFragments(): Map<string, PromptFragment[]> {\n        const fragmentsMap = new Map<string, PromptFragment[]>();\n\n        if (this.customizationService) {\n            const customizationIds = this.customizationService.getCustomizedPromptFragmentIds();\n            customizationIds.forEach(fragmentId => {\n                const customizations = this.customizationService!.getAllCustomizations(fragmentId);\n                if (customizations.length > 0) {\n                    fragmentsMap.set(fragmentId, customizations);\n                }\n            });\n        }\n\n        // Add all built-in fragments\n        for (const fragment of this._builtInFragments) {\n            if (fragmentsMap.has(fragment.id)) {\n                fragmentsMap.get(fragment.id)!.push(fragment);\n            } else {\n                fragmentsMap.set(fragment.id, [fragment]);\n            }\n        }\n\n        return fragmentsMap;\n    }\n\n    getActivePromptFragments(): PromptFragment[] {\n        const activeFragments: PromptFragment[] = [...this._builtInFragments];\n\n        if (this.customizationService) {\n            // Fetch all customized fragment IDs once\n            const customizedIds = this.customizationService.getCustomizedPromptFragmentIds();\n\n            // For each customized ID, get the active customization\n            for (const fragmentId of customizedIds) {\n                const customFragment = this.customizationService?.getActivePromptFragmentCustomization(fragmentId);\n                if (customFragment) {\n                    // Find and replace existing entry with the same ID instead of just adding\n                    const existingIndex = activeFragments.findIndex(fragment => fragment.id === fragmentId);\n                    if (existingIndex !== -1) {\n                        // Replace existing fragment\n                        activeFragments[existingIndex] = customFragment;\n                    } else {\n                        // Add new fragment if no existing one found\n                        activeFragments.push(customFragment);\n                    }\n                }\n            }\n        }\n        return activeFragments;\n    }\n\n    removePromptFragment(fragmentId: string): void {\n        const index = this._builtInFragments.findIndex(fragment => fragment.id === fragmentId);\n        if (index !== -1) {\n            this._builtInFragments.splice(index, 1);\n        }\n\n        // Remove any variant references\n        for (const [promptVariantSetId, variants] of this._promptVariantSetsMap.entries()) {\n            if (variants.includes(fragmentId)) {\n                this.removeFragmentVariant(promptVariantSetId, fragmentId);\n            }\n        }\n\n        // Clean up default variants map if needed\n        if (this._defaultVariantsMap.has(fragmentId)) {\n            this._defaultVariantsMap.delete(fragmentId);\n        }\n\n        // Look for this fragmentId as a variant in default variants and remove if found\n        for (const [promptVariantSetId, defaultVariantId] of this._defaultVariantsMap.entries()) {\n            if (defaultVariantId === fragmentId) {\n                this._defaultVariantsMap.delete(promptVariantSetId);\n            }\n        }\n\n        this.fireOnPromptsChangeDebounced();\n    }\n\n    getVariantIds(variantSetId: string): string[] {\n        const builtInVariants = this._promptVariantSetsMap.get(variantSetId) || [];\n\n        // Check for custom variants from customization service\n        if (this.customizationService) {\n            const allCustomizedIds = this.customizationService.getCustomizedPromptFragmentIds();\n            // Find customizations that start with the variant set ID\n            // These are considered variants of this variant set\n            // Only include IDs that are not the variant set ID itself, start with the variant set ID,\n            // and are not customizations of existing variants in this set\n            const customVariants = allCustomizedIds.filter(id =>\n                id !== variantSetId &&\n                id.startsWith(variantSetId) &&\n                !builtInVariants.includes(id)\n            );\n\n            if (customVariants.length > 0) {\n                // Combine built-in variants with custom variants, without modifying the internal state\n                return [...builtInVariants, ...customVariants];\n            }\n        }\n\n        return builtInVariants;\n    }\n\n    getDefaultVariantId(promptVariantSetId: string): string | undefined {\n        return this._defaultVariantsMap.get(promptVariantSetId);\n    }\n\n    getPromptVariantSets(): Map<string, string[]> {\n        const result = new Map(this._promptVariantSetsMap);\n\n        // Check for custom variants from customization service\n        if (this.customizationService) {\n            const allCustomizedIds = this.customizationService.getCustomizedPromptFragmentIds();\n\n            // Add custom variants to existing variant sets\n            for (const [variantSetId, variants] of result.entries()) {\n                // Filter out customized fragments that are just customizations of existing variants\n                // so we don't treat them as separate variants themselves\n                // Only include IDs that are not the variant set ID itself, start with the variant set ID,\n                // and are not customizations of existing variants in this set\n                const customVariants = allCustomizedIds.filter(id =>\n                    id !== variantSetId &&\n                    id.startsWith(variantSetId) &&\n                    !variants.includes(id)\n                );\n\n                if (customVariants.length > 0) {\n                    // Create a new array without modifying the original\n                    result.set(variantSetId, [...variants, ...customVariants]);\n                }\n            }\n        }\n        return result;\n    }\n\n    addBuiltInPromptFragment(promptFragment: BasePromptFragment, promptVariantSetId?: string, isDefault: boolean = false): void {\n        const existingIndex = this._builtInFragments.findIndex(fragment => fragment.id === promptFragment.id);\n        if (existingIndex !== -1) {\n            // Replace existing fragment with the same ID\n            this._builtInFragments[existingIndex] = promptFragment;\n        } else {\n            // Add new fragment\n            this._builtInFragments.push(promptFragment);\n        }\n\n        // If this is a variant of a prompt variant set, record it in the variants map\n        if (promptVariantSetId) {\n            this.addFragmentVariant(promptVariantSetId, promptFragment.id, isDefault);\n        }\n\n        this.fireOnPromptsChangeDebounced();\n    }\n\n    // ===== Variant Management Methods =====\n\n    /**\n     * Adds a variant ID to the fragment variants map\n     * @param promptVariantSetId The prompt variant set id\n     * @param variantId The variant ID to add\n     * @param isDefault Whether this variant should be the default for the prompt variant set (defaults to false)\n     */\n    protected addFragmentVariant(promptVariantSetId: string, variantId: string, isDefault: boolean = false): void {\n        if (!this._promptVariantSetsMap.has(promptVariantSetId)) {\n            this._promptVariantSetsMap.set(promptVariantSetId, []);\n        }\n\n        const variants = this._promptVariantSetsMap.get(promptVariantSetId)!;\n        if (!variants.includes(variantId)) {\n            variants.push(variantId);\n        }\n\n        if (isDefault) {\n            this._defaultVariantsMap.set(promptVariantSetId, variantId);\n        }\n    }\n\n    /**\n     * Removes a variant ID from the fragment variants map\n     * @param promptVariantSetId The prompt variant set id\n     * @param variantId The variant ID to remove\n     */\n    protected removeFragmentVariant(promptVariantSetId: string, variantId: string): void {\n        if (!this._promptVariantSetsMap.has(promptVariantSetId)) {\n            return;\n        }\n\n        const variants = this._promptVariantSetsMap.get(promptVariantSetId)!;\n        const index = variants.indexOf(variantId);\n\n        if (index !== -1) {\n            variants.splice(index, 1);\n\n            // Remove the key if no variants left\n            if (variants.length === 0) {\n                this._promptVariantSetsMap.delete(promptVariantSetId);\n            }\n        }\n    }\n\n    async updateSelectedVariantId(agentId: string, promptVariantSetId: string, newVariant: string): Promise<void> {\n        if (!this.settingsService) {\n            return;\n        }\n\n        const defaultVariantId = this.getDefaultVariantId(promptVariantSetId);\n        const agentSettings = await this.settingsService.getAgentSettings(agentId);\n        const selectedVariants = agentSettings?.selectedVariants || {};\n\n        const updatedVariants = { ...selectedVariants };\n        if (newVariant === defaultVariantId) {\n            delete updatedVariants[promptVariantSetId];\n        } else {\n            updatedVariants[promptVariantSetId] = newVariant;\n        }\n\n        await this.settingsService.updateAgentSettings(agentId, {\n            selectedVariants: updatedVariants,\n        });\n\n        // Emit the selected variant change event\n        this._onSelectedVariantChangeEmitter.fire({ promptVariantSetId, variantId: newVariant });\n    }\n\n    // ===== Customization Service Delegation Methods =====\n\n    async createCustomization(fragmentId: string): Promise<void> {\n        if (this.customizationService) {\n            await this.customizationService.createPromptFragmentCustomization(fragmentId);\n        }\n    }\n\n    async createBuiltInCustomization(fragmentId: string): Promise<void> {\n        if (this.customizationService) {\n            const builtInTemplate = this.findBuiltInFragmentById(fragmentId);\n            await this.customizationService.createBuiltInPromptFragmentCustomization(fragmentId, builtInTemplate?.template);\n        }\n    }\n\n    async editCustomization(fragmentId: string, customizationId: string): Promise<void> {\n        if (this.customizationService) {\n            await this.customizationService.editPromptFragmentCustomization(fragmentId, customizationId);\n        }\n    }\n\n    async removeCustomization(fragmentId: string, customizationId: string): Promise<void> {\n        if (this.customizationService) {\n            await this.customizationService.removePromptFragmentCustomization(fragmentId, customizationId);\n        }\n    }\n\n    async resetAllToBuiltIn(): Promise<void> {\n        if (this.customizationService) {\n            for (const fragment of this._builtInFragments) {\n                await this.customizationService.removeAllPromptFragmentCustomizations(fragment.id);\n            }\n        }\n    }\n\n    async resetToBuiltIn(fragmentId: string): Promise<void> {\n        const builtIn = this._builtInFragments.find(b => b.id === fragmentId);\n        // Only reset this if it has a built-in, otherwise a delete would be the correct operation\n        if (this.customizationService && builtIn) {\n            await this.customizationService.removeAllPromptFragmentCustomizations(fragmentId);\n        }\n    }\n\n    async resetToCustomization(fragmentId: string, customizationId: string): Promise<void> {\n        if (this.customizationService) {\n            await this.customizationService.resetToCustomization(fragmentId, customizationId);\n        }\n    }\n\n    async getCustomizationDescription(fragmentId: string, customizationId: string): Promise<string | undefined> {\n        if (!this.customizationService) {\n            return undefined;\n        }\n        return await this.customizationService.getPromptFragmentCustomizationDescription(fragmentId, customizationId);\n    }\n\n    async getCustomizationType(fragmentId: string, customizationId: string): Promise<string | undefined> {\n        if (!this.customizationService) {\n            return undefined;\n        }\n        return await this.customizationService.getPromptFragmentCustomizationType(fragmentId, customizationId);\n    }\n\n    getTemplateIDFromResource(resourceId: unknown): string | undefined {\n        if (this.customizationService) {\n            return this.customizationService.getPromptFragmentIDFromResource(resourceId);\n        }\n        return undefined;\n    }\n\n    async editBuiltInCustomization(fragmentId: string): Promise<void> {\n        if (this.customizationService) {\n            const builtInTemplate = this.findBuiltInFragmentById(fragmentId);\n            await this.customizationService.editBuiltInPromptFragmentCustomization(fragmentId, builtInTemplate?.template);\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport namespace PromptText {\n    export const AGENT_CHAR = '@';\n    export const VARIABLE_CHAR = '#';\n    export const FUNCTION_CHAR = '~';\n    export const VARIABLE_SEPARATOR_CHAR = ':';\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Event } from '@theia/core';\nimport { LanguageModelMetaData } from './language-model';\nimport { TokenUsage } from './token-usage-service';\n\nexport const LanguageModelRegistryClient = Symbol('LanguageModelRegistryClient');\nexport interface LanguageModelRegistryClient {\n    languageModelAdded(metadata: LanguageModelMetaData): void;\n    languageModelRemoved(id: string): void;\n    /**\n     * Notify the client that a language model was updated.\n     */\n    onLanguageModelUpdated(id: string): void;\n}\n\nexport const TOKEN_USAGE_SERVICE_PATH = '/services/token-usage';\n\nexport const TokenUsageServiceClient = Symbol('TokenUsageServiceClient');\n\nexport interface TokenUsageServiceClient {\n    /**\n     * Notify the client about new token usage\n     */\n    notifyTokenUsage(usage: TokenUsage): void;\n\n    /**\n     * An event that is fired when token usage data is updated.\n     */\n    readonly onTokenUsageUpdated: Event<TokenUsage>;\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { Event } from '@theia/core';\nimport { LanguageModelRequirement } from './language-model';\nimport { NotificationType } from './notification-types';\n\nexport const AISettingsService = Symbol('AISettingsService');\n/**\n * Service to store and retrieve settings on a per-agent basis.\n */\nexport interface AISettingsService {\n    updateAgentSettings(agent: string, agentSettings: Partial<AgentSettings>): Promise<void>;\n    getAgentSettings(agent: string): Promise<AgentSettings | undefined>;\n    getSettings(): Promise<AISettings>;\n    onDidChange: Event<void>;\n}\nexport type AISettings = Record<string, AgentSettings>;\nexport interface AgentSettings {\n    languageModelRequirements?: LanguageModelRequirement[];\n    enable?: boolean;\n    /**\n     * A mapping of main template IDs to their selected variant IDs.\n     * If a main template is not present in this mapping, it means the main template is used.\n     */\n    selectedVariants?: Record<string, string>;\n    /**\n     * Configuration for completion notifications when the agent finishes a task.\n     * If undefined, defaults to 'off'.\n     */\n    completionNotification?: NotificationType;\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { MaybePromise, nls } from '@theia/core';\nimport { injectable } from '@theia/core/shared/inversify';\nimport { AIVariable, ResolvedAIVariable, AIVariableContribution, AIVariableResolver, AIVariableService, AIVariableResolutionRequest, AIVariableContext } from './variable-service';\n\nexport namespace TodayVariableArgs {\n    export const IN_UNIX_SECONDS = 'inUnixSeconds';\n    export const IN_ISO_8601 = 'inIso8601';\n}\n\nexport const TODAY_VARIABLE: AIVariable = {\n    id: 'today-provider',\n    description: nls.localize('theia/ai/core/todayVariable/description', 'Does something for today'),\n    name: 'today',\n    args: [\n        {\n            name: 'Format',\n            description: nls.localize('theia/ai/core/todayVariable/format/description', 'The format of the date'),\n            enum: [TodayVariableArgs.IN_ISO_8601, TodayVariableArgs.IN_UNIX_SECONDS],\n            isOptional: true\n        }\n    ]\n};\n\nexport interface ResolvedTodayVariable extends ResolvedAIVariable {\n    date: Date;\n}\n\n@injectable()\nexport class TodayVariableContribution implements AIVariableContribution, AIVariableResolver {\n    registerVariables(service: AIVariableService): void {\n        service.registerResolver(TODAY_VARIABLE, this);\n    }\n\n    canResolve(request: AIVariableResolutionRequest, context: AIVariableContext): MaybePromise<number> {\n        return 1;\n    }\n\n    async resolve(request: AIVariableResolutionRequest, context: AIVariableContext): Promise<ResolvedAIVariable | undefined> {\n        if (request.variable.name === TODAY_VARIABLE.name) {\n            return this.resolveTodayVariable(request);\n        }\n        return undefined;\n    }\n\n    private resolveTodayVariable(request: AIVariableResolutionRequest): ResolvedTodayVariable {\n        const date = new Date();\n        if (request.arg === TodayVariableArgs.IN_ISO_8601) {\n            return { variable: request.variable, value: date.toISOString(), date };\n        }\n        if (request.arg === TodayVariableArgs.IN_UNIX_SECONDS) {\n            return { variable: request.variable, value: Math.round(date.getTime() / 1000).toString(), date };\n        }\n        return { variable: request.variable, value: date.toDateString(), date };\n    }\n}\n\n","// *****************************************************************************\n// Copyright (C) 2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { TokenUsageServiceClient } from './protocol';\n\nexport const TokenUsageService = Symbol('TokenUsageService');\n\nexport interface TokenUsage {\n    /** The input token count */\n    inputTokens: number;\n    /** The output token count */\n    outputTokens: number;\n    /** Input tokens written to cache */\n    cachedInputTokens?: number;\n    /** Input tokens read from cache */\n    readCachedInputTokens?: number;\n    /** The model identifier */\n    model: string;\n    /** The timestamp of when the tokens were used */\n    timestamp: Date;\n    /** Request identifier */\n    requestId: string;\n}\n\nexport interface TokenUsageParams {\n    /** The input token count */\n    inputTokens: number;\n    /** The output token count */\n    outputTokens: number;\n    /** Input tokens placed in cache */\n    cachedInputTokens?: number;\n    /** Input tokens read from cache */\n    readCachedInputTokens?: number;\n    /** Request identifier */\n    requestId: string;\n}\n\nexport interface TokenUsageService {\n    /**\n     * Records token usage for a model interaction.\n     *\n     * @param model The identifier of the model that was used\n     * @param params Object containing token usage information\n     * @returns A promise that resolves when the token usage has been recorded\n     */\n    recordTokenUsage(model: string, params: TokenUsageParams): Promise<void>;\n\n    getTokenUsages(): Promise<TokenUsage[]>;\n\n    setClient(tokenUsageClient: TokenUsageServiceClient): void;\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, named, postConstruct, interfaces } from '@theia/core/shared/inversify';\nimport { ToolRequest } from './language-model';\nimport { ContributionProvider, Emitter, Event } from '@theia/core';\n\nexport const ToolInvocationRegistry = Symbol('ToolInvocationRegistry');\n\n/**\n * Registry for all the function calls available to Agents.\n */\nexport interface ToolInvocationRegistry {\n    /**\n     * Registers a tool into the registry.\n     *\n     * @param tool - The `ToolRequest` object representing the tool to be registered.\n     */\n    registerTool(tool: ToolRequest): void;\n\n    /**\n     * Retrieves a specific `ToolRequest` from the registry.\n     *\n     * @param toolId - The unique identifier of the tool to retrieve.\n     * @returns The `ToolRequest` object corresponding to the provided tool ID,\n     *          or `undefined` if the tool is not found in the registry.\n     */\n    getFunction(toolId: string): ToolRequest | undefined;\n\n    /**\n     * Retrieves multiple `ToolRequest`s from the registry.\n     *\n     * @param toolIds - A list of tool IDs to retrieve.\n     * @returns An array of `ToolRequest` objects for the specified tool IDs.\n     *          If a tool ID is not found, it is skipped in the returned array.\n     */\n    getFunctions(...toolIds: string[]): ToolRequest[];\n\n    /**\n     * Retrieves all `ToolRequest`s currently registered in the registry.\n     *\n     * @returns An array of all `ToolRequest` objects in the registry.\n     */\n    getAllFunctions(): ToolRequest[];\n\n    /**\n     * Unregisters all tools provided by a specific tool provider.\n     *\n     * @param providerName - The name of the tool provider whose tools should be removed (as specificed in the `ToolRequest`).\n     */\n    unregisterAllTools(providerName: string): void;\n\n    /**\n     * Event that is fired whenever the registry changes (tool registered or unregistered).\n     */\n    onDidChange: Event<void>;\n}\n\nexport const ToolProvider = Symbol('ToolProvider');\nexport interface ToolProvider {\n    getTool(): ToolRequest;\n}\n\n/** Binds the identifier to self in singleton scope and then binds `ToolProvider` to that service. */\nexport function bindToolProvider(identifier: interfaces.Newable<ToolProvider>, bind: interfaces.Bind): void {\n    bind(identifier).toSelf().inSingletonScope();\n    bind(ToolProvider).toService(identifier);\n}\n\n@injectable()\nexport class ToolInvocationRegistryImpl implements ToolInvocationRegistry {\n\n    private tools: Map<string, ToolRequest> = new Map<string, ToolRequest>();\n\n    private readonly onDidChangeEmitter = new Emitter<void>();\n    readonly onDidChange: Event<void> = this.onDidChangeEmitter.event;\n\n    @inject(ContributionProvider)\n    @named(ToolProvider)\n    private providers: ContributionProvider<ToolProvider>;\n\n    @postConstruct()\n    init(): void {\n        this.providers.getContributions().forEach(provider => {\n            this.registerTool(provider.getTool());\n        });\n    }\n\n    unregisterAllTools(providerName: string): void {\n        const toolsToRemove: string[] = [];\n        for (const [id, tool] of this.tools.entries()) {\n            if (tool.providerName === providerName) {\n                toolsToRemove.push(id);\n            }\n        }\n        let changed = false;\n        toolsToRemove.forEach(id => {\n            if (this.tools.delete(id)) {\n                changed = true;\n            }\n        });\n        if (changed) {\n            this.onDidChangeEmitter.fire();\n        }\n    }\n    getAllFunctions(): ToolRequest[] {\n        return Array.from(this.tools.values());\n    }\n\n    registerTool(tool: ToolRequest): void {\n        if (this.tools.has(tool.id)) {\n            console.warn(`Function with id ${tool.id} is already registered.`);\n        } else {\n            this.tools.set(tool.id, tool);\n            this.onDidChangeEmitter.fire();\n        }\n    }\n\n    getFunction(toolId: string): ToolRequest | undefined {\n        return this.tools.get(toolId);\n    }\n\n    getFunctions(...toolIds: string[]): ToolRequest[] {\n        const tools: ToolRequest[] = toolIds.map(toolId => {\n            const tool = this.tools.get(toolId);\n            if (tool) {\n                return tool;\n            } else {\n                throw new Error(`Function with id ${toolId} does not exist.`);\n            }\n        });\n        return tools;\n    }\n}\n\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// Partially copied from https://github.com/microsoft/vscode/blob/a2cab7255c0df424027be05d58e1b7b941f4ea60/src/vs/workbench/contrib/chat/common/chatVariables.ts\n\nimport { ContributionProvider, Disposable, Emitter, ILogger, MaybePromise, Prioritizeable, Event } from '@theia/core';\nimport { inject, injectable, named } from '@theia/core/shared/inversify';\nimport * as monaco from '@theia/monaco-editor-core';\nimport { PromptText } from './prompt-text';\n\n/**\n * A variable is a short string that is used to reference a value that is resolved and replaced in the user prompt at request-time.\n */\nexport interface AIVariable {\n    /** provider id */\n    id: string;\n    /** variable name, used for referencing variables in the chat */\n    name: string;\n    /** variable description */\n    description: string;\n    /** optional label, used for showing the variable in the UI. If not provided, the variable name is used */\n    label?: string;\n    /** optional icon classes, used for showing the variable in the UI. */\n    iconClasses?: string[];\n    /** specifies whether this variable contributes to the context -- @see ResolvedAIContextVariable */\n    isContextVariable?: boolean;\n    /** optional arguments for resolving the variable into a value */\n    args?: AIVariableDescription[];\n}\n\nexport namespace AIVariable {\n    export function is(arg: unknown): arg is AIVariable {\n        return !!arg && typeof arg === 'object' &&\n            'id' in arg &&\n            'name' in arg &&\n            'description' in arg;\n    }\n}\n\nexport interface AIContextVariable extends AIVariable {\n    label: string;\n    isContextVariable: true;\n}\n\nexport namespace AIContextVariable {\n    export function is(arg: unknown): arg is AIContextVariable {\n        return AIVariable.is(arg) && 'isContextVariable' in arg && arg.isContextVariable === true;\n    }\n}\n\nexport interface AIVariableDescription {\n    name: string;\n    description: string;\n    enum?: string[];\n    isOptional?: boolean;\n}\n\nexport interface ResolvedAIVariable {\n    variable: AIVariable;\n    arg?: string;\n    /** value that is inserted into the prompt at the position of the variable usage */\n    value: string;\n    /** Flat list of all variables that have been (recursively) resolved while resolving this variable. */\n    allResolvedDependencies?: ResolvedAIVariable[];\n}\n\nexport namespace ResolvedAIVariable {\n    export function is(arg: unknown): arg is ResolvedAIVariable {\n        return !!arg && typeof arg === 'object' &&\n            'variable' in arg &&\n            'value' in arg &&\n            typeof (arg as { variable: unknown }).variable === 'object' &&\n            typeof (arg as { value: unknown }).value === 'string';\n    }\n}\n\n/**\n * A context variable is a variable that also contributes to the context of a chat request.\n *\n * In contrast to a plain variable, it can also be attached to a request and is resolved into a context value.\n * The context value is put into the `ChatRequestModel.context`, available to the processing chat agent for further\n * processing by the chat agent, or invoked tool functions.\n */\nexport interface ResolvedAIContextVariable extends ResolvedAIVariable {\n    contextValue: string;\n}\n\nexport namespace ResolvedAIContextVariable {\n    export function is(arg: unknown): arg is ResolvedAIContextVariable {\n        return ResolvedAIVariable.is(arg) &&\n            'contextValue' in arg &&\n            typeof (arg as { contextValue: unknown }).contextValue === 'string';\n    }\n}\n\nexport interface AIVariableResolutionRequest {\n    variable: AIVariable;\n    arg?: string;\n}\n\nexport namespace AIVariableResolutionRequest {\n    export function is(arg: unknown): arg is AIVariableResolutionRequest {\n        return !!arg && typeof arg === 'object' &&\n            'variable' in arg &&\n            typeof (arg as { variable: { name: unknown } }).variable.name === 'string';\n    }\n\n    export function fromResolved(arg: ResolvedAIContextVariable): AIVariableResolutionRequest {\n        return {\n            variable: arg.variable,\n            arg: arg.arg\n        };\n    }\n}\n\nexport interface AIVariableContext {\n}\n\nexport type AIVariableArg = string | { variable: string, arg?: string } | AIVariableResolutionRequest;\n\nexport type AIVariableArgPicker = (context: AIVariableContext) => MaybePromise<string | undefined>;\nexport type AIVariableArgCompletionProvider =\n    (model: monaco.editor.ITextModel, position: monaco.Position, matchString?: string) => MaybePromise<monaco.languages.CompletionItem[] | undefined>;\n\nexport interface AIVariableResolver {\n    canResolve(request: AIVariableResolutionRequest, context: AIVariableContext): MaybePromise<number>,\n    resolve(request: AIVariableResolutionRequest, context: AIVariableContext): Promise<ResolvedAIVariable | undefined>;\n}\n\nexport interface AIVariableOpener {\n    canOpen(request: AIVariableResolutionRequest, context: AIVariableContext): MaybePromise<number>;\n    open(request: AIVariableResolutionRequest, context: AIVariableContext): Promise<void>;\n}\n\nexport interface AIVariableResolverWithVariableDependencies extends AIVariableResolver {\n    resolve(request: AIVariableResolutionRequest, context: AIVariableContext): Promise<ResolvedAIVariable | undefined>;\n    /**\n     * Resolve the given AI variable resolution request. When resolving dependencies with `resolveDependency`,\n     * add the resolved dependencies to the result's `allResolvedDependencies` list\n     * to enable consumers of the resolved variable to inspect dependencies.\n     */\n    resolve(\n        request: AIVariableResolutionRequest,\n        context: AIVariableContext,\n        resolveDependency: (variable: AIVariableArg) => Promise<ResolvedAIVariable | undefined>\n    ): Promise<ResolvedAIVariable | undefined>;\n}\n\nfunction isResolverWithDependencies(resolver: AIVariableResolver | undefined): resolver is AIVariableResolverWithVariableDependencies {\n    return resolver !== undefined && resolver.resolve.length >= 3;\n}\n\nexport const AIVariableService = Symbol('AIVariableService');\nexport interface AIVariableService {\n    hasVariable(name: string): boolean;\n    getVariable(name: string): Readonly<AIVariable> | undefined;\n    getVariables(): Readonly<AIVariable>[];\n    getContextVariables(): Readonly<AIContextVariable>[];\n    registerVariable(variable: AIVariable): Disposable;\n    unregisterVariable(name: string): void;\n    readonly onDidChangeVariables: Event<void>;\n\n    registerResolver(variable: AIVariable, resolver: AIVariableResolver): Disposable;\n    unregisterResolver(variable: AIVariable, resolver: AIVariableResolver): void;\n    getResolver(name: string, arg: string | undefined, context: AIVariableContext): Promise<AIVariableResolver | undefined>;\n    resolveVariable(variable: AIVariableArg, context: AIVariableContext, cache?: Map<string, ResolveAIVariableCacheEntry>): Promise<ResolvedAIVariable | undefined>;\n\n    registerArgumentPicker(variable: AIVariable, argPicker: AIVariableArgPicker): Disposable;\n    unregisterArgumentPicker(variable: AIVariable, argPicker: AIVariableArgPicker): void;\n    getArgumentPicker(name: string, context: AIVariableContext): Promise<AIVariableArgPicker | undefined>;\n\n    registerArgumentCompletionProvider(variable: AIVariable, argPicker: AIVariableArgCompletionProvider): Disposable;\n    unregisterArgumentCompletionProvider(variable: AIVariable, argPicker: AIVariableArgCompletionProvider): void;\n    getArgumentCompletionProvider(name: string): Promise<AIVariableArgCompletionProvider | undefined>;\n}\n\n/** Contributions on the frontend can optionally implement `FrontendVariableContribution`. */\nexport const AIVariableContribution = Symbol('AIVariableContribution');\nexport interface AIVariableContribution {\n    registerVariables(service: AIVariableService): void;\n}\n\nexport interface ResolveAIVariableCacheEntry {\n    promise: Promise<ResolvedAIVariable | undefined>;\n    inProgress: boolean;\n}\n\nexport type ResolveAIVariableCache = Map<string, ResolveAIVariableCacheEntry>;\n/**\n * Creates a new, empty cache for AI variable resolution to hand into `AIVariableService.resolveVariable`.\n */\nexport function createAIResolveVariableCache(): Map<string, ResolveAIVariableCacheEntry> {\n    return new Map();\n}\n\n/** Utility function to get all resolved AI variables from a {@link ResolveAIVariableCache}  */\nexport async function getAllResolvedAIVariables(cache: ResolveAIVariableCache): Promise<ResolvedAIVariable[]> {\n    const resolvedVariables: ResolvedAIVariable[] = [];\n    for (const cacheEntry of cache.values()) {\n        if (!cacheEntry.inProgress) {\n            const resolvedVariable = await cacheEntry.promise;\n            if (resolvedVariable) {\n                resolvedVariables.push(resolvedVariable);\n            }\n        }\n    }\n    return resolvedVariables;\n}\n\n@injectable()\nexport class DefaultAIVariableService implements AIVariableService {\n    protected variables = new Map<string, AIVariable>();\n    protected resolvers = new Map<string, AIVariableResolver[]>();\n    protected argPickers = new Map<string, AIVariableArgPicker>();\n    protected openers = new Map<string, AIVariableOpener[]>();\n    protected argCompletionProviders = new Map<string, AIVariableArgCompletionProvider>();\n\n    protected readonly onDidChangeVariablesEmitter = new Emitter<void>();\n    readonly onDidChangeVariables: Event<void> = this.onDidChangeVariablesEmitter.event;\n\n    constructor(\n        @inject(ContributionProvider) @named(AIVariableContribution)\n        protected readonly contributionProvider: ContributionProvider<AIVariableContribution>,\n        @inject(ILogger) protected readonly logger: ILogger\n    ) { }\n\n    protected initContributions(): void {\n        this.contributionProvider.getContributions().forEach(contribution => contribution.registerVariables(this));\n    }\n\n    protected getKey(name: string): string {\n        return `${name.toLowerCase()}`;\n    }\n\n    async getResolver(name: string, arg: string | undefined, context: AIVariableContext): Promise<AIVariableResolver | undefined> {\n        const resolvers = await this.prioritize(name, arg, context);\n        return resolvers[0];\n    }\n\n    protected getResolvers(name: string): AIVariableResolver[] {\n        return this.resolvers.get(this.getKey(name)) ?? [];\n    }\n\n    protected async prioritize(name: string, arg: string | undefined, context: AIVariableContext): Promise<AIVariableResolver[]> {\n        const variable = this.getVariable(name);\n        if (!variable) {\n            return [];\n        }\n        const prioritized = await Prioritizeable.prioritizeAll(this.getResolvers(name), async resolver => {\n            try {\n                return await resolver.canResolve({ variable, arg }, context);\n            } catch {\n                return 0;\n            }\n        });\n        return prioritized.map(p => p.value);\n    }\n\n    hasVariable(name: string): boolean {\n        return !!this.getVariable(name);\n    }\n\n    getVariable(name: string): Readonly<AIVariable> | undefined {\n        return this.variables.get(this.getKey(name));\n    }\n\n    getVariables(): Readonly<AIVariable>[] {\n        return [...this.variables.values()];\n    }\n\n    getContextVariables(): Readonly<AIContextVariable>[] {\n        return this.getVariables().filter(AIContextVariable.is);\n    }\n\n    registerVariable(variable: AIVariable): Disposable {\n        const key = this.getKey(variable.name);\n        if (!this.variables.get(key)) {\n            this.variables.set(key, variable);\n            this.onDidChangeVariablesEmitter.fire();\n            return Disposable.create(() => this.unregisterVariable(variable.name));\n        }\n        return Disposable.NULL;\n    }\n\n    registerResolver(variable: AIVariable, resolver: AIVariableResolver): Disposable {\n        this.registerVariable(variable);\n        const key = this.getKey(variable.name);\n        const resolvers = this.resolvers.get(key) ?? [];\n        resolvers.push(resolver);\n        this.resolvers.set(key, resolvers);\n        return Disposable.create(() => this.unregisterResolver(variable, resolver));\n    }\n\n    unregisterResolver(variable: AIVariable, resolver: AIVariableResolver): void {\n        const key = this.getKey(variable.name);\n        const registeredResolvers = this.resolvers.get(key);\n        registeredResolvers?.splice(registeredResolvers.indexOf(resolver), 1);\n        if (registeredResolvers?.length === 0) {\n            this.unregisterVariable(variable.name);\n        }\n    }\n\n    unregisterVariable(name: string): void {\n        this.variables.delete(this.getKey(name));\n        this.resolvers.delete(this.getKey(name));\n        this.onDidChangeVariablesEmitter.fire();\n    }\n\n    registerArgumentPicker(variable: AIVariable, argPicker: AIVariableArgPicker): Disposable {\n        this.registerVariable(variable);\n        const key = this.getKey(variable.name);\n        this.argPickers.set(key, argPicker);\n        return Disposable.create(() => this.unregisterArgumentPicker(variable, argPicker));\n    }\n\n    unregisterArgumentPicker(variable: AIVariable, argPicker: AIVariableArgPicker): void {\n        const key = this.getKey(variable.name);\n        const registeredArgPicker = this.argPickers.get(key);\n        if (registeredArgPicker === argPicker) {\n            this.argPickers.delete(key);\n        }\n    }\n\n    async getArgumentPicker(name: string): Promise<AIVariableArgPicker | undefined> {\n        return this.argPickers.get(this.getKey(name)) ?? undefined;\n    }\n\n    registerArgumentCompletionProvider(variable: AIVariable, completionProvider: AIVariableArgCompletionProvider): Disposable {\n        this.registerVariable(variable);\n        const key = this.getKey(variable.name);\n        this.argCompletionProviders.set(key, completionProvider);\n        return Disposable.create(() => this.unregisterArgumentCompletionProvider(variable, completionProvider));\n    }\n\n    unregisterArgumentCompletionProvider(variable: AIVariable, completionProvider: AIVariableArgCompletionProvider): void {\n        const key = this.getKey(variable.name);\n        const registeredCompletionProvider = this.argCompletionProviders.get(key);\n        if (registeredCompletionProvider === completionProvider) {\n            this.argCompletionProviders.delete(key);\n        }\n    }\n\n    async getArgumentCompletionProvider(name: string): Promise<AIVariableArgCompletionProvider | undefined> {\n        return this.argCompletionProviders.get(this.getKey(name)) ?? undefined;\n    }\n\n    protected parseRequest(request: AIVariableArg): { variableName: string, arg: string | undefined } {\n        const variableName = typeof request === 'string'\n            ? request\n            : typeof request.variable === 'string'\n                ? request.variable\n                : request.variable.name;\n        const arg = typeof request === 'string' ? undefined : request.arg;\n        return { variableName, arg };\n    }\n\n    async resolveVariable(\n        request: AIVariableArg,\n        context: AIVariableContext,\n        cache: ResolveAIVariableCache = createAIResolveVariableCache()\n    ): Promise<ResolvedAIVariable | undefined> {\n        // Calculate unique variable cache key from variable name and argument\n        const { variableName, arg } = this.parseRequest(request);\n        const cacheKey = `${variableName}${PromptText.VARIABLE_SEPARATOR_CHAR}${arg ?? ''}`;\n\n        // If the current cache key exists and is still in progress, we reached a cycle.\n        // If we reach it but it has been resolved, it was part of another resolution branch and we can simply return it.\n        if (cache.has(cacheKey)) {\n            const existingEntry = cache.get(cacheKey)!;\n            if (existingEntry.inProgress) {\n                this.logger.warn(`Cycle detected for variable: ${variableName} with arg: ${arg}. Skipping resolution.`);\n                return undefined;\n            }\n            return existingEntry.promise;\n        }\n\n        const entry: ResolveAIVariableCacheEntry = { promise: this.doResolve(variableName, arg, context, cache), inProgress: true };\n        entry.promise.finally(() => entry.inProgress = false);\n        cache.set(cacheKey, entry);\n\n        return entry.promise;\n    }\n\n    /**\n     * Asynchronously resolves a variable, handling its dependencies while preventing cyclical resolution.\n     * Selects the appropriate resolver and resolution strategy based on whether nested dependency resolution is supported.\n     */\n    protected async doResolve(variableName: string, arg: string | undefined, context: AIVariableContext, cache: ResolveAIVariableCache): Promise<ResolvedAIVariable | undefined> {\n        const variable = this.getVariable(variableName);\n        if (!variable) {\n            return undefined;\n        }\n        const resolver = await this.getResolver(variableName, arg, context);\n        let resolved: ResolvedAIVariable | undefined;\n        if (isResolverWithDependencies(resolver)) {\n            // Explicit cast needed because Typescript does not consider the method parameter length of the type guard at compile time\n            resolved = await (resolver as AIVariableResolverWithVariableDependencies).resolve(\n                { variable, arg },\n                context,\n                async (depRequest: AIVariableResolutionRequest) =>\n                    this.resolveVariable(depRequest, context, cache)\n            );\n        } else if (resolver) {\n            // Explicit cast needed because Typescript does not consider the method parameter length of the type guard at compile time\n            resolved = await (resolver as AIVariableResolver).resolve({ variable, arg }, context);\n        } else {\n            resolved = undefined;\n        }\n        return resolved ? { ...resolved, arg } : undefined;\n    }\n}\n"],"names":[],"sourceRoot":""}