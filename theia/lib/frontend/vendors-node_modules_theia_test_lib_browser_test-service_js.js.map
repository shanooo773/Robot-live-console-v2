{"version":3,"file":"vendors-node_modules_theia_test_lib_browser_test-service_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/test/src/browser/test-service.ts?","webpack:///./node_modules/@theia/test/src/common/collections.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CancellationToken, ContributionProvider, Disposable, Emitter, Event, QuickPickService, isObject, nls } from '@theia/core/lib/common';\nimport { CancellationTokenSource, Location, Range, Position, DocumentUri } from '@theia/core/shared/vscode-languageserver-protocol';\nimport { CollectionDelta, TreeDelta } from '../common/tree-delta';\nimport { MarkdownString } from '@theia/core/lib/common/markdown-rendering';\nimport URI from '@theia/core/lib/common/uri';\nimport { inject, injectable, named, postConstruct } from '@theia/core/shared/inversify';\nimport { groupBy } from '../common/collections';\nimport { codiconArray } from '@theia/core/lib/browser';\n\nexport enum TestRunProfileKind {\n    Run = 1,\n    Debug = 2,\n    Coverage = 3\n}\n\nexport interface TestRunProfile {\n    readonly kind: TestRunProfileKind;\n    readonly label: string,\n    isDefault: boolean;\n    readonly canConfigure: boolean;\n    readonly tag: string;\n    run(name: string, included: readonly TestItem[], excluded: readonly TestItem[], preserveFocus: boolean): void;\n    configure(): void;\n}\n\nexport interface TestOutputItem {\n    readonly output: string;\n    readonly location?: Location;\n}\n\nexport enum TestExecutionState {\n    Queued = 1,\n    Running = 2,\n    Passed = 3,\n    Failed = 4,\n    Skipped = 5,\n    Errored = 6\n}\n\nexport interface TestMessage {\n    readonly expected?: string;\n    readonly actual?: string;\n    readonly location?: Location;\n    readonly message: string | MarkdownString;\n    readonly contextValue?: string;\n    readonly stackTrace?: TestMessageStackFrame[];\n}\n\nexport interface TestMessageStackFrame {\n    readonly label: string,\n    readonly uri?: DocumentUri,\n    readonly position?: Position,\n}\n\nexport namespace TestMessage {\n    export function is(obj: unknown): obj is TestMessage {\n        return isObject<TestMessage>(obj) && (MarkdownString.is(obj.message) || typeof obj.message === 'string');\n    }\n}\n\nexport interface TestState {\n    readonly state: TestExecutionState;\n}\n\nexport interface TestFailure extends TestState {\n    readonly state: TestExecutionState.Failed | TestExecutionState.Errored;\n    readonly messages: TestMessage[];\n    readonly duration?: number;\n}\n\nexport namespace TestFailure {\n    export function is(obj: unknown): obj is TestFailure {\n        return isObject<TestFailure>(obj) && (obj.state === TestExecutionState.Failed || obj.state === TestExecutionState.Errored) && Array.isArray(obj.messages);\n    }\n}\n\nexport interface TestSuccess extends TestState {\n    readonly state: TestExecutionState.Passed;\n    readonly duration?: number;\n}\n\nexport interface TestStateChangedEvent {\n    test: TestItem;\n    oldState: TestState | undefined;\n    newState: TestState | undefined;\n}\n\nexport interface TestRun {\n    cancel(): void;\n    readonly id: string;\n    readonly name: string;\n    readonly isRunning: boolean;\n    readonly controller: TestController;\n\n    onDidChangeProperty: Event<{ name?: string, isRunning?: boolean }>;\n\n    getTestState(item: TestItem): TestState | undefined;\n    onDidChangeTestState: Event<TestStateChangedEvent[]>;\n\n    getOutput(item?: TestItem): readonly TestOutputItem[];\n    onDidChangeTestOutput: Event<[TestItem | undefined, TestOutputItem][]>;\n\n    readonly items: readonly TestItem[];\n}\n\nexport namespace TestRun {\n    export function is(obj: unknown): obj is TestRun {\n        return isObject<TestRun>(obj)\n            && typeof obj.cancel === 'function'\n            && typeof obj.name === 'string'\n            && typeof obj.isRunning === 'boolean'\n            && typeof obj.controller === 'object'\n            && typeof obj.onDidChangeProperty === 'function'\n            && typeof obj.getTestState === 'function'\n            && typeof obj.onDidChangeTestState === 'function'\n            && typeof obj.onDidChangeTestState === 'function'\n            && typeof obj.getOutput === 'function'\n            && typeof obj.onDidChangeTestOutput === 'function'\n            && Array.isArray(obj.items);\n    }\n}\n\nexport interface TestItem {\n    readonly id: string;\n    readonly label: string;\n    readonly range?: Range;\n    readonly sortKey?: string;\n    readonly tags: string[];\n    readonly uri?: URI;\n    readonly busy: boolean;\n    readonly tests: readonly TestItem[];\n    readonly description?: string;\n    readonly error?: string | MarkdownString;\n    readonly parent: TestItem | undefined;\n    readonly controller: TestController | undefined;\n    readonly canResolveChildren: boolean;\n    resolveChildren(): void;\n    readonly path: string[];\n}\n\nexport namespace TestItem {\n    export function is(obj: unknown): obj is TestItem {\n        return isObject<TestItem>(obj)\n            && obj.id !== undefined\n            && obj.label !== undefined\n            && Array.isArray(obj.tags)\n            && Array.isArray(obj.tests)\n            && obj.busy !== undefined\n            && obj.canResolveChildren !== undefined\n            && typeof obj.resolveChildren === 'function';\n    }\n}\n\nexport interface TestController {\n    readonly id: string;\n    readonly label: string;\n    readonly tests: readonly TestItem[];\n    readonly testRunProfiles: readonly TestRunProfile[];\n    readonly testRuns: readonly TestRun[];\n\n    readonly onItemsChanged: Event<TreeDelta<string, TestItem>[]>;\n    readonly onRunsChanged: Event<CollectionDelta<TestRun, TestRun>>;\n    readonly onProfilesChanged: Event<CollectionDelta<TestRunProfile, TestRunProfile>>;\n\n    refreshTests(token: CancellationToken): Promise<void>;\n    clearRuns(): void;\n}\n\nexport interface TestService {\n    clearResults(): void;\n    configureProfile(): void;\n    selectDefaultProfile(): void;\n    runTestsWithProfile(tests: TestItem[]): void;\n    runTests(profileKind: TestRunProfileKind, tests: TestItem[]): void;\n    runAllTests(profileKind: TestRunProfileKind): void;\n    getControllers(): TestController[];\n    registerTestController(controller: TestController): Disposable;\n    onControllersChanged: Event<CollectionDelta<string, TestController>>;\n\n    refresh(): void;\n    cancelRefresh(): void;\n    isRefreshing: boolean;\n    onDidChangeIsRefreshing: Event<void>;\n}\n\nexport namespace TestServices {\n    export function withTestRun(service: TestService, controllerId: string, runId: string): TestRun {\n        const controller = service.getControllers().find(c => c.id === controllerId);\n        if (!controller) {\n            throw new Error(`No test controller with id '${controllerId}' found`);\n        }\n        const run = controller.testRuns.find(r => r.id === runId);\n        if (!run) {\n            throw new Error(`No test run with id '${runId}' found`);\n        }\n        return run;\n    }\n}\n\nexport const TestContribution = Symbol('TestContribution');\n\nexport interface TestContribution {\n    registerTestControllers(service: TestService): void;\n}\n\nexport const TestService = Symbol('TestService');\n\n@injectable()\nexport class DefaultTestService implements TestService {\n    @inject(QuickPickService) quickpickService: QuickPickService;\n\n    private testRunCounter = 0;\n\n    private onDidChangeIsRefreshingEmitter = new Emitter<void>();\n    onDidChangeIsRefreshing: Event<void> = this.onDidChangeIsRefreshingEmitter.event;\n\n    private controllers: Map<string, TestController> = new Map();\n    private refreshing: Set<CancellationTokenSource> = new Set();\n    private onControllersChangedEmitter = new Emitter<CollectionDelta<string, TestController>>();\n\n    @inject(ContributionProvider) @named(TestContribution)\n    protected readonly contributionProvider: ContributionProvider<TestContribution>;\n\n    @postConstruct()\n    protected registerContributions(): void {\n        this.contributionProvider.getContributions().forEach(contribution => contribution.registerTestControllers(this));\n    }\n\n    onControllersChanged: Event<CollectionDelta<string, TestController>> = this.onControllersChangedEmitter.event;\n\n    registerTestController(controller: TestController): Disposable {\n        if (this.controllers.has(controller.id)) {\n            throw new Error('TestController already registered: ' + controller.id);\n        }\n        this.controllers.set(controller.id, controller);\n        this.onControllersChangedEmitter.fire({ added: [controller] });\n        return Disposable.create(() => {\n            this.controllers.delete(controller.id);\n            this.onControllersChangedEmitter.fire({ removed: [controller.id] });\n        });\n    }\n\n    getControllers(): TestController[] {\n        return Array.from(this.controllers.values());\n    }\n\n    refresh(): void {\n        const cts = new CancellationTokenSource();\n        this.refreshing.add(cts);\n\n        Promise.all(this.getControllers().map(controller => controller.refreshTests(cts.token))).then(() => {\n            this.refreshing.delete(cts);\n            if (this.refreshing.size === 0) {\n                this.onDidChangeIsRefreshingEmitter.fire();\n            }\n        });\n\n        if (this.refreshing.size === 1) {\n            this.onDidChangeIsRefreshingEmitter.fire();\n        }\n    }\n\n    cancelRefresh(): void {\n        if (this.refreshing.size > 0) {\n            this.refreshing.forEach(cts => cts.cancel());\n            this.refreshing.clear();\n            this.onDidChangeIsRefreshingEmitter.fire();\n        }\n    }\n\n    get isRefreshing(): boolean {\n        return this.refreshing.size > 0;\n    }\n\n    runAllTests(profileKind: TestRunProfileKind): void {\n        this.getControllers().forEach(controller => {\n            this.runTestForController(controller, profileKind, controller.tests);\n        });\n    }\n\n    protected async runTestForController(controller: TestController, profileKind: TestRunProfileKind, items: readonly TestItem[]): Promise<void> {\n        const runProfiles = controller.testRunProfiles.filter(profile => profile.kind === profileKind);\n        let activeProfile;\n        if (runProfiles.length === 1) {\n            activeProfile = runProfiles[0];\n        } else if (runProfiles.length > 1) {\n            const defaultProfile = runProfiles.find(p => p.isDefault);\n            if (defaultProfile) {\n                activeProfile = defaultProfile;\n            } else {\n\n                activeProfile = await this.pickProfile(runProfiles, nls.localizeByDefault('Pick a test profile to use'));\n            }\n        }\n        if (activeProfile) {\n            activeProfile.run(`Test run #${this.testRunCounter++}`, items, [], true);\n        }\n    }\n\n    protected async pickProfile(runProfiles: readonly TestRunProfile[], title: string): Promise<TestRunProfile | undefined> {\n        if (runProfiles.length === 0) {\n            return undefined;\n        }\n        // eslint-disable-next-line arrow-body-style\n        const picks = runProfiles.map(profile => {\n            let iconClasses;\n            if (profile.kind === TestRunProfileKind.Run) {\n                iconClasses = codiconArray('run');\n            } else if (profile.kind === TestRunProfileKind.Debug) {\n                iconClasses = codiconArray('debug-alt');\n            }\n            return {\n                iconClasses,\n                label: `${profile.label}${profile.isDefault ? ' (default)' : ''}`,\n                profile: profile\n            };\n        });\n\n        return (await this.quickpickService.show(picks, { title: title }))?.profile;\n\n    }\n\n    protected async pickProfileKind(): Promise<TestRunProfileKind | undefined> {\n        // eslint-disable-next-line arrow-body-style\n        const picks = [{\n            iconClasses: codiconArray('run'),\n            label: 'Run',\n            kind: TestRunProfileKind.Run\n        }, {\n            iconClasses: codiconArray('debug-alt'),\n            label: 'Debug',\n            kind: TestRunProfileKind.Debug\n        }];\n\n        return (await this.quickpickService.show(picks, { title: 'Select the kind of profiles' }))?.kind;\n\n    }\n\n    runTests(profileKind: TestRunProfileKind, items: TestItem[]): void {\n        groupBy(items, item => item.controller).forEach((tests, controller) => {\n            if (controller) {\n                this.runTestForController(controller, profileKind, tests);\n            }\n        });\n    }\n\n    runTestsWithProfile(items: TestItem[]): void {\n        groupBy(items, item => item.controller).forEach((tests, controller) => {\n            if (controller) {\n                this.pickProfile(controller.testRunProfiles, nls.localizeByDefault('Pick a test profile to use')).then(activeProfile => {\n                    if (activeProfile) {\n                        activeProfile.run(`Test run #${this.testRunCounter++}`, items, [], true);\n                    }\n                });\n            }\n        });\n    }\n\n    selectDefaultProfile(): void {\n        this.pickProfileKind().then(kind => {\n            const profiles = this.getControllers().flatMap(c => c.testRunProfiles).filter(profile => profile.kind === kind);\n            this.pickProfile(profiles, nls.localizeByDefault('Pick a test profile to use')).then(activeProfile => {\n                if (activeProfile) {\n                    // only change the default for the controller containing selected profile for default and its profiles with same kind\n                    const controller = this.getControllers().find(c => c.testRunProfiles.includes(activeProfile));\n                    controller?.testRunProfiles.filter(profile => profile.kind === activeProfile.kind).forEach(profile => {\n                        profile.isDefault = profile === activeProfile;\n                    });\n                }\n            });\n        });\n    }\n\n    configureProfile(): void {\n        const profiles: TestRunProfile[] = [];\n\n        for (const controller of this.controllers.values()) {\n            profiles.push(...controller.testRunProfiles);\n        }\n        ;\n        this.pickProfile(profiles.filter(profile => profile.canConfigure), nls.localizeByDefault('Select a profile to update')).then(profile => {\n            if (profile) {\n                profile.configure();\n            }\n        });\n    }\n\n    clearResults(): void {\n        for (const controller of this.controllers.values()) {\n            controller.clearRuns();\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Event } from '@theia/core';\nimport { CollectionDelta, TreeDeltaBuilder } from './tree-delta';\nimport { Emitter } from '@theia/core/shared/vscode-languageserver-protocol';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function observableProperty(observationFunction: string): (target: any, property: string) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target: any, property: string): any => {\n        Reflect.defineProperty(target, property, {\n            // @ts-ignore\n            get(): unknown { return this['_' + property]; },\n            set(v: unknown): void {\n                // @ts-ignore\n                this[observationFunction](property, v);\n                // @ts-ignore\n                this['_' + property] = v;\n            }\n        });\n    };\n}\n\nexport class ChangeBatcher {\n    private handle: NodeJS.Timeout | undefined;\n    private startTime: number | undefined;\n    constructor(private emitBatch: () => void, readonly timeoutMs: number) {\n    }\n\n    changeOccurred(): void {\n        if (!this.startTime) {\n            this.startTime = Date.now();\n            this.handle = setTimeout(() => {\n                this.flush();\n            }, this.timeoutMs);\n        } else {\n            if (Date.now() - this.startTime > this.timeoutMs) {\n                this.flush();\n            }\n        }\n    }\n    flush(): void {\n        if (this.handle) {\n            clearTimeout(this.handle);\n            this.handle = undefined;\n        }\n        this.startTime = undefined;\n        this.emitBatch();\n    }\n}\n\nexport class SimpleObservableCollection<V> {\n    private _values: V[] = [];\n\n    constructor(private equals: (left: V, right: V) => boolean = (left, right) => left === right) {\n    }\n\n    add(value: V): boolean {\n        if (!this._values.find(v => this.equals(v, value))) {\n            this._values.push(value);\n            this.onChangeEmitter.fire({ added: [value] });\n            return true;\n        }\n        return false;\n    }\n\n    remove(value: V): boolean {\n        const index = this._values.findIndex(v => this.equals(v, value));\n        if (index >= 0) {\n            this._values.splice(index, 1);\n            this.onChangeEmitter.fire({ removed: [value] });\n            return true;\n        }\n        return false;\n    }\n\n    private onChangeEmitter = new Emitter<CollectionDelta<V, V>>();\n    onChanged: Event<CollectionDelta<V, V>> = this.onChangeEmitter.event;\n    get values(): readonly V[] {\n        return this._values;\n    }\n\n    clear(): void {\n        const copy = this._values;\n        this._values = [];\n        this.onChangeEmitter.fire({ removed: copy });\n    }\n}\n\nabstract class AbstractIndexedCollection<K, T> {\n    private keys: Map<K, T> = new Map();\n    private _values: T[] | undefined;\n\n    abstract add(item: T): T | undefined;\n\n    get values(): readonly T[] {\n        if (!this._values) {\n            this._values = [...this.keys.values()];\n        }\n        return this._values;\n    }\n\n    get size(): number {\n        return this.keys.size;\n    }\n\n    has(key: K): boolean {\n        return this.keys.has(key);\n    }\n\n    get(key: K): T | undefined {\n        return this.keys.get(key);\n    }\n\n    protected doAdd(key: K, value: T): T | undefined {\n        const previous = this.keys.get(key);\n        if (previous !== undefined) {\n            return previous;\n        } else {\n            this.keys.set(key, value);\n            this._values = undefined;\n            return undefined;\n        }\n    }\n\n    remove(key: K): T | undefined {\n        const previous = this.keys.get(key);\n        if (previous !== undefined) {\n            this.keys.delete(key);\n            this._values = undefined;\n            return previous;\n        }\n        return undefined;\n    }\n}\n\nexport class TreeCollection<K, T, P> extends AbstractIndexedCollection<K, T> implements Iterable<[K, T]> {\n\n    constructor(protected readonly owner: T | P,\n        protected readonly pathOf: (v: T) => K[],\n        protected readonly deltaBuilder: (v: T | undefined) => TreeDeltaBuilder<K, T> | undefined) {\n        super();\n    }\n\n    add(item: T): T | undefined {\n        const path = this.pathOf(item);\n        const previous = this.doAdd(path[path.length - 1], item);\n        const deltaBuilder = this.deltaBuilder(item);\n        if (deltaBuilder) {\n            if (previous) {\n                deltaBuilder.reportChanged(path, item);\n            } else {\n                deltaBuilder.reportAdded(path, item);\n            }\n        }\n        return previous;\n    }\n\n    override remove(key: K): T | undefined {\n        const toRemove = this.get(key);\n        if (toRemove) {\n            const deltaBuilder = this.deltaBuilder(toRemove);\n            const path = this.pathOf(toRemove);\n            super.remove(key);\n            if (deltaBuilder) {\n                deltaBuilder.reportRemoved(path);\n            }\n        }\n        return toRemove;\n    }\n\n    entries(): Iterator<[K, T], unknown, undefined> {\n        return this[Symbol.iterator]();\n    }\n\n    [Symbol.iterator](): Iterator<[K, T], unknown, undefined> {\n        const iter = this.values.entries();\n        const that = this;\n        return {\n            next(..._args): IteratorResult<[K, T]> {\n                const res = iter.next();\n                if (res.done) {\n                    return { done: true, value: res.value };\n                } else {\n                    const path = that.pathOf(res.value[1]);\n                    const result: [K, T] = [path[path.length - 1], res.value[1]];\n                    return {\n                        done: false,\n                        value: result\n                    };\n                }\n            }\n        };\n\n    }\n}\nexport function groupBy<K, T>(items: Iterable<T>, keyOf: (item: T) => K): Map<K, T[]> {\n    const result = new Map<K, T[]>();\n    for (const item of items) {\n        const key = keyOf(item);\n        let values = result.get(key);\n        if (!values) {\n            values = [];\n            result.set(key, values);\n        }\n        values.push(item);\n    }\n    return result;\n}\n"],"names":[],"sourceRoot":""}