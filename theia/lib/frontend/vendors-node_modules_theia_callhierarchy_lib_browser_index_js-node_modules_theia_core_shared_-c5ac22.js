(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_theia_callhierarchy_lib_browser_index_js-node_modules_theia_core_shared_-c5ac22"],{

/***/ "./node_modules/@theia/callhierarchy/lib/browser/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@theia/callhierarchy/lib/browser/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
tslib_1.__exportStar(__webpack_require__(/*! ./callhierarchy */ "./node_modules/@theia/callhierarchy/lib/browser/callhierarchy.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./callhierarchy-contribution */ "./node_modules/@theia/callhierarchy/lib/browser/callhierarchy-contribution.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./callhierarchy-frontend-module */ "./node_modules/@theia/callhierarchy/lib/browser/callhierarchy-frontend-module.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./callhierarchy-service */ "./node_modules/@theia/callhierarchy/lib/browser/callhierarchy-service.js"), exports);


/***/ }),

/***/ "./node_modules/@theia/core/shared/@lumino/coreutils/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@theia/core/shared/@lumino/coreutils/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @lumino/coreutils */ "./node_modules/@lumino/coreutils/dist/index.js");


/***/ }),

/***/ "./node_modules/@theia/output/lib/browser/output-commands.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@theia/output/lib/browser/output-commands.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OutputCommands = void 0;
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "./node_modules/@theia/core/lib/browser/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "./node_modules/@theia/core/lib/common/index.js");
var OutputCommands;
(function (OutputCommands) {
    const OUTPUT_CATEGORY = 'Output';
    const OUTPUT_CATEGORY_KEY = common_1.nls.getDefaultKey(OUTPUT_CATEGORY);
    /* #region VS Code `OutputChannel` API */
    // Based on: https://github.com/theia-ide/vscode/blob/standalone/0.19.x/src/vs/vscode.d.ts#L4692-L4745
    OutputCommands.APPEND = {
        id: 'output:append'
    };
    OutputCommands.APPEND_LINE = {
        id: 'output:appendLine'
    };
    OutputCommands.CLEAR = {
        id: 'output:clear'
    };
    OutputCommands.SHOW = {
        id: 'output:show'
    };
    OutputCommands.HIDE = {
        id: 'output:hide'
    };
    OutputCommands.DISPOSE = {
        id: 'output:dispose'
    };
    /* #endregion VS Code `OutputChannel` API */
    OutputCommands.CLEAR__WIDGET = common_1.Command.toLocalizedCommand({
        id: 'output:widget:clear',
        category: OUTPUT_CATEGORY,
        iconClass: (0, browser_1.codicon)('clear-all')
    }, '', OUTPUT_CATEGORY_KEY);
    OutputCommands.LOCK__WIDGET = common_1.Command.toLocalizedCommand({
        id: 'output:widget:lock',
        category: OUTPUT_CATEGORY,
        iconClass: (0, browser_1.codicon)('unlock')
    }, '', OUTPUT_CATEGORY_KEY);
    OutputCommands.UNLOCK__WIDGET = common_1.Command.toLocalizedCommand({
        id: 'output:widget:unlock',
        category: OUTPUT_CATEGORY,
        iconClass: (0, browser_1.codicon)('lock')
    }, '', OUTPUT_CATEGORY_KEY);
    OutputCommands.CLEAR__QUICK_PICK = common_1.Command.toLocalizedCommand({
        id: 'output:pick-clear',
        label: 'Clear Output Channel...',
        category: OUTPUT_CATEGORY
    }, 'theia/output/clearOutputChannel', OUTPUT_CATEGORY_KEY);
    OutputCommands.SHOW__QUICK_PICK = common_1.Command.toLocalizedCommand({
        id: 'output:pick-show',
        label: 'Show Output Channel...',
        category: OUTPUT_CATEGORY
    }, 'theia/output/showOutputChannel', OUTPUT_CATEGORY_KEY);
    OutputCommands.HIDE__QUICK_PICK = common_1.Command.toLocalizedCommand({
        id: 'output:pick-hide',
        label: 'Hide Output Channel...',
        category: OUTPUT_CATEGORY
    }, 'theia/output/hideOutputChannel', OUTPUT_CATEGORY_KEY);
    OutputCommands.DISPOSE__QUICK_PICK = common_1.Command.toLocalizedCommand({
        id: 'output:pick-dispose',
        label: 'Close Output Channel...',
        category: OUTPUT_CATEGORY
    }, 'theia/output/closeOutputChannel', OUTPUT_CATEGORY_KEY);
    OutputCommands.COPY_ALL = {
        id: 'output:copy-all',
    };
})(OutputCommands || (exports.OutputCommands = OutputCommands = {}));


/***/ }),

/***/ "./node_modules/@theia/plugin-ext/lib/main/browser/output-channel-registry-main.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-ext/lib/main/browser/output-channel-registry-main.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OutputChannelRegistryMainImpl = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const command_1 = __webpack_require__(/*! @theia/core/lib/common/command */ "./node_modules/@theia/core/lib/common/command.js");
const output_commands_1 = __webpack_require__(/*! @theia/output/lib/browser/output-commands */ "./node_modules/@theia/output/lib/browser/output-commands.js");
let OutputChannelRegistryMainImpl = class OutputChannelRegistryMainImpl {
    $append(name, text, pluginInfo) {
        this.commandService.executeCommand(output_commands_1.OutputCommands.APPEND.id, { name, text });
        return Promise.resolve();
    }
    $clear(name) {
        this.commandService.executeCommand(output_commands_1.OutputCommands.CLEAR.id, { name });
        return Promise.resolve();
    }
    $dispose(name) {
        this.commandService.executeCommand(output_commands_1.OutputCommands.DISPOSE.id, { name });
        return Promise.resolve();
    }
    async $reveal(name, preserveFocus) {
        const options = { preserveFocus };
        this.commandService.executeCommand(output_commands_1.OutputCommands.SHOW.id, { name, options });
    }
    $close(name) {
        this.commandService.executeCommand(output_commands_1.OutputCommands.HIDE.id, { name });
        return Promise.resolve();
    }
};
exports.OutputChannelRegistryMainImpl = OutputChannelRegistryMainImpl;
tslib_1.__decorate([
    (0, inversify_1.inject)(command_1.CommandService),
    tslib_1.__metadata("design:type", Object)
], OutputChannelRegistryMainImpl.prototype, "commandService", void 0);
exports.OutputChannelRegistryMainImpl = OutputChannelRegistryMainImpl = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], OutputChannelRegistryMainImpl);


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-creator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-creator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricsCreator = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const metrics_protocol_1 = __webpack_require__(/*! ../common/metrics-protocol */ "./node_modules/@theia/plugin-metrics/lib/common/metrics-protocol.js");
const plugin_metrics_types_1 = __webpack_require__(/*! ../common/plugin-metrics-types */ "./node_modules/@theia/plugin-metrics/lib/common/plugin-metrics-types.js");
let PluginMetricsCreator = class PluginMetricsCreator {
    constructor() {
        this.NODE_BASED_REGEX = /Request(.*?)failed/;
        this.setPluginMetrics();
        this._extensionIDAnalytics = {};
    }
    /**
     * Create an error metric for requestData.pluginID by attempting to extract the erroring
     * language server method from the requestData.errorContentsOrMethod. If it cannot extract the
     * error language server method from requestData.errorContentsOrMethod then it will not
     * create a metric.
     *
     * @param pluginID The id of the plugin
     * @param errorContents The contents that the language server error has produced
     */
    async createErrorMetric(requestData) {
        if (!requestData.pluginID) {
            return;
        }
        const method = this.extractMethodFromValue(requestData.errorContentsOrMethod);
        // only log the metric if we can find the method that it occurred in
        if (method) {
            const createdMetric = (0, plugin_metrics_types_1.createRequestData)(requestData.pluginID, method, requestData.timeTaken);
            this.createMetric(createdMetric, false);
            this.decreaseExtensionRequests(requestData.pluginID, method);
        }
    }
    /**
     * Decreases the total requests and the successful responses for pluginID with method by 1.
     *
     * This is needed because an error and a successful language server request aren't currently
     * associated together because of https://github.com/microsoft/vscode-languageserver-node/issues/517.
     * That means that every language server request that resolves counts as a successful language server request.
     * Therefore, we need to decrease the extension requests for pluginID when we know there is an error.
     * Otherwise, for every language server request that errors we would count it as both a success and a failure.
     *
     * @param pluginID The id of the plugin that should have the decreased requests
     */
    decreaseExtensionRequests(pluginID, method) {
        const thisExtension = this._extensionIDAnalytics[pluginID];
        if (thisExtension) {
            const currentAnalytics = thisExtension[method];
            if (currentAnalytics) {
                currentAnalytics.totalRequests -= 1;
                currentAnalytics.successfulResponses -= 1;
            }
        }
    }
    /**
     * Update the internal metrics structure for pluginID with method when a request is made
     *
     * @param requestData The data from the request that was made
     * @param isRequestSuccessful If the language server request was successful or not
     */
    async createMetric(requestData, isRequestSuccessful) {
        if (!requestData.pluginID) {
            return;
        }
        // When we are in this function we know its a method so we can make it clearer
        const method = requestData.errorContentsOrMethod;
        const defaultAnalytic = (0, plugin_metrics_types_1.createDefaultAnalytics)(requestData.timeTaken, isRequestSuccessful);
        this.createExtensionIDAnalyticIfNotFound(requestData, defaultAnalytic);
        this.createExtensionIDMethodIfNotFound(requestData, defaultAnalytic);
        const thisExtension = this._extensionIDAnalytics[requestData.pluginID];
        if (thisExtension) {
            const currentAnalytic = thisExtension[method];
            if (currentAnalytic) {
                currentAnalytic.totalRequests += 1;
                if (isRequestSuccessful) {
                    currentAnalytic.successfulResponses += 1;
                }
                if (isRequestSuccessful) {
                    currentAnalytic.sumOfTimeForSuccess = currentAnalytic.sumOfTimeForSuccess + requestData.timeTaken;
                }
                else {
                    currentAnalytic.sumOfTimeForFailure = currentAnalytic.sumOfTimeForFailure + requestData.timeTaken;
                }
            }
        }
    }
    /**
     * Create an entry in _extensionIDAnalytics with createdAnalytic if there does not exist one
     *
     * @param requestData data that we will turn into metrics
     * @param createdAnalytic the analytic being created
     */
    createExtensionIDAnalyticIfNotFound(requestData, createdAnalytic) {
        const method = requestData.errorContentsOrMethod; // We know its a metric if this is being called
        if (!this._extensionIDAnalytics[requestData.pluginID]) {
            this._extensionIDAnalytics[requestData.pluginID] = {
                [method]: createdAnalytic
            };
        }
    }
    /**
     * Create an entry in _extensionIDAnalytics for requestData.pluginID with requestData.errorContentsOrMethod as the method
     * if there does not exist one
     *
     * @param requestData data that we will turn into metrics
     * @param createdAnalytic the analytic being created
     */
    createExtensionIDMethodIfNotFound(requestData, createdAnalytic) {
        const method = requestData.errorContentsOrMethod; // We know its a metric if this is being called
        if (this._extensionIDAnalytics[requestData.pluginID]) {
            const methodToAnalyticMap = this._extensionIDAnalytics[requestData.pluginID];
            if (!methodToAnalyticMap[method]) {
                methodToAnalyticMap[method] = createdAnalytic;
            }
        }
    }
    /**
     * setPluginMetrics is a constant running function that sets
     * pluginMetrics every {$METRICS_TIMEOUT} seconds so that it doesn't
     * update /metrics on every request
     */
    setPluginMetrics() {
        const self = this;
        setInterval(() => {
            if (Object.keys(self._extensionIDAnalytics).length !== 0) {
                self.pluginMetrics.setMetrics(JSON.stringify(self._extensionIDAnalytics));
            }
        }, metrics_protocol_1.METRICS_TIMEOUT);
    }
    // Map of plugin extension id to method to analytic
    get extensionIDAnalytics() {
        return this._extensionIDAnalytics;
    }
    /**
     * Attempts to extract the method name from the current errorContents using the
     * vscode-languageclient matching regex.
     *
     * If it cannot find a match in the errorContents it returns undefined
     *
     * @param errorContents The contents of the current error or undefined
     */
    extractMethodFromValue(errorContents) {
        if (!errorContents) {
            return undefined;
        }
        const matches = errorContents.match(this.NODE_BASED_REGEX);
        if (matches) {
            return matches[1].trim();
        }
        return undefined;
    }
};
exports.PluginMetricsCreator = PluginMetricsCreator;
tslib_1.__decorate([
    (0, inversify_1.inject)(metrics_protocol_1.PluginMetrics),
    tslib_1.__metadata("design:type", Object)
], PluginMetricsCreator.prototype, "pluginMetrics", void 0);
exports.PluginMetricsCreator = PluginMetricsCreator = tslib_1.__decorate([
    (0, inversify_1.injectable)(),
    tslib_1.__metadata("design:paramtypes", [])
], PluginMetricsCreator);


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-frontend-module.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-frontend-module.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const plugin_metrics_languages_main_1 = __webpack_require__(/*! ./plugin-metrics-languages-main */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-languages-main.js");
const metrics_protocol_1 = __webpack_require__(/*! ../common/metrics-protocol */ "./node_modules/@theia/plugin-metrics/lib/common/metrics-protocol.js");
const ws_connection_provider_1 = __webpack_require__(/*! @theia/core/lib/browser/messaging/ws-connection-provider */ "./node_modules/@theia/core/lib/browser/messaging/ws-connection-provider.js");
const plugin_metrics_creator_1 = __webpack_require__(/*! ./plugin-metrics-creator */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-creator.js");
const plugin_metrics_resolver_1 = __webpack_require__(/*! ./plugin-metrics-resolver */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-resolver.js");
const plugin_metrics_output_registry_1 = __webpack_require__(/*! ./plugin-metrics-output-registry */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-output-registry.js");
const languages_main_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/browser/languages-main */ "./node_modules/@theia/plugin-ext/lib/main/browser/languages-main.js");
const output_channel_registry_main_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/browser/output-channel-registry-main */ "./node_modules/@theia/plugin-ext/lib/main/browser/output-channel-registry-main.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    bind(plugin_metrics_resolver_1.PluginMetricsResolver).toSelf().inSingletonScope();
    bind(plugin_metrics_creator_1.PluginMetricsCreator).toSelf().inSingletonScope();
    rebind(languages_main_1.LanguagesMainImpl).to(plugin_metrics_languages_main_1.LanguagesMainPluginMetrics).inTransientScope();
    rebind(output_channel_registry_main_1.OutputChannelRegistryMainImpl).to(plugin_metrics_output_registry_1.PluginMetricsOutputChannelRegistry).inTransientScope();
    bind(metrics_protocol_1.PluginMetrics).toDynamicValue(ctx => {
        const connection = ctx.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        return connection.createProxy(metrics_protocol_1.metricsJsonRpcPath);
    }).inSingletonScope();
});


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-languages-main.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-languages-main.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguagesMainPluginMetrics = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
const plugin_metrics_resolver_1 = __webpack_require__(/*! ./plugin-metrics-resolver */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-resolver.js");
const languages_main_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/browser/languages-main */ "./node_modules/@theia/plugin-ext/lib/main/browser/languages-main.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const vst = __webpack_require__(/*! @theia/core/shared/vscode-languageserver-protocol */ "./node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js");
let LanguagesMainPluginMetrics = class LanguagesMainPluginMetrics extends languages_main_1.LanguagesMainImpl {
    constructor() {
        super(...arguments);
        // Map of handle to extension id
        this.handleToExtensionID = new Map();
    }
    $unregister(handle) {
        this.handleToExtensionID.delete(handle);
        super.$unregister(handle);
    }
    provideCompletionItems(handle, model, position, context, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.CompletionRequest.type.method, super.provideCompletionItems(handle, model, position, context, token));
    }
    resolveCompletionItem(handle, item, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.CompletionRequest.type.method, super.resolveCompletionItem(handle, item, token));
    }
    provideReferences(handle, model, position, context, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.ReferencesRequest.type.method, super.provideReferences(handle, model, position, context, token));
    }
    provideImplementation(handle, model, position, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.ImplementationRequest.type.method, super.provideImplementation(handle, model, position, token));
    }
    provideTypeDefinition(handle, model, position, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.TypeDefinitionRequest.type.method, super.provideTypeDefinition(handle, model, position, token));
    }
    provideHover(handle, model, position, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.HoverRequest.type.method, super.provideHover(handle, model, position, token));
    }
    provideDocumentHighlights(handle, model, position, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentHighlightRequest.type.method, super.provideDocumentHighlights(handle, model, position, token));
    }
    provideWorkspaceSymbols(handle, params, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.WorkspaceSymbolRequest.type.method, super.provideWorkspaceSymbols(handle, params, token));
    }
    resolveWorkspaceSymbol(handle, symbol, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.WorkspaceSymbolRequest.type.method, super.resolveWorkspaceSymbol(handle, symbol, token));
    }
    async provideLinks(handle, model, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentLinkRequest.type.method, super.provideLinks(handle, model, token));
    }
    async resolveLink(handle, link, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentLinkRequest.type.method, super.resolveLink(handle, link, token));
    }
    async provideCodeLenses(handle, model, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.CodeLensRequest.type.method, super.provideCodeLenses(handle, model, token));
    }
    resolveCodeLens(handle, model, codeLens, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.CodeLensResolveRequest.type.method, super.resolveCodeLens(handle, model, codeLens, token));
    }
    provideDocumentSymbols(handle, model, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentSymbolRequest.type.method, super.provideDocumentSymbols(handle, model, token));
    }
    provideDefinition(handle, model, position, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DefinitionRequest.type.method, super.provideDefinition(handle, model, position, token));
    }
    async provideSignatureHelp(handle, model, position, token, context) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.SignatureHelpRequest.type.method, super.provideSignatureHelp(handle, model, position, token, context));
    }
    provideDocumentFormattingEdits(handle, model, options, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentFormattingRequest.type.method, super.provideDocumentFormattingEdits(handle, model, options, token));
    }
    provideDocumentRangeFormattingEdits(handle, model, range, options, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentRangeFormattingRequest.type.method, super.provideDocumentRangeFormattingEdits(handle, model, range, options, token));
    }
    provideOnTypeFormattingEdits(handle, model, position, ch, options, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentOnTypeFormattingRequest.type.method, super.provideOnTypeFormattingEdits(handle, model, position, ch, options, token));
    }
    provideFoldingRanges(handle, model, context, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.FoldingRangeRequest.type.method, super.provideFoldingRanges(handle, model, context, token));
    }
    provideDocumentColors(handle, model, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.DocumentColorRequest.type.method, super.provideDocumentColors(handle, model, token));
    }
    provideColorPresentations(handle, model, colorInfo, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.ColorPresentationRequest.type.method, super.provideColorPresentations(handle, model, colorInfo, token));
    }
    async provideCodeActions(handle, model, rangeOrSelection, context, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.CodeActionRequest.type.method, super.provideCodeActions(handle, model, rangeOrSelection, context, token));
    }
    provideRenameEdits(handle, model, position, newName, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.RenameRequest.type.method, super.provideRenameEdits(handle, model, position, newName, token));
    }
    resolveRenameLocation(handle, model, position, token) {
        return this.pluginMetricsResolver.resolveRequest(this.handleToExtensionName(handle), vst.RenameRequest.type.method, super.resolveRenameLocation(handle, model, position, token));
    }
    $registerCompletionSupport(handle, pluginInfo, selector, triggerCharacters, supportsResolveDetails) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerCompletionSupport(handle, pluginInfo, selector, triggerCharacters, supportsResolveDetails);
    }
    $registerDefinitionProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerDefinitionProvider(handle, pluginInfo, selector);
    }
    $registerDeclarationProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerDeclarationProvider(handle, pluginInfo, selector);
    }
    $registerReferenceProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerReferenceProvider(handle, pluginInfo, selector);
    }
    $registerSignatureHelpProvider(handle, pluginInfo, selector, metadata) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerSignatureHelpProvider(handle, pluginInfo, selector, metadata);
    }
    $registerImplementationProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerImplementationProvider(handle, pluginInfo, selector);
    }
    $registerTypeDefinitionProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerTypeDefinitionProvider(handle, pluginInfo, selector);
    }
    $registerHoverProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerHoverProvider(handle, pluginInfo, selector);
    }
    $registerDocumentHighlightProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerDocumentHighlightProvider(handle, pluginInfo, selector);
    }
    $registerWorkspaceSymbolProvider(handle, pluginInfo) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerWorkspaceSymbolProvider(handle, pluginInfo);
    }
    $registerDocumentLinkProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerDocumentLinkProvider(handle, pluginInfo, selector);
    }
    $registerCodeLensSupport(handle, pluginInfo, selector, eventHandle) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerCodeLensSupport(handle, pluginInfo, selector, eventHandle);
    }
    $registerOutlineSupport(handle, pluginInfo, selector, displayName) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerOutlineSupport(handle, pluginInfo, selector, displayName);
    }
    $registerDocumentFormattingSupport(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerDocumentFormattingSupport(handle, pluginInfo, selector);
    }
    $registerRangeFormattingSupport(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerRangeFormattingSupport(handle, pluginInfo, selector);
    }
    $registerOnTypeFormattingProvider(handle, pluginInfo, selector, autoFormatTriggerCharacters) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerOnTypeFormattingProvider(handle, pluginInfo, selector, autoFormatTriggerCharacters);
    }
    $registerFoldingRangeProvider(handle, pluginInfo, selector, eventHandle) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerFoldingRangeProvider(handle, pluginInfo, selector, eventHandle);
    }
    $registerDocumentColorProvider(handle, pluginInfo, selector) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerDocumentColorProvider(handle, pluginInfo, selector);
    }
    $registerQuickFixProvider(handle, pluginInfo, selector, codeActionKinds, documentation) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerQuickFixProvider(handle, pluginInfo, selector, codeActionKinds, documentation);
    }
    $registerRenameProvider(handle, pluginInfo, selector, supportsResolveLocation) {
        this.registerPluginWithFeatureHandle(handle, pluginInfo.id);
        super.$registerRenameProvider(handle, pluginInfo, selector, supportsResolveLocation);
    }
    registerPluginWithFeatureHandle(handle, pluginID) {
        this.handleToExtensionID.set(handle, pluginID);
    }
    handleToExtensionName(handle) {
        return this.handleToExtensionID.get(handle);
    }
};
exports.LanguagesMainPluginMetrics = LanguagesMainPluginMetrics;
tslib_1.__decorate([
    (0, inversify_1.inject)(plugin_metrics_resolver_1.PluginMetricsResolver),
    tslib_1.__metadata("design:type", plugin_metrics_resolver_1.PluginMetricsResolver)
], LanguagesMainPluginMetrics.prototype, "pluginMetricsResolver", void 0);
exports.LanguagesMainPluginMetrics = LanguagesMainPluginMetrics = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], LanguagesMainPluginMetrics);


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-output-registry.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-output-registry.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricsOutputChannelRegistry = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const output_channel_registry_main_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/browser/output-channel-registry-main */ "./node_modules/@theia/plugin-ext/lib/main/browser/output-channel-registry-main.js");
const plugin_metrics_creator_1 = __webpack_require__(/*! ./plugin-metrics-creator */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-creator.js");
const plugin_metrics_types_1 = __webpack_require__(/*! ../common/plugin-metrics-types */ "./node_modules/@theia/plugin-metrics/lib/common/plugin-metrics-types.js");
let PluginMetricsOutputChannelRegistry = class PluginMetricsOutputChannelRegistry extends output_channel_registry_main_1.OutputChannelRegistryMainImpl {
    $append(channelName, errorOrValue, pluginInfo) {
        if (errorOrValue.startsWith('[Error')) {
            const createdMetric = (0, plugin_metrics_types_1.createDefaultRequestData)(pluginInfo.id, errorOrValue);
            this.pluginMetricsCreator.createErrorMetric(createdMetric);
        }
        return super.$append(channelName, errorOrValue, pluginInfo);
    }
};
exports.PluginMetricsOutputChannelRegistry = PluginMetricsOutputChannelRegistry;
tslib_1.__decorate([
    (0, inversify_1.inject)(plugin_metrics_creator_1.PluginMetricsCreator),
    tslib_1.__metadata("design:type", plugin_metrics_creator_1.PluginMetricsCreator)
], PluginMetricsOutputChannelRegistry.prototype, "pluginMetricsCreator", void 0);
exports.PluginMetricsOutputChannelRegistry = PluginMetricsOutputChannelRegistry = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], PluginMetricsOutputChannelRegistry);


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-resolver.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-resolver.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricsResolver = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const plugin_metrics_creator_1 = __webpack_require__(/*! ./plugin-metrics-creator */ "./node_modules/@theia/plugin-metrics/lib/browser/plugin-metrics-creator.js");
const plugin_metrics_types_1 = __webpack_require__(/*! ../common/plugin-metrics-types */ "./node_modules/@theia/plugin-metrics/lib/common/plugin-metrics-types.js");
/**
 * This class helps resolve language server requests into successes or failures
 * and sends the data to the metricsExtractor
 */
let PluginMetricsResolver = class PluginMetricsResolver {
    /**
     * Resolve a request for pluginID and create a metric based on whether or not
     * the language server errored.
     *
     * @param pluginID the ID of the plugin that made the request
     * @param method  the method that was request
     * @param request the result of the language server request
     */
    async resolveRequest(pluginID, method, request) {
        const currentTime = performance.now();
        try {
            const value = await request;
            this.createAndSetMetric(pluginID, method, performance.now() - currentTime, true);
            return value;
        }
        catch (error) {
            this.createAndSetMetric(pluginID, method, performance.now() - currentTime, false);
            return Promise.reject(error);
        }
    }
    createAndSetMetric(pluginID, method, time, successful) {
        const createdSuccessMetric = (0, plugin_metrics_types_1.createRequestData)(pluginID, method, time);
        this.metricsCreator.createMetric(createdSuccessMetric, successful);
    }
};
exports.PluginMetricsResolver = PluginMetricsResolver;
tslib_1.__decorate([
    (0, inversify_1.inject)(plugin_metrics_creator_1.PluginMetricsCreator),
    tslib_1.__metadata("design:type", plugin_metrics_creator_1.PluginMetricsCreator)
], PluginMetricsResolver.prototype, "metricsCreator", void 0);
exports.PluginMetricsResolver = PluginMetricsResolver = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], PluginMetricsResolver);


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/common/metrics-protocol.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/common/metrics-protocol.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.METRICS_TIMEOUT = exports.PluginMetrics = exports.metricsJsonRpcPath = void 0;
/**
 * The JSON-RPC interface for plugin metrics
 */
exports.metricsJsonRpcPath = '/services/plugin-ext/metrics';
exports.PluginMetrics = Symbol('PluginMetrics');
exports.METRICS_TIMEOUT = 10000;


/***/ }),

/***/ "./node_modules/@theia/plugin-metrics/lib/common/plugin-metrics-types.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@theia/plugin-metrics/lib/common/plugin-metrics-types.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDefaultAnalytics = exports.createDefaultRequestData = exports.createRequestData = void 0;
/**
 * Helper functions for creating an object that corresponds to the DataFromRequest interface
 */
function createRequestData(pluginID, errorContentsOrMethod, timeTaken) {
    return {
        pluginID,
        errorContentsOrMethod,
        timeTaken
    };
}
exports.createRequestData = createRequestData;
function createDefaultRequestData(pluginID, errorContentsOrMethod) {
    return {
        pluginID,
        errorContentsOrMethod,
        timeTaken: 0
    };
}
exports.createDefaultRequestData = createDefaultRequestData;
function createDefaultAnalytics(timeTaken, isRequestSuccessful) {
    if (isRequestSuccessful) {
        return {
            sumOfTimeForSuccess: timeTaken,
            sumOfTimeForFailure: 0,
            successfulResponses: 0,
            totalRequests: 0
        };
    }
    else {
        return {
            sumOfTimeForSuccess: 0,
            sumOfTimeForFailure: timeTaken,
            successfulResponses: 0,
            totalRequests: 0
        };
    }
}
exports.createDefaultAnalytics = createDefaultAnalytics;


/***/ }),

/***/ "./node_modules/@theia/typehierarchy/lib/browser/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@theia/typehierarchy/lib/browser/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
tslib_1.__exportStar(__webpack_require__(/*! ./typehierarchy */ "./node_modules/@theia/typehierarchy/lib/browser/typehierarchy.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./typehierarchy-contribution */ "./node_modules/@theia/typehierarchy/lib/browser/typehierarchy-contribution.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./typehierarchy-frontend-module */ "./node_modules/@theia/typehierarchy/lib/browser/typehierarchy-frontend-module.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./typehierarchy-service */ "./node_modules/@theia/typehierarchy/lib/browser/typehierarchy-service.js"), exports);


/***/ }),

/***/ "./node_modules/@theia/typehierarchy/lib/browser/typehierarchy.js":
/*!************************************************************************!*\
  !*** ./node_modules/@theia/typehierarchy/lib/browser/typehierarchy.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_callhierarchy_lib_browser_index_js-node_modules_theia_core_shared_-c5ac22.js.map