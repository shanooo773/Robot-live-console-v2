{"version":3,"file":"vendors-node_modules_theia_ai-mcp_lib_browser_mcp-frontend-module_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/ai-mcp/src/browser/mcp-frontend-application-contribution.ts?","webpack:///./node_modules/@theia/ai-mcp/src/browser/mcp-frontend-module.ts?","webpack:///./node_modules/@theia/ai-mcp/src/browser/mcp-frontend-notification-service.ts?","webpack:///./node_modules/@theia/ai-mcp/src/browser/mcp-frontend-service.ts?","webpack:///./node_modules/@theia/ai-mcp/src/browser/mcp-preferences.ts?","webpack:///./node_modules/@theia/ai-mcp/src/common/index.ts?","webpack:///./node_modules/@theia/ai-mcp/src/common/mcp-server-manager.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { FrontendApplicationContribution, PreferenceProvider, PreferenceService } from '@theia/core/lib/browser';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { MCPServerDescription, MCPServerManager } from '../common';\nimport { MCP_SERVERS_PREF } from './mcp-preferences';\nimport { JSONObject } from '@theia/core/shared/@lumino/coreutils';\nimport { MCPFrontendService } from '../common/mcp-server-manager';\n\ninterface BaseMCPServerPreferenceValue {\n    autostart?: boolean;\n}\n\ninterface LocalMCPServerPreferenceValue extends BaseMCPServerPreferenceValue {\n    command: string;\n    args?: string[];\n    env?: { [key: string]: string };\n}\n\ninterface RemoteMCPServerPreferenceValue extends BaseMCPServerPreferenceValue {\n    serverUrl: string;\n    serverAuthToken?: string;\n    serverAuthTokenHeader?: string;\n    headers?: { [key: string]: string };\n}\n\ntype MCPServersPreferenceValue = LocalMCPServerPreferenceValue | RemoteMCPServerPreferenceValue;\n\ninterface MCPServersPreference {\n    [name: string]: MCPServersPreferenceValue\n};\n\nnamespace MCPServersPreference {\n    export function isValue(obj: unknown): obj is MCPServersPreferenceValue {\n        return !!obj && typeof obj === 'object' &&\n            ('command' in obj || 'serverUrl' in obj) &&\n            (!('command' in obj) || typeof obj.command === 'string') &&\n            (!('args' in obj) || Array.isArray(obj.args) && obj.args.every(arg => typeof arg === 'string')) &&\n            (!('env' in obj) || !!obj.env && typeof obj.env === 'object' && Object.values(obj.env).every(value => typeof value === 'string')) &&\n            (!('autostart' in obj) || typeof obj.autostart === 'boolean') &&\n            (!('serverUrl' in obj) || typeof obj.serverUrl === 'string') &&\n            (!('serverAuthToken' in obj) || typeof obj.serverAuthToken === 'string') &&\n            (!('serverAuthTokenHeader' in obj) || typeof obj.serverAuthTokenHeader === 'string') &&\n            (!('headers' in obj) || !!obj.headers && typeof obj.headers === 'object' && Object.values(obj.headers).every(value => typeof value === 'string'));\n    }\n}\n\nfunction filterValidValues(servers: unknown): MCPServersPreference {\n    const result: MCPServersPreference = {};\n    if (!servers || typeof servers !== 'object') {\n        return result;\n    }\n    for (const [name, value] of Object.entries(servers)) {\n        if (typeof name === 'string' && MCPServersPreference.isValue(value)) {\n            result[name] = value;\n        }\n    }\n    return result;\n}\n\n@injectable()\nexport class McpFrontendApplicationContribution implements FrontendApplicationContribution {\n\n    @inject(PreferenceService)\n    protected preferenceService: PreferenceService;\n\n    @inject(MCPServerManager)\n    protected manager: MCPServerManager;\n\n    @inject(MCPFrontendService)\n    protected frontendMCPService: MCPFrontendService;\n\n    protected prevServers: Map<string, MCPServerDescription> = new Map();\n\n    onStart(): void {\n        this.preferenceService.ready.then(() => {\n            const servers = filterValidValues(this.preferenceService.get(\n                MCP_SERVERS_PREF,\n                {}\n            ));\n            this.prevServers = this.convertToMap(servers);\n            this.syncServers(this.prevServers);\n            this.autoStartServers(this.prevServers);\n\n            this.preferenceService.onPreferenceChanged(event => {\n                if (event.preferenceName === MCP_SERVERS_PREF) {\n                    this.handleServerChanges(filterValidValues(event.newValue));\n                }\n            });\n        });\n        this.frontendMCPService.registerToolsForAllStartedServers();\n    }\n\n    protected async autoStartServers(servers: Map<string, MCPServerDescription>): Promise<void> {\n        const startedServers = await this.frontendMCPService.getStartedServers();\n        for (const [name, serverDesc] of servers) {\n            if (serverDesc && serverDesc.autostart) {\n                if (!startedServers.includes(name)) {\n                    await this.frontendMCPService.startServer(name);\n                }\n            }\n        }\n    }\n\n    protected handleServerChanges(newServers: MCPServersPreference): void {\n        const oldServers = this.prevServers;\n        const updatedServers = this.convertToMap(newServers);\n\n        for (const [name] of oldServers) {\n            if (!updatedServers.has(name)) {\n                this.manager.removeServer(name);\n            }\n        }\n\n        for (const [name, description] of updatedServers) {\n            const oldDescription = oldServers.get(name);\n            let diff = false;\n            try {\n                // We know that that the descriptions are actual JSONObjects as we construct them ourselves\n                if (!oldDescription || !PreferenceProvider.deepEqual(oldDescription as unknown as JSONObject, description as unknown as JSONObject)) {\n                    diff = true;\n                }\n            } catch (e) {\n                // In some cases the deepEqual function throws an error, so we fall back to assuming that there is a difference\n                // This seems to happen in cases where the objects are structured differently, e.g. whole sub-objects are missing\n                console.debug('Failed to compare MCP server descriptions, assuming a difference', e);\n                diff = true;\n            }\n            if (diff) {\n                this.manager.addOrUpdateServer(description);\n            }\n        }\n\n        this.prevServers = updatedServers;\n    }\n\n    protected syncServers(servers: Map<string, MCPServerDescription>): void {\n\n        for (const [, description] of servers) {\n            this.manager.addOrUpdateServer(description);\n        }\n\n        for (const [name] of this.prevServers) {\n            if (!servers.has(name)) {\n                this.manager.removeServer(name);\n            }\n        }\n    }\n\n    protected convertToMap(servers: MCPServersPreference): Map<string, MCPServerDescription> {\n        const map = new Map<string, MCPServerDescription>();\n        Object.entries(servers).forEach(([name, description]) => {\n            let filteredDescription: MCPServerDescription;\n\n            if ('serverUrl' in description) {\n                // Create RemoteMCPServerDescription by picking only remote-specific properties\n                const { serverUrl, serverAuthToken, serverAuthTokenHeader, headers, autostart } = description;\n                filteredDescription = {\n                    name,\n                    serverUrl,\n                    ...(serverAuthToken && { serverAuthToken }),\n                    ...(serverAuthTokenHeader && { serverAuthTokenHeader }),\n                    ...(headers && { headers }),\n                    autostart: autostart ?? true,\n                };\n            } else {\n                // Create LocalMCPServerDescription by picking only local-specific properties\n                const { command, args, env, autostart } = description;\n                filteredDescription = {\n                    name,\n                    command,\n                    ...(args && { args }),\n                    ...(env && { env }),\n                    autostart: autostart ?? true,\n                };\n            }\n\n            map.set(name, filteredDescription);\n        });\n        return map;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { FrontendApplicationContribution, RemoteConnectionProvider, ServiceConnectionProvider } from '@theia/core/lib/browser';\nimport { MCPFrontendService, MCPServerManager, MCPServerManagerPath, MCPFrontendNotificationService } from '../common/mcp-server-manager';\nimport { McpFrontendApplicationContribution } from './mcp-frontend-application-contribution';\nimport { MCPFrontendServiceImpl } from './mcp-frontend-service';\nimport { MCPFrontendNotificationServiceImpl } from './mcp-frontend-notification-service';\n\nexport default new ContainerModule(bind => {\n    bind(FrontendApplicationContribution).to(McpFrontendApplicationContribution).inSingletonScope();\n    bind(MCPFrontendService).to(MCPFrontendServiceImpl).inSingletonScope();\n    bind(MCPFrontendNotificationService).to(MCPFrontendNotificationServiceImpl).inSingletonScope();\n    bind(MCPServerManager).toDynamicValue(ctx => {\n        const connection = ctx.container.get<ServiceConnectionProvider>(RemoteConnectionProvider);\n        const client = ctx.container.get<MCPFrontendNotificationService>(MCPFrontendNotificationService);\n        return connection.createProxy<MCPServerManager>(MCPServerManagerPath, client);\n    }).inSingletonScope();\n});\n","// *****************************************************************************\n// Copyright (C) 2025 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { MCPFrontendNotificationService } from '../common';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\n\n@injectable()\nexport class MCPFrontendNotificationServiceImpl implements MCPFrontendNotificationService {\n    protected readonly onDidUpdateMCPServersEmitter = new Emitter<void>();\n    public readonly onDidUpdateMCPServers: Event<void> = this.onDidUpdateMCPServersEmitter.event;\n\n    didUpdateMCPServers(): void {\n        this.onDidUpdateMCPServersEmitter.fire();\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { MCPFrontendService, MCPServerDescription, MCPServerManager } from '../common/mcp-server-manager';\nimport { ToolInvocationRegistry, ToolRequest, PromptService, ToolCallContent, ToolCallContentResult } from '@theia/ai-core';\nimport { ListToolsResult, TextContent } from '@modelcontextprotocol/sdk/types';\n\n@injectable()\nexport class MCPFrontendServiceImpl implements MCPFrontendService {\n\n    @inject(MCPServerManager)\n    protected readonly mcpServerManager: MCPServerManager;\n\n    @inject(ToolInvocationRegistry)\n    protected readonly toolInvocationRegistry: ToolInvocationRegistry;\n\n    @inject(PromptService)\n    protected readonly promptService: PromptService;\n\n    async startServer(serverName: string): Promise<void> {\n        await this.mcpServerManager.startServer(serverName);\n        await this.registerTools(serverName);\n    }\n\n    async hasServer(serverName: string): Promise<boolean> {\n        const serverNames = await this.getServerNames();\n        return serverNames.includes(serverName);\n    }\n\n    async isServerStarted(serverName: string): Promise<boolean> {\n        const startedServers = await this.getStartedServers();\n        return startedServers.includes(serverName);\n    }\n\n    async registerToolsForAllStartedServers(): Promise<void> {\n        const startedServers = await this.getStartedServers();\n        for (const serverName of startedServers) {\n            await this.registerTools(serverName);\n        }\n    }\n\n    async registerTools(serverName: string): Promise<void> {\n        const returnedTools = await this.getTools(serverName);\n        if (returnedTools) {\n            const toolRequests: ToolRequest[] = returnedTools.tools.map(tool => this.convertToToolRequest(tool, serverName));\n            toolRequests.forEach(toolRequest =>\n                this.toolInvocationRegistry.registerTool(toolRequest)\n            );\n\n            this.createPromptTemplate(serverName, toolRequests);\n        }\n    }\n\n    getPromptTemplateId(serverName: string): string {\n        return `mcp_${serverName}_tools`;\n    }\n\n    protected createPromptTemplate(serverName: string, toolRequests: ToolRequest[]): void {\n        const templateId = this.getPromptTemplateId(serverName);\n        const functionIds = toolRequests.map(tool => `~{${tool.id}}`);\n        const template = functionIds.join('\\n');\n\n        this.promptService.addBuiltInPromptFragment({\n            id: templateId,\n            template\n        });\n    }\n\n    async stopServer(serverName: string): Promise<void> {\n        this.toolInvocationRegistry.unregisterAllTools(`mcp_${serverName}`);\n        this.promptService.removePromptFragment(this.getPromptTemplateId(serverName));\n        await this.mcpServerManager.stopServer(serverName);\n    }\n\n    getStartedServers(): Promise<string[]> {\n        return this.mcpServerManager.getRunningServers();\n    }\n\n    getServerNames(): Promise<string[]> {\n        return this.mcpServerManager.getServerNames();\n    }\n\n    async getServerDescription(name: string): Promise<MCPServerDescription | undefined> {\n        return this.mcpServerManager.getServerDescription(name);\n    }\n\n    async getTools(serverName: string): Promise<ListToolsResult | undefined> {\n        try {\n            return await this.mcpServerManager.getTools(serverName);\n        } catch (error) {\n            console.error('Error while trying to get tools: ' + error);\n            return undefined;\n        }\n    }\n\n    async addOrUpdateServer(description: MCPServerDescription): Promise<void> {\n        return this.mcpServerManager.addOrUpdateServer(description);\n    }\n\n    private convertToToolRequest(tool: Awaited<ReturnType<MCPServerManager['getTools']>>['tools'][number], serverName: string): ToolRequest {\n        const id = `mcp_${serverName}_${tool.name}`;\n        return {\n            id: id,\n            name: id,\n            providerName: `mcp_${serverName}`,\n            parameters: ToolRequest.isToolRequestParameters(tool.inputSchema) ? {\n                type: tool.inputSchema.type,\n                properties: tool.inputSchema.properties,\n                required: tool.inputSchema.required\n            } : {\n                type: 'object',\n                properties: {}\n            },\n            description: tool.description,\n            handler: async (arg_string: string): Promise<ToolCallContent> => {\n                try {\n                    const result = await this.mcpServerManager.callTool(serverName, tool.name, arg_string);\n                    if (result.isError) {\n                        const textContent = result.content.find(callContent => callContent.type === 'text') as TextContent | undefined;\n                        return { content: [{ type: 'error', data: textContent?.text ?? 'Unknown Error' }] };\n                    }\n                    const content = result.content.map<ToolCallContentResult>(callContent => {\n                        switch (callContent.type) {\n                            case 'image':\n                                return { type: 'image', base64data: callContent.data, mimeType: callContent.mimeType };\n                            case 'text':\n                                return { type: 'text', text: callContent.text };\n                            case 'resource': {\n                                return { type: 'text', text: JSON.stringify(callContent.resource) };\n                            }\n                            default: {\n                                return { type: 'text', text: JSON.stringify(callContent) };\n                            }\n                        }\n                    });\n                    return { content };\n                } catch (error) {\n                    console.error(`Error in tool handler for ${tool.name} on MCP server ${serverName}:`, error);\n                    throw error;\n                }\n            },\n        };\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { nls } from '@theia/core';\nimport { PreferenceSchema } from '@theia/core/lib/browser/preferences/preference-contribution';\n\nexport const MCP_SERVERS_PREF = 'ai-features.mcp.mcpServers';\n\nexport const McpServersPreferenceSchema: PreferenceSchema = {\n  type: 'object',\n  properties: {\n    [MCP_SERVERS_PREF]: {\n      type: 'object',\n      title: nls.localize('theia/ai/mcp/servers/title', 'MCP Server Configuration'),\n      markdownDescription: nls.localize('theia/ai/mcp/servers/mdDescription', 'Configure MCP servers either local with command, arguments and optionally environment variables, \\\nor remote with server URL, authentication token and optionally an authentication header name. Additionally it is possible to configure autostart (true by default). \\\nEach server is identified by a unique key, such as \"brave-search\" or \"filesystem\". \\\nTo start a server, use the \"MCP: Start MCP Server\" command, which enables you to select the desired server. \\\nTo stop a server, use the \"MCP: Stop MCP Server\" command. \\\nPlease note that autostart will only take effect after a restart, you need to start a server manually for the first time.\\\n\\n\\\nExample configuration:\\n\\\n```\\\n{\\n\\\n  \"brave-search\": {\\n\\\n    \"command\": \"npx\",\\n\\\n    \"args\": [\\n\\\n      \"-y\",\\n\\\n      \"@modelcontextprotocol/server-brave-search\"\\n\\\n    ],\\n\\\n    \"env\": {\\n\\\n      \"BRAVE_API_KEY\": \"YOUR_API_KEY\"\\n\\\n    },\\n\\\n  },\\n\\\n  \"filesystem\": {\\n\\\n    \"command\": \"npx\",\\n\\\n    \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/Users/YOUR_USERNAME/Desktop\"],\\n\\\n    \"env\": {\\n\\\n      \"CUSTOM_ENV_VAR\": \"custom-value\"\\n\\\n    },\\n\\\n    \"autostart\": false\\n\\\n  },\\n\\\n  \"jira\": {\\n\\\n    \"serverUrl\": \"YOUR_JIRA_MCP_SERVER_URL\",\\n\\\n    \"serverAuthToken\": \"YOUR_JIRA_MCP_SERVER_TOKEN\"\\n\\\n  }\\n\\\n}\\n```'),\n      additionalProperties: {\n        type: 'object',\n        properties: {\n          command: {\n            type: 'string',\n            title: nls.localize('theia/ai/mcp/servers/command/title', 'Command to execute the MCP server'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/command/mdDescription', 'The command used to start the MCP server, e.g., \"uvx\" or \"npx\".')\n          },\n          args: {\n            type: 'array',\n            title: nls.localize('theia/ai/mcp/servers/args/title', 'Arguments for the command'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/args/mdDescription', 'An array of arguments to pass to the command.'),\n          },\n          env: {\n            type: 'object',\n            title: nls.localize('theia/ai/mcp/servers/env/title', 'Environment variables'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/env/mdDescription', 'Optional environment variables to set for the server, such as an API key.'),\n            additionalProperties: {\n              type: 'string'\n            }\n          },\n          autostart: {\n            type: 'boolean',\n            title: nls.localize('theia/ai/mcp/servers/autostart/title', 'Autostart'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/autostart/mdDescription',\n              'Automatically start this server when the frontend starts. Newly added servers are not immediately auto started, but on restart'),\n            default: true\n          },\n          serverUrl: {\n            type: 'string',\n            title: nls.localize('theia/ai/mcp/servers/serverUrl/title', 'Server URL'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/serverUrl/mdDescription',\n              'The URL of the remote MCP server. If provided, the server will connect to this URL instead of starting a local process.'),\n          },\n          serverAuthToken: {\n            type: 'string',\n            title: nls.localize('theia/ai/mcp/servers/serverAuthToken/title', 'Authentication Token'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/serverAuthToken/mdDescription',\n              'The authentication token for the server, if required. This is used to authenticate with the remote server.'),\n          },\n          serverAuthTokenHeader: {\n            type: 'string',\n            title: nls.localize('theia/ai/mcp/servers/serverAuthTokenHeader/title', 'Authentication Header Name'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/serverAuthTokenHeader/mdDescription',\n              'The header name to use for the server authentication token. If not provided, \"Authorization\" with \"Bearer\" will be used.'),\n          },\n          headers: {\n            type: 'object',\n            title: nls.localize('theia/ai/mcp/servers/headers/title', 'Headers'),\n            markdownDescription: nls.localize('theia/ai/mcp/servers/headers/mdDescription',\n              'Optional additional headers included with each request to the server.'),\n          }\n        },\n        required: []\n      }\n    }\n  }\n};\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\nexport * from './mcp-server-manager';\n","// *****************************************************************************\n// Copyright (C) 2024 EclipseSource GmbH.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CallToolResult, ListResourcesResult, ListToolsResult, ReadResourceResult } from '@modelcontextprotocol/sdk/types';\nimport { Event } from '@theia/core/lib/common/event';\n\nexport const MCPFrontendService = Symbol('MCPFrontendService');\nexport interface MCPFrontendService {\n    startServer(serverName: string): Promise<void>;\n    hasServer(serverName: string): Promise<boolean>;\n    isServerStarted(serverName: string): Promise<boolean>;\n    registerToolsForAllStartedServers(): Promise<void>;\n    stopServer(serverName: string): Promise<void>;\n    addOrUpdateServer(description: MCPServerDescription): Promise<void>;\n    getStartedServers(): Promise<string[]>;\n    getServerNames(): Promise<string[]>;\n    getServerDescription(name: string): Promise<MCPServerDescription | undefined>;\n    getTools(serverName: string): Promise<ListToolsResult | undefined>;\n    getPromptTemplateId(serverName: string): string;\n}\n\nexport const MCPFrontendNotificationService = Symbol('MCPFrontendNotificationService');\nexport interface MCPFrontendNotificationService {\n    readonly onDidUpdateMCPServers: Event<void>;\n    didUpdateMCPServers(): void;\n}\n\nexport interface MCPServer {\n    callTool(toolName: string, arg_string: string): Promise<CallToolResult>;\n    getTools(): Promise<ListToolsResult>;\n    readResource(resourceId: string): Promise<ReadResourceResult>;\n    getResources(): Promise<ListResourcesResult>;\n    description: MCPServerDescription;\n}\n\nexport interface MCPServerManager {\n    callTool(serverName: string, toolName: string, arg_string: string): Promise<CallToolResult>;\n    removeServer(name: string): void;\n    addOrUpdateServer(description: MCPServerDescription): void;\n    getTools(serverName: string): Promise<ListToolsResult>;\n    getServerNames(): Promise<string[]>;\n    getServerDescription(name: string): Promise<MCPServerDescription | undefined>;\n    startServer(serverName: string): Promise<void>;\n    stopServer(serverName: string): Promise<void>;\n    getRunningServers(): Promise<string[]>;\n    setClient(client: MCPFrontendNotificationService): void;\n    disconnectClient(client: MCPFrontendNotificationService): void;\n    readResource(serverName: string, resourceId: string): Promise<ReadResourceResult>;\n    getResources(serverName: string): Promise<ListResourcesResult>;\n}\n\nexport interface ToolInformation {\n    name: string;\n    description?: string;\n}\n\nexport enum MCPServerStatus {\n    NotRunning = 'Not Running',\n    NotConnected = 'Not Connected',\n    Starting = 'Starting',\n    Connecting = 'Connecting',\n    Running = 'Running',\n    Connected = 'Connected',\n    Errored = 'Errored'\n}\n\nexport interface BaseMCPServerDescription {\n    /**\n     * The unique name of the MCP server.\n     */\n    name: string;\n\n    /**\n     * Flag indicating whether the server should automatically start when the application starts.\n     */\n    autostart?: boolean;\n\n    /**\n     * The current status of the server. Optional because only set by the server.\n     */\n    status?: MCPServerStatus;\n\n    /**\n     * Last error message that the server has returned.\n     */\n    error?: string;\n\n    /**\n     * List of available tools for the server. Returns the name and description if available.\n     */\n    tools?: ToolInformation[];\n}\n\nexport interface LocalMCPServerDescription extends BaseMCPServerDescription {\n    /**\n     * The command to execute the MCP server.\n     */\n    command: string;\n\n    /**\n     * An array of arguments to pass to the command.\n     */\n    args?: string[];\n\n    /**\n     * Optional environment variables to set when starting the server.\n     */\n    env?: { [key: string]: string };\n}\n\nexport interface RemoteMCPServerDescription extends BaseMCPServerDescription {\n    /**\n     * The URL of the remote MCP server.\n     */\n    serverUrl: string;\n\n    /**\n     * The authentication token for the server, if required.\n     */\n    serverAuthToken?: string;\n\n    /**\n     * The header name to use for the server authentication token.\n     */\n    serverAuthTokenHeader?: string;\n\n    /**\n     * Optional additional headers to include in requests to the server.\n     */\n    headers?: Record<string, string>;\n}\n\nexport type MCPServerDescription = LocalMCPServerDescription | RemoteMCPServerDescription;\n\nexport function isLocalMCPServerDescription(description: MCPServerDescription): description is LocalMCPServerDescription {\n    return (description as LocalMCPServerDescription).command !== undefined;\n}\nexport function isRemoteMCPServerDescription(description: MCPServerDescription): description is RemoteMCPServerDescription {\n    return (description as RemoteMCPServerDescription).serverUrl !== undefined;\n}\n\nexport const MCPServerManager = Symbol('MCPServerManager');\nexport const MCPServerManagerPath = '/services/mcpservermanager';\n"],"names":[],"sourceRoot":""}