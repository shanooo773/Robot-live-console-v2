{"version":3,"file":"vendors-node_modules_theia_plugin-dev_lib_browser_plugin-dev-frontend-module_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/plugin-dev/src/browser/hosted-plugin-controller.ts?","webpack:///./node_modules/@theia/plugin-dev/src/browser/hosted-plugin-frontend-contribution.ts?","webpack:///./node_modules/@theia/plugin-dev/src/browser/hosted-plugin-informer.ts?","webpack:///./node_modules/@theia/plugin-dev/src/browser/hosted-plugin-log-viewer.ts?","webpack:///./node_modules/@theia/plugin-dev/src/browser/hosted-plugin-manager-client.ts?","webpack:///./node_modules/@theia/plugin-dev/src/browser/hosted-plugin-preferences.ts?","webpack:///./node_modules/@theia/plugin-dev/src/browser/plugin-dev-frontend-module.ts?","webpack:///./node_modules/@theia/plugin-dev/src/common/plugin-dev-protocol.ts?","webpack:///./node_modules/@theia/plugin-ext/src/hosted/browser/hosted-plugin-watcher.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { StatusBar } from '@theia/core/lib/browser/status-bar/status-bar';\nimport { StatusBarAlignment, StatusBarEntry, FrontendApplicationContribution, PreferenceServiceImpl, PreferenceChange, codicon } from '@theia/core/lib/browser';\nimport { MessageService } from '@theia/core/lib/common';\nimport { CommandRegistry } from '@theia/core/shared/@lumino/commands';\nimport { Menu } from '@theia/core/shared/@lumino/widgets';\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\nimport { ConnectionStatusService, ConnectionStatus } from '@theia/core/lib/browser/connection-status-service';\nimport { PluginDevServer } from '../common/plugin-dev-protocol';\nimport { HostedPluginManagerClient, HostedInstanceState, HostedPluginCommands, HostedInstanceData } from './hosted-plugin-manager-client';\nimport { HostedPluginLogViewer } from './hosted-plugin-log-viewer';\nimport { HostedPluginPreferences } from './hosted-plugin-preferences';\nimport { nls } from '@theia/core/lib/common/nls';\n\n/**\n * Adds a status bar element displaying the state of secondary Theia instance with hosted plugin and\n * allows controlling the instance by simple clicking on the status bar element.\n */\n@injectable()\nexport class HostedPluginController implements FrontendApplicationContribution {\n\n    public static readonly HOSTED_PLUGIN = 'hosted-plugin';\n    public static readonly HOSTED_PLUGIN_OFFLINE = 'hosted-plugin-offline';\n    public static readonly HOSTED_PLUGIN_FAILED = 'hosted-plugin-failed';\n\n    @inject(StatusBar)\n    protected readonly statusBar: StatusBar;\n\n    @inject(FrontendApplicationStateService)\n    protected readonly frontendApplicationStateService: FrontendApplicationStateService;\n\n    @inject(PluginDevServer)\n    protected readonly hostedPluginServer: PluginDevServer;\n\n    @inject(HostedPluginManagerClient)\n    protected readonly hostedPluginManagerClient: HostedPluginManagerClient;\n\n    @inject(ConnectionStatusService)\n    protected readonly connectionStatusService: ConnectionStatusService;\n\n    @inject(HostedPluginLogViewer)\n    protected readonly hostedPluginLogViewer: HostedPluginLogViewer;\n\n    @inject(HostedPluginPreferences)\n    protected readonly hostedPluginPreferences: HostedPluginPreferences;\n\n    @inject(PreferenceServiceImpl)\n    protected readonly preferenceService: PreferenceServiceImpl;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    private pluginState: HostedInstanceState = HostedInstanceState.STOPPED;\n    // used only for displaying Running instead of Watching in status bar if run of watcher fails\n    private watcherSuccess: boolean;\n    private entry: StatusBarEntry | undefined;\n\n    public initialize(): void {\n        this.hostedPluginServer.getHostedPlugin().then(pluginMetadata => {\n            if (!pluginMetadata) {\n                this.frontendApplicationStateService.reachedState('ready').then(() => {\n                    // handles status bar item\n                    this.hostedPluginManagerClient.onStateChanged(e => {\n                        if (e.state === HostedInstanceState.STARTING) {\n                            this.onHostedPluginStarting();\n                        } else if (e.state === HostedInstanceState.RUNNING) {\n                            this.onHostedPluginRunning();\n                        } else if (e.state === HostedInstanceState.STOPPED) {\n                            this.onHostedPluginStopped();\n                        } else if (e.state === HostedInstanceState.FAILED) {\n                            this.onHostedPluginFailed();\n                        }\n                    });\n\n                    // handles watch compilation\n                    this.hostedPluginManagerClient.onStateChanged(e => this.handleWatchers(e));\n\n                    // updates status bar if page is loading when hosted instance is already running\n                    this.hostedPluginServer.isHostedPluginInstanceRunning().then(running => {\n                        if (running) {\n                            this.onHostedPluginRunning();\n                        }\n                    });\n                });\n\n                this.connectionStatusService.onStatusChange(() => this.onConnectionStatusChanged());\n\n                this.preferenceService.onPreferenceChanged(preference => this.onPreferencesChanged(preference));\n            } else {\n                console.error(`Need to load plugin ${pluginMetadata.model.id}`);\n            }\n        });\n    }\n\n    /**\n     * Display status bar element for stopped plugin.\n     */\n    protected async onHostedPluginStopped(): Promise<void> {\n        this.pluginState = HostedInstanceState.STOPPED;\n\n        this.entry = {\n            text: `${nls.localize('theia/plugin-dev/hostedPluginStopped', 'Hosted Plugin: Stopped')} $(angle-up)`,\n            alignment: StatusBarAlignment.LEFT,\n            priority: 100,\n            onclick: e => {\n                this.showMenu(e.clientX, e.clientY);\n            }\n        };\n\n        this.entry.className = HostedPluginController.HOSTED_PLUGIN;\n        await this.statusBar.setElement(HostedPluginController.HOSTED_PLUGIN, this.entry);\n    }\n\n    /**\n     * Display status bar element for starting plugin.\n     */\n    protected async onHostedPluginStarting(): Promise<void> {\n        this.pluginState = HostedInstanceState.STARTING;\n\n        this.hostedPluginLogViewer.showLogConsole();\n\n        this.entry = {\n            text: `$(cog~spin) ${nls.localize('theia/plugin-dev/hostedPluginStarting', 'Hosted Plugin: Starting')}`,\n            alignment: StatusBarAlignment.LEFT,\n            priority: 100\n        };\n\n        this.entry.className = HostedPluginController.HOSTED_PLUGIN;\n        await this.statusBar.setElement(HostedPluginController.HOSTED_PLUGIN, this.entry);\n    }\n\n    /**\n     * Display status bar element for running plugin.\n     */\n    protected async onHostedPluginRunning(): Promise<void> {\n        this.pluginState = HostedInstanceState.RUNNING;\n\n        let entryText: string;\n        if (this.hostedPluginPreferences['hosted-plugin.watchMode'] && this.watcherSuccess) {\n            entryText = `$(cog~spin) ${nls.localize('theia/plugin-dev/hostedPluginWatching', 'Hosted Plugin: Watching')}$(angle-up)`;\n        } else {\n            entryText = `$(cog~spin) ${nls.localize('theia/plugin-dev/hostedPluginRunning', 'Hosted Plugin: Running')} $(angle-up)`;\n        }\n\n        this.entry = {\n            text: entryText,\n            alignment: StatusBarAlignment.LEFT,\n            priority: 100,\n            onclick: e => {\n                this.showMenu(e.clientX, e.clientY);\n            }\n        };\n\n        this.entry.className = HostedPluginController.HOSTED_PLUGIN;\n        await this.statusBar.setElement(HostedPluginController.HOSTED_PLUGIN, this.entry);\n    }\n\n    /**\n     * Display status bar element for failed plugin.\n     */\n    protected async onHostedPluginFailed(): Promise<void> {\n        this.pluginState = HostedInstanceState.FAILED;\n\n        this.entry = {\n            text: `${nls.localize('theia/plugin-dev/hostedPluginStopped', 'Hosted Plugin: Stopped')} $(angle-up)`,\n            alignment: StatusBarAlignment.LEFT,\n            priority: 100,\n            onclick: e => {\n                this.showMenu(e.clientX, e.clientY);\n            }\n        };\n\n        this.entry.className = HostedPluginController.HOSTED_PLUGIN_FAILED;\n        await this.statusBar.setElement(HostedPluginController.HOSTED_PLUGIN, this.entry);\n    }\n\n    protected async onPreferencesChanged(preference: PreferenceChange): Promise<void> {\n        if (preference.preferenceName === 'hosted-plugin.watchMode') {\n            if (await this.hostedPluginServer.isHostedPluginInstanceRunning()) {\n                const pluginLocation = await this.hostedPluginServer.getHostedPluginURI();\n                const isWatchCompilationRunning = await this.hostedPluginServer.isWatchCompilationRunning(pluginLocation);\n                if (preference.newValue === true) {\n                    if (!isWatchCompilationRunning) {\n                        await this.runWatchCompilation(pluginLocation.toString());\n                    }\n                } else {\n                    if (isWatchCompilationRunning) {\n                        await this.hostedPluginServer.stopWatchCompilation(pluginLocation.toString());\n                    }\n                }\n                // update status bar\n                this.onHostedPluginRunning();\n            }\n        }\n    }\n\n    /**\n     * Starts / stops watchers on hosted instance state change.\n     *\n     * @param event hosted instance state change event\n     */\n    protected async handleWatchers(event: HostedInstanceData): Promise<void> {\n        if (event.state === HostedInstanceState.RUNNING) {\n            if (this.hostedPluginPreferences['hosted-plugin.watchMode']) {\n                await this.runWatchCompilation(event.pluginLocation.toString());\n                // update status bar\n                this.onHostedPluginRunning();\n            }\n        } else if (event.state === HostedInstanceState.STOPPING) {\n            if (this.hostedPluginPreferences['hosted-plugin.watchMode']) {\n                const isRunning = await this.hostedPluginServer.isWatchCompilationRunning(event.pluginLocation.toString());\n                if (isRunning) {\n                    try {\n                        await this.hostedPluginServer.stopWatchCompilation(event.pluginLocation.toString());\n                    } catch (error) {\n                        this.messageService.error(this.getErrorMessage(error));\n                    }\n                }\n            }\n        }\n    }\n\n    private async runWatchCompilation(pluginLocation: string): Promise<void> {\n        try {\n            await this.hostedPluginServer.runWatchCompilation(pluginLocation);\n            this.watcherSuccess = true;\n        } catch (error) {\n            this.messageService.error(this.getErrorMessage(error));\n            this.watcherSuccess = false;\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private getErrorMessage(error: any): string {\n        return error?.message?.substring(error.message.indexOf(':') + 1) || '';\n    }\n\n    /**\n     * Updating status bar element when changing connection status.\n     */\n    private onConnectionStatusChanged(): void {\n        if (this.connectionStatusService.currentStatus === ConnectionStatus.OFFLINE) {\n            // Re-set the element only if it's visible on status bar\n            if (this.entry) {\n                const offlineElement = {\n                    text: nls.localize('theia/plugin-dev/hostedPluginStopped', 'Hosted Plugin: Stopped'),\n                    alignment: StatusBarAlignment.LEFT,\n                    priority: 100\n                };\n\n                this.entry.className = HostedPluginController.HOSTED_PLUGIN_OFFLINE;\n                this.statusBar.setElement(HostedPluginController.HOSTED_PLUGIN, offlineElement);\n            }\n        } else {\n            // ask state of hosted plugin when switching to Online\n            if (this.entry) {\n                this.hostedPluginServer.isHostedPluginInstanceRunning().then(running => {\n                    if (running) {\n                        this.onHostedPluginRunning();\n                    } else {\n                        this.onHostedPluginStopped();\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Show menu containing actions to start/stop/restart hosted plugin.\n     */\n    protected showMenu(x: number, y: number): void {\n        const commands = new CommandRegistry();\n        const menu = new Menu({\n            commands\n        });\n\n        if (this.pluginState === HostedInstanceState.RUNNING) {\n            this.addCommandsForRunningPlugin(commands, menu);\n        } else if (this.pluginState === HostedInstanceState.STOPPED || this.pluginState === HostedInstanceState.FAILED) {\n            this.addCommandsForStoppedPlugin(commands, menu);\n        }\n\n        menu.open(x, y);\n    }\n\n    /**\n     * Adds commands to the menu for running plugin.\n     */\n    protected addCommandsForRunningPlugin(commands: CommandRegistry, menu: Menu): void {\n        commands.addCommand(HostedPluginCommands.STOP.id, {\n            label: nls.localize('theia/plugin-dev/stopInstance', 'Stop Instance'),\n            iconClass: codicon('debug-stop'),\n            execute: () => setTimeout(() => this.hostedPluginManagerClient.stop(), 100)\n        });\n\n        menu.addItem({\n            type: 'command',\n            command: HostedPluginCommands.STOP.id\n        });\n\n        commands.addCommand(HostedPluginCommands.RESTART.id, {\n            label: nls.localize('theia/plugin-dev/restartInstance', 'Restart Instance'),\n            iconClass: codicon('debug-restart'),\n            execute: () => setTimeout(() => this.hostedPluginManagerClient.restart(), 100)\n        });\n\n        menu.addItem({\n            type: 'command',\n            command: HostedPluginCommands.RESTART.id\n        });\n    }\n\n    /**\n     * Adds command to the menu for stopped plugin.\n     */\n    protected addCommandsForStoppedPlugin(commands: CommandRegistry, menu: Menu): void {\n        commands.addCommand(HostedPluginCommands.START.id, {\n            label: nls.localize('theia/plugin-dev/startInstance', 'Start Instance'),\n            iconClass: codicon('play'),\n            execute: () => setTimeout(() => this.hostedPluginManagerClient.start(), 100)\n        });\n\n        menu.addItem({\n            type: 'command',\n            command: HostedPluginCommands.START.id\n        });\n\n        commands.addCommand(HostedPluginCommands.DEBUG.id, {\n            label: nls.localize('theia/plugin-dev/debugInstance', 'Debug Instance'),\n            iconClass: codicon('debug'),\n            execute: () => setTimeout(() => this.hostedPluginManagerClient.debug(), 100)\n        });\n\n        menu.addItem({\n            type: 'command',\n            command: HostedPluginCommands.DEBUG.id\n        });\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2019 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { CommandRegistry, CommandContribution } from '@theia/core/lib/common';\nimport { HostedPluginManagerClient, HostedPluginCommands } from './hosted-plugin-manager-client';\n\n@injectable()\nexport class HostedPluginFrontendContribution implements CommandContribution {\n\n    @inject(HostedPluginManagerClient)\n    protected readonly hostedPluginManagerClient: HostedPluginManagerClient;\n\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(HostedPluginCommands.START, {\n            execute: () => this.hostedPluginManagerClient.start()\n        });\n        commands.registerCommand(HostedPluginCommands.DEBUG, {\n            execute: () => this.hostedPluginManagerClient.debug()\n        });\n        commands.registerCommand(HostedPluginCommands.STOP, {\n            execute: () => this.hostedPluginManagerClient.stop()\n        });\n        commands.registerCommand(HostedPluginCommands.RESTART, {\n            execute: () => this.hostedPluginManagerClient.restart()\n        });\n        commands.registerCommand(HostedPluginCommands.SELECT_PATH, {\n            execute: () => this.hostedPluginManagerClient.selectPluginPath()\n        });\n\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { StatusBar } from '@theia/core/lib/browser/status-bar/status-bar';\nimport { StatusBarAlignment, StatusBarEntry, FrontendApplicationContribution } from '@theia/core/lib/browser';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { PluginDevServer } from '../common/plugin-dev-protocol';\nimport { ConnectionStatusService, ConnectionStatus } from '@theia/core/lib/browser/connection-status-service';\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\nimport { nls } from '@theia/core/lib/common/nls';\nimport { WindowTitleService } from '@theia/core/lib/browser/window/window-title-service';\n\n/**\n * Informs the user whether Theia is running with hosted plugin.\n * Adds 'Development Host' status bar element and appends the same prefix to window title.\n */\n@injectable()\nexport class HostedPluginInformer implements FrontendApplicationContribution {\n\n    public static readonly DEVELOPMENT_HOST_TITLE = nls.localize('theia/plugin-dev/devHost', 'Development Host');\n\n    public static readonly DEVELOPMENT_HOST = 'development-host';\n\n    public static readonly DEVELOPMENT_HOST_OFFLINE = 'development-host-offline';\n\n    private entry: StatusBarEntry;\n\n    @inject(StatusBar)\n    protected readonly statusBar: StatusBar;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(PluginDevServer)\n    protected readonly hostedPluginServer: PluginDevServer;\n\n    @inject(ConnectionStatusService)\n    protected readonly connectionStatusService: ConnectionStatusService;\n\n    @inject(FrontendApplicationStateService)\n    protected readonly frontendApplicationStateService: FrontendApplicationStateService;\n\n    @inject(WindowTitleService)\n    protected readonly windowTitleService: WindowTitleService;\n\n    public initialize(): void {\n        this.hostedPluginServer.getHostedPlugin().then(pluginMetadata => {\n            if (pluginMetadata) {\n                this.windowTitleService.update({\n                    developmentHost: HostedPluginInformer.DEVELOPMENT_HOST_TITLE\n                });\n\n                this.entry = {\n                    text: `$(cube) ${HostedPluginInformer.DEVELOPMENT_HOST_TITLE}`,\n                    tooltip: `${nls.localize('theia/plugin-dev/hostedPlugin', 'Hosted Plugin')} '${pluginMetadata.model.name}'`,\n                    alignment: StatusBarAlignment.LEFT,\n                    priority: 100\n                };\n\n                this.frontendApplicationStateService.reachedState('ready').then(() => {\n                    this.updateStatusBarElement();\n                });\n\n                this.connectionStatusService.onStatusChange(() => this.updateStatusBarElement());\n            }\n        });\n    }\n\n    private updateStatusBarElement(): void {\n        if (this.connectionStatusService.currentStatus === ConnectionStatus.OFFLINE) {\n            this.entry.className = HostedPluginInformer.DEVELOPMENT_HOST_OFFLINE;\n        } else {\n            this.entry.className = HostedPluginInformer.DEVELOPMENT_HOST;\n        }\n\n        this.statusBar.setElement(HostedPluginInformer.DEVELOPMENT_HOST, this.entry);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { OutputChannel, OutputChannelManager } from '@theia/output/lib/browser/output-channel';\nimport { OutputContribution } from '@theia/output/lib/browser/output-contribution';\nimport { LogPart } from '@theia/plugin-ext/lib/common/types';\nimport { HostedPluginWatcher } from '@theia/plugin-ext/lib/hosted/browser/hosted-plugin-watcher';\n\n@injectable()\nexport class HostedPluginLogViewer {\n    public static OUTPUT_CHANNEL_NAME = 'hosted-instance-log';\n\n    @inject(HostedPluginWatcher)\n    protected readonly watcher: HostedPluginWatcher;\n    @inject(OutputChannelManager)\n    protected readonly outputChannelManager: OutputChannelManager;\n    @inject(OutputContribution)\n    protected readonly outputContribution: OutputContribution;\n\n    protected channel: OutputChannel;\n\n    showLogConsole(): void {\n        this.outputContribution.openView({ reveal: true }).then(view => {\n            view.activate();\n        });\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.channel = this.outputChannelManager.getChannel(HostedPluginLogViewer.OUTPUT_CHANNEL_NAME);\n        this.watcher.onLogMessageEvent(event => this.logMessageEventHandler(event));\n    }\n\n    protected logMessageEventHandler(event: LogPart): void {\n        this.channel.appendLine(event.data);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Path } from '@theia/core/lib/common/path';\nimport { MessageService, Command, Emitter, Event } from '@theia/core/lib/common';\nimport { LabelProvider, isNative, AbstractDialog } from '@theia/core/lib/browser';\nimport { WindowService } from '@theia/core/lib/browser/window/window-service';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { FileDialogService } from '@theia/filesystem/lib/browser';\nimport { PluginDebugConfiguration, PluginDevServer } from '../common/plugin-dev-protocol';\nimport { LaunchVSCodeArgument, LaunchVSCodeRequest, LaunchVSCodeResult } from '@theia/debug/lib/browser/debug-contribution';\nimport { DebugSessionManager } from '@theia/debug/lib/browser/debug-session-manager';\nimport { HostedPluginPreferences } from './hosted-plugin-preferences';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { DebugSessionConnection } from '@theia/debug/lib/browser/debug-session-connection';\nimport { nls } from '@theia/core/lib/common/nls';\n\n/**\n * Commands to control Hosted plugin instances.\n */\nexport namespace HostedPluginCommands {\n    const HOSTED_PLUGIN_CATEGORY_KEY = 'theia/plugin-dev/hostedPlugin';\n    const HOSTED_PLUGIN_CATEGORY = 'Hosted Plugin';\n    export const START = Command.toLocalizedCommand({\n        id: 'hosted-plugin:start',\n        category: HOSTED_PLUGIN_CATEGORY,\n        label: 'Start Instance'\n    }, 'theia/plugin-dev/startInstance', HOSTED_PLUGIN_CATEGORY_KEY);\n\n    export const DEBUG = Command.toLocalizedCommand({\n        id: 'hosted-plugin:debug',\n        category: HOSTED_PLUGIN_CATEGORY,\n        label: 'Debug Instance'\n    }, 'theia/plugin-dev/debugInstance', HOSTED_PLUGIN_CATEGORY_KEY);\n\n    export const STOP = Command.toLocalizedCommand({\n        id: 'hosted-plugin:stop',\n        category: HOSTED_PLUGIN_CATEGORY,\n        label: 'Stop Instance'\n    }, 'theia/plugin-dev/stopInstance', HOSTED_PLUGIN_CATEGORY_KEY);\n\n    export const RESTART = Command.toLocalizedCommand({\n        id: 'hosted-plugin:restart',\n        category: HOSTED_PLUGIN_CATEGORY,\n        label: 'Restart Instance'\n    }, 'theia/plugin-dev/restartInstance', HOSTED_PLUGIN_CATEGORY_KEY);\n\n    export const SELECT_PATH = Command.toLocalizedCommand({\n        id: 'hosted-plugin:select-path',\n        category: HOSTED_PLUGIN_CATEGORY,\n        label: 'Select Path'\n    }, 'theia/plugin-dev/selectPath', HOSTED_PLUGIN_CATEGORY_KEY);\n}\n\n/**\n * Available states of hosted plugin instance.\n */\nexport enum HostedInstanceState {\n    STOPPED = 'stopped',\n    STARTING = 'starting',\n    RUNNING = 'running',\n    STOPPING = 'stopping',\n    FAILED = 'failed'\n}\n\nexport interface HostedInstanceData {\n    state: HostedInstanceState;\n    pluginLocation: URI;\n}\n\n/**\n * Responsible for UI to set up and control Hosted Plugin Instance.\n */\n@injectable()\nexport class HostedPluginManagerClient {\n    private openNewTabAskDialog: OpenHostedInstanceLinkDialog;\n\n    private connection: DebugSessionConnection;\n\n    // path to the plugin on the file system\n    protected pluginLocation: URI | undefined;\n\n    // URL to the running plugin instance\n    protected pluginInstanceURL: string | undefined;\n\n    protected isDebug = false;\n\n    protected readonly stateChanged = new Emitter<HostedInstanceData>();\n\n    get onStateChanged(): Event<HostedInstanceData> {\n        return this.stateChanged.event;\n    }\n\n    @inject(PluginDevServer)\n    protected readonly hostedPluginServer: PluginDevServer;\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n    @inject(WindowService)\n    protected readonly windowService: WindowService;\n    @inject(FileService)\n    protected readonly fileService: FileService;\n    @inject(EnvVariablesServer)\n    protected readonly environments: EnvVariablesServer;\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n    @inject(DebugSessionManager)\n    protected readonly debugSessionManager: DebugSessionManager;\n    @inject(HostedPluginPreferences)\n    protected readonly hostedPluginPreferences: HostedPluginPreferences;\n    @inject(FileDialogService)\n    protected readonly fileDialogService: FileDialogService;\n\n    @postConstruct()\n    protected init(): void {\n        this.doInit();\n    }\n\n    protected async doInit(): Promise<void> {\n        this.openNewTabAskDialog = new OpenHostedInstanceLinkDialog(this.windowService);\n\n        // is needed for case when page is loaded when hosted instance is already running.\n        if (await this.hostedPluginServer.isHostedPluginInstanceRunning()) {\n            this.pluginLocation = new URI(await this.hostedPluginServer.getHostedPluginURI());\n        }\n    }\n\n    get lastPluginLocation(): string | undefined {\n        if (this.pluginLocation) {\n            return this.pluginLocation.toString();\n        }\n        return undefined;\n    }\n\n    async start(debugConfig?: PluginDebugConfiguration): Promise<void> {\n        if (await this.hostedPluginServer.isHostedPluginInstanceRunning()) {\n            this.messageService.warn(nls.localize('theia/plugin-dev/alreadyRunning', 'Hosted instance is already running.'));\n            return;\n        }\n\n        if (!this.pluginLocation) {\n            await this.selectPluginPath();\n            if (!this.pluginLocation) {\n                // selection was cancelled\n                return;\n            }\n        }\n\n        try {\n            this.stateChanged.fire({ state: HostedInstanceState.STARTING, pluginLocation: this.pluginLocation });\n            this.messageService.info(nls.localize('theia/plugin-dev/starting', 'Starting hosted instance server ...'));\n\n            if (debugConfig) {\n                this.isDebug = true;\n                this.pluginInstanceURL = await this.hostedPluginServer.runDebugHostedPluginInstance(this.pluginLocation.toString(), debugConfig);\n            } else {\n                this.isDebug = false;\n                this.pluginInstanceURL = await this.hostedPluginServer.runHostedPluginInstance(this.pluginLocation.toString());\n            }\n            await this.openPluginWindow();\n\n            this.messageService.info(`${nls.localize('theia/plugin-dev/running', 'Hosted instance is running at:')} ${this.pluginInstanceURL}`);\n            this.stateChanged.fire({ state: HostedInstanceState.RUNNING, pluginLocation: this.pluginLocation });\n        } catch (error) {\n            this.messageService.error(nls.localize('theia/plugin-dev/failed', 'Failed to run hosted plugin instance: {0}', this.getErrorMessage(error)));\n            this.stateChanged.fire({ state: HostedInstanceState.FAILED, pluginLocation: this.pluginLocation });\n            this.stop();\n        }\n    }\n\n    async debug(config?: PluginDebugConfiguration): Promise<string | undefined> {\n        await this.start(this.setDebugConfig(config));\n        await this.startDebugSessionManager();\n\n        return this.pluginInstanceURL;\n    }\n\n    async startDebugSessionManager(): Promise<void> {\n        let outFiles: string[] | undefined = undefined;\n        if (this.pluginLocation && this.hostedPluginPreferences['hosted-plugin.launchOutFiles'].length > 0) {\n            const fsPath = await this.fileService.fsPath(this.pluginLocation);\n            if (fsPath) {\n                outFiles = this.hostedPluginPreferences['hosted-plugin.launchOutFiles'].map(outFile =>\n                    outFile.replace('${pluginPath}', new Path(fsPath).toString())\n                );\n            }\n        }\n        const name = nls.localize('theia/plugin-dev/hostedPlugin', 'Hosted Plugin');\n        await this.debugSessionManager.start({\n            name,\n            configuration: {\n                type: 'node',\n                request: 'attach',\n                timeout: 30000,\n                name,\n                smartStep: true,\n                sourceMaps: !!outFiles,\n                outFiles\n            }\n        });\n    }\n\n    async stop(checkRunning: boolean = true): Promise<void> {\n        if (checkRunning && !await this.hostedPluginServer.isHostedPluginInstanceRunning()) {\n            this.messageService.warn(nls.localize('theia/plugin-dev/notRunning', 'Hosted instance is not running.'));\n            return;\n        }\n        try {\n            this.stateChanged.fire({ state: HostedInstanceState.STOPPING, pluginLocation: this.pluginLocation! });\n            await this.hostedPluginServer.terminateHostedPluginInstance();\n            this.messageService.info((this.pluginInstanceURL\n                ? nls.localize('theia/plugin-dev/instanceTerminated', '{0} has been terminated', this.pluginInstanceURL)\n                : nls.localize('theia/plugin-dev/unknownTerminated', 'The instance has been terminated')));\n            this.stateChanged.fire({ state: HostedInstanceState.STOPPED, pluginLocation: this.pluginLocation! });\n        } catch (error) {\n            this.messageService.error(this.getErrorMessage(error));\n        }\n    }\n\n    async restart(): Promise<void> {\n        if (await this.hostedPluginServer.isHostedPluginInstanceRunning()) {\n            await this.stop(false);\n\n            this.messageService.info(nls.localize('theia/plugin-dev/starting', 'Starting hosted instance server ...'));\n\n            // It takes some time before OS released all resources e.g. port.\n            // Keep trying to run hosted instance with delay.\n            this.stateChanged.fire({ state: HostedInstanceState.STARTING, pluginLocation: this.pluginLocation! });\n            let lastError;\n            for (let tries = 0; tries < 15; tries++) {\n                try {\n                    if (this.isDebug) {\n                        this.pluginInstanceURL = await this.hostedPluginServer.runDebugHostedPluginInstance(this.pluginLocation!.toString(), {\n                            debugMode: this.hostedPluginPreferences['hosted-plugin.debugMode'],\n                            debugPort: [...this.hostedPluginPreferences['hosted-plugin.debugPorts']]\n                        });\n                        await this.startDebugSessionManager();\n                    } else {\n                        this.pluginInstanceURL = await this.hostedPluginServer.runHostedPluginInstance(this.pluginLocation!.toString());\n                    }\n                    await this.openPluginWindow();\n                    this.messageService.info(`${nls.localize('theia/plugin-dev/running', 'Hosted instance is running at:')} ${this.pluginInstanceURL}`);\n                    this.stateChanged.fire({\n                        state: HostedInstanceState.RUNNING,\n                        pluginLocation: this.pluginLocation!\n                    });\n                    return;\n                } catch (error) {\n                    lastError = error;\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                }\n            }\n            this.messageService.error(nls.localize('theia/plugin-dev/failed', 'Failed to run hosted plugin instance: {0}', this.getErrorMessage(lastError)));\n            this.stateChanged.fire({ state: HostedInstanceState.FAILED, pluginLocation: this.pluginLocation! });\n            this.stop();\n        } else {\n            this.messageService.warn(nls.localize('theia/plugin-dev/notRunning', 'Hosted instance is not running.'));\n            this.start();\n        }\n    }\n\n    /**\n     * Creates directory choose dialog and set selected folder into pluginLocation field.\n     */\n    async selectPluginPath(): Promise<void> {\n        const workspaceFolder = (await this.workspaceService.roots)[0] || await this.fileService.resolve(new URI(await this.environments.getHomeDirUri()));\n        if (!workspaceFolder) {\n            throw new Error('Unable to find the root');\n        }\n\n        const result = await this.fileDialogService.showOpenDialog({\n            title: HostedPluginCommands.SELECT_PATH.label!,\n            openLabel: nls.localize('theia/plugin-dev/select', 'Select'),\n            canSelectFiles: false,\n            canSelectFolders: true,\n            canSelectMany: false\n        }, workspaceFolder);\n\n        if (result) {\n            if (await this.hostedPluginServer.isPluginValid(result.toString())) {\n                this.pluginLocation = result;\n                this.messageService.info(nls.localize('theia/plugin-dev/pluginFolder', 'Plugin folder is set to: {0}', this.labelProvider.getLongName(result)));\n            } else {\n                this.messageService.error(nls.localize('theia/plugin-dev/noValidPlugin', 'Specified folder does not contain valid plugin.'));\n            }\n        }\n    }\n\n    register(configType: string, connection: DebugSessionConnection): void {\n        if (configType === 'pwa-extensionHost') {\n            this.connection = connection;\n            this.connection.onRequest('launchVSCode', (request: LaunchVSCodeRequest) => this.launchVSCode(request));\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.connection.on('exited', async (args: any) => {\n                await this.stop();\n            });\n        }\n    }\n\n    /**\n     * Opens window with URL to the running plugin instance.\n     */\n    protected async openPluginWindow(): Promise<void> {\n        // do nothing for electron browser\n        if (isNative) {\n            return;\n        }\n\n        if (this.pluginInstanceURL) {\n            try {\n                this.windowService.openNewWindow(this.pluginInstanceURL);\n            } catch (err) {\n                // browser blocked opening of a new tab\n                this.openNewTabAskDialog.showOpenNewTabAskDialog(this.pluginInstanceURL);\n            }\n        }\n    }\n\n    protected async launchVSCode({ arguments: { args } }: LaunchVSCodeRequest): Promise<LaunchVSCodeResult> {\n        let result = {};\n        let instanceURI;\n\n        const sessions = this.debugSessionManager.sessions.filter(session => session.id !== this.connection.sessionId);\n\n        /* if `launchVSCode` is invoked and sessions do not exist - it means that `start` debug was invoked.\n           if `launchVSCode` is invoked and sessions do exist - it means that `restartSessions()` was invoked,\n           which invoked `this.sendRequest('restart', {})`, which restarted `vscode-builtin-js-debug` plugin which is\n           connected to first session (sessions[0]), which means that other existing (child) sessions need to be terminated\n           and new ones will be created by running `startDebugSessionManager()`\n         */\n        if (sessions.length > 0) {\n            sessions.forEach(session => this.debugSessionManager.terminateSession(session));\n            await this.startDebugSessionManager();\n            instanceURI = this.pluginInstanceURL;\n        } else {\n            instanceURI = await this.debug(this.getDebugPluginConfig(args));\n        }\n\n        if (instanceURI) {\n            const instanceURL = new URL(instanceURI);\n            if (instanceURL.port) {\n                result = Object.assign(result, { rendererDebugPort: instanceURL.port });\n            }\n        }\n        return result;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected getErrorMessage(error: any): string {\n        return error?.message?.substring(error.message.indexOf(':') + 1) || '';\n    }\n\n    private setDebugConfig(config?: PluginDebugConfiguration): PluginDebugConfiguration {\n        config = Object.assign(config || {}, { debugMode: this.hostedPluginPreferences['hosted-plugin.debugMode'] });\n        if (config.pluginLocation) {\n            this.pluginLocation = new URI((!config.pluginLocation.startsWith('/') ? '/' : '') + config.pluginLocation.replace(/\\\\/g, '/')).withScheme('file');\n        }\n        if (config.debugPort === undefined) {\n            config.debugPort = [...this.hostedPluginPreferences['hosted-plugin.debugPorts']];\n        }\n        return config;\n    }\n\n    private getDebugPluginConfig(args: LaunchVSCodeArgument[]): PluginDebugConfiguration {\n        let pluginLocation;\n        for (const arg of args) {\n            if (arg?.prefix === '--extensionDevelopmentPath=') {\n                pluginLocation = arg.path;\n            }\n        }\n\n        return {\n            pluginLocation\n        };\n    }\n}\n\nclass OpenHostedInstanceLinkDialog extends AbstractDialog<string> {\n    protected readonly windowService: WindowService;\n    protected readonly openButton: HTMLButtonElement;\n    protected readonly messageNode: HTMLDivElement;\n    protected readonly linkNode: HTMLAnchorElement;\n    value: string;\n\n    constructor(windowService: WindowService) {\n        super({\n            title: nls.localize('theia/plugin-dev/preventedNewTab', 'Your browser prevented opening of a new tab')\n        });\n        this.windowService = windowService;\n\n        this.linkNode = document.createElement('a');\n        this.linkNode.target = '_blank';\n        this.linkNode.setAttribute('style', 'color: var(--theia-editorWidget-foreground);');\n        this.contentNode.appendChild(this.linkNode);\n\n        const messageNode = document.createElement('div');\n        messageNode.innerText = nls.localize('theia/plugin-dev/running', 'Hosted instance is running at:') + ' ';\n        messageNode.appendChild(this.linkNode);\n        this.contentNode.appendChild(messageNode);\n\n        this.appendCloseButton();\n        this.openButton = this.appendAcceptButton(nls.localizeByDefault('Open'));\n    }\n\n    showOpenNewTabAskDialog(uri: string): void {\n        this.value = uri;\n\n        this.linkNode.textContent = uri;\n        this.linkNode.href = uri;\n        this.openButton.onclick = () => {\n            this.windowService.openNewWindow(uri);\n        };\n\n        this.open();\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { interfaces } from '@theia/core/shared/inversify';\nimport { createPreferenceProxy, PreferenceProxy, PreferenceService, PreferenceContribution, PreferenceSchema } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\nimport { PluginDebugPort } from '../common';\n\nexport const HostedPluginConfigSchema: PreferenceSchema = {\n    'type': 'object',\n    properties: {\n        'hosted-plugin.watchMode': {\n            type: 'boolean',\n            description: nls.localize('theia/plugin-dev/watchMode', 'Run watcher on plugin under development'),\n            default: true\n        },\n        'hosted-plugin.debugMode': {\n            type: 'string',\n            description: nls.localize('theia/plugin-dev/debugMode', 'Using inspect or inspect-brk for Node.js debug'),\n            default: 'inspect',\n            enum: ['inspect', 'inspect-brk']\n        },\n        'hosted-plugin.launchOutFiles': {\n            type: 'array',\n            items: {\n                type: 'string'\n            },\n            markdownDescription: nls.localize(\n                'theia/plugin-dev/launchOutFiles',\n                'Array of glob patterns for locating generated JavaScript files (`${pluginPath}` will be replaced by plugin actual path).'\n            ),\n            default: ['${pluginPath}/out/**/*.js']\n        },\n        'hosted-plugin.debugPorts': {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    'serverName': {\n                        type: 'string',\n                        description: nls.localize('theia/plugin-dev/debugPorts/serverName',\n                            'The plugin host server name, e.g. \"hosted-plugin\" as in \"--hosted-plugin-inspect=\" ' +\n                            'or \"headless-hosted-plugin\" as in \"--headless-hosted-plugin-inspect=\"'),\n                    },\n                    'debugPort': {\n                        type: 'number',\n                        minimum: 0,\n                        maximum: 65535,\n                        description: nls.localize('theia/plugin-dev/debugPorts/debugPort', 'Port to use for this server\\'s Node.js debug'),\n                    }\n                },\n            },\n            default: undefined,\n            description: nls.localize('theia/plugin-dev/debugPorts', 'Port configuration per server for Node.js debug'),\n        }\n    }\n};\n\nexport interface HostedPluginConfiguration {\n    'hosted-plugin.watchMode': boolean;\n    'hosted-plugin.debugMode': string;\n    'hosted-plugin.launchOutFiles': string[];\n    'hosted-plugin.debugPorts': PluginDebugPort[];\n}\n\nexport const HostedPluginPreferenceContribution = Symbol('HostedPluginPreferenceContribution');\nexport const HostedPluginPreferences = Symbol('HostedPluginPreferences');\nexport type HostedPluginPreferences = PreferenceProxy<HostedPluginConfiguration>;\n\nexport function createNavigatorPreferences(preferences: PreferenceService, schema: PreferenceSchema = HostedPluginConfigSchema): HostedPluginPreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindHostedPluginPreferences(bind: interfaces.Bind): void {\n    bind(HostedPluginPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(HostedPluginPreferenceContribution);\n        return createNavigatorPreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(HostedPluginPreferenceContribution).toConstantValue({ schema: HostedPluginConfigSchema });\n    bind(PreferenceContribution).toService(HostedPluginPreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2019 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { HostedPluginLogViewer } from './hosted-plugin-log-viewer';\nimport { HostedPluginManagerClient } from './hosted-plugin-manager-client';\nimport { HostedPluginInformer } from './hosted-plugin-informer';\nimport { bindHostedPluginPreferences } from './hosted-plugin-preferences';\nimport { HostedPluginController } from './hosted-plugin-controller';\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { FrontendApplicationContribution, WebSocketConnectionProvider } from '@theia/core/lib/browser';\nimport { HostedPluginFrontendContribution } from './hosted-plugin-frontend-contribution';\nimport { CommandContribution } from '@theia/core/lib/common/command';\nimport { PluginDevServer, pluginDevServicePath } from '../common/plugin-dev-protocol';\nimport { DebugContribution } from '@theia/debug/lib/browser/debug-contribution';\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    bindHostedPluginPreferences(bind);\n    bind(HostedPluginLogViewer).toSelf().inSingletonScope();\n    bind(HostedPluginManagerClient).toSelf().inSingletonScope();\n    bind(DebugContribution).toService(HostedPluginManagerClient);\n\n    bind(FrontendApplicationContribution).to(HostedPluginInformer).inSingletonScope();\n    bind(FrontendApplicationContribution).to(HostedPluginController).inSingletonScope();\n\n    bind(HostedPluginFrontendContribution).toSelf().inSingletonScope();\n    bind(CommandContribution).toService(HostedPluginFrontendContribution);\n\n    bind(PluginDevServer).toDynamicValue(ctx => {\n        const connection = ctx.container.get(WebSocketConnectionProvider);\n        return connection.createProxy<PluginDevServer>(pluginDevServicePath);\n    }).inSingletonScope();\n});\n","// *****************************************************************************\n// Copyright (C) 2019 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { RpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { PluginMetadata } from '@theia/plugin-ext/lib/common/plugin-protocol';\n\nexport const pluginDevServicePath = '/services/plugin-dev';\nexport const PluginDevServer = Symbol('PluginDevServer');\nexport interface PluginDevServer extends RpcServer<PluginDevClient> {\n    getHostedPlugin(): Promise<PluginMetadata | undefined>;\n    runHostedPluginInstance(uri: string): Promise<string>;\n    runDebugHostedPluginInstance(uri: string, debugConfig: PluginDebugConfiguration): Promise<string>;\n    terminateHostedPluginInstance(): Promise<void>;\n    isHostedPluginInstanceRunning(): Promise<boolean>;\n    getHostedPluginInstanceURI(): Promise<string>;\n    getHostedPluginURI(): Promise<string>;\n\n    runWatchCompilation(uri: string): Promise<void>;\n    stopWatchCompilation(uri: string): Promise<void>;\n    isWatchCompilationRunning(uri: string): Promise<boolean>;\n\n    isPluginValid(uri: string): Promise<boolean>;\n}\n\nexport interface PluginDevClient {\n}\n\nexport interface PluginDebugPort {\n    serverName: string,\n    debugPort: number,\n}\n\nexport interface PluginDebugConfiguration {\n    debugMode?: string;\n    pluginLocation?: string;\n    debugPort?: string | PluginDebugPort[]\n}\n","// *****************************************************************************\n// Copyright (C) 2018 Red Hat, Inc. and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\nimport { HostedPluginClient } from '../../common/plugin-protocol';\nimport { LogPart } from '../../common/types';\n\n@injectable()\nexport class HostedPluginWatcher {\n    private onPostMessage = new Emitter<{ pluginHostId: string, message: Uint8Array }>();\n\n    private onLogMessage = new Emitter<LogPart>();\n\n    private readonly onDidDeployEmitter = new Emitter<void>();\n    readonly onDidDeploy = this.onDidDeployEmitter.event;\n\n    getHostedPluginClient(): HostedPluginClient {\n        const messageEmitter = this.onPostMessage;\n        const logEmitter = this.onLogMessage;\n        return {\n            postMessage(pluginHostId, message: Uint8Array): Promise<void> {\n                messageEmitter.fire({ pluginHostId, message });\n                return Promise.resolve();\n            },\n            log(logPart: LogPart): Promise<void> {\n                logEmitter.fire(logPart);\n                return Promise.resolve();\n            },\n            onDidDeploy: () => this.onDidDeployEmitter.fire(undefined)\n        };\n    }\n\n    get onPostMessageEvent(): Event<{ pluginHostId: string, message: Uint8Array }> {\n        return this.onPostMessage.event;\n    }\n\n    get onLogMessageEvent(): Event<LogPart> {\n        return this.onLogMessage.event;\n    }\n}\n"],"names":[],"sourceRoot":""}