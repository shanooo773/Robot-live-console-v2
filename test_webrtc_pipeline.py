#!/usr/bin/env python3
"""
Comprehensive test for RTSP-to-WebRTC conversion and browser playbook with code execution.

This test verifies all the requirements mentioned in the checklist:
1. Backend converts RTSP (via Nginx relay) to WebRTC using aiortc/GStreamer
2. WebRTC signaling endpoints implemented
3. Frontend loads only admin-registered robots
4. Video stream plays via WebRTC
5. Browser IDE uploads code ‚Üí backend ‚Üí forwarded to robot's execution endpoint
6. Users can stream video + upload code only if they have active booking
7. Error messages for various failure scenarios
8. Health checks for RTSP ‚Üí WebRTC pipelines
"""

import asyncio
import json
import time
import requests
from pathlib import Path
import sys

# Add the backend directory to the path so we can import modules
sys.path.append(str(Path(__file__).parent / "backend"))

class WebRTCPipelineTest:
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.admin_token = None
        self.user_token = None
        self.test_results = []
        
    def log_test_result(self, test_name: str, success: bool, details: str = "", error: str = ""):
        """Log a test result."""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": time.time()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        if error:
            print(f"   Error: {error}")
    
    def test_webrtc_endpoints_exist(self):
        """Test 1: Verify WebRTC signaling endpoints are implemented."""
        print("\nüîç Testing WebRTC endpoints availability...")
        
        # Note: These endpoints require authentication, so we expect 401 when testing without token
        endpoints = [
            "/webrtc/offer",
            "/webrtc/answer", 
            "/webrtc/ice-candidate",
            "/webrtc/config"
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.post(f"{self.base_url}{endpoint}", json={})
                # Expecting 401 (unauthorized) or 422 (validation error), not 404
                if response.status_code in [401, 422]:
                    self.log_test_result(
                        f"WebRTC endpoint {endpoint} exists",
                        True,
                        f"Returns {response.status_code} (endpoint exists)"
                    )
                elif response.status_code == 404:
                    self.log_test_result(
                        f"WebRTC endpoint {endpoint} exists", 
                        False,
                        f"Returns 404 (endpoint missing)"
                    )
                else:
                    self.log_test_result(
                        f"WebRTC endpoint {endpoint} exists",
                        True,
                        f"Unexpected status {response.status_code} but endpoint exists"
                    )
            except Exception as e:
                self.log_test_result(
                    f"WebRTC endpoint {endpoint} exists",
                    False,
                    error=str(e)
                )
    
    def test_webrtc_config_endpoint(self):
        """Test 2: Verify WebRTC config endpoint returns proper STUN/TURN servers."""
        print("\nüîç Testing WebRTC configuration...")
        
        # This endpoint requires auth, but we can check the structure
        try:
            response = requests.get(f"{self.base_url}/webrtc/config")
            
            if response.status_code == 401:
                self.log_test_result(
                    "WebRTC config endpoint requires authentication",
                    True,
                    "Returns 401 as expected for unauthenticated request"
                )
            else:
                self.log_test_result(
                    "WebRTC config endpoint authentication",
                    False,
                    f"Expected 401, got {response.status_code}"
                )
        except Exception as e:
            self.log_test_result(
                "WebRTC config endpoint test",
                False,
                error=str(e)
            )
    
    def test_robot_execute_endpoint(self):
        """Test 3: Verify robot code execution endpoint exists."""
        print("\nüîç Testing robot code execution endpoint...")
        
        try:
            response = requests.post(f"{self.base_url}/robot/execute", json={
                "code": "print('test')",
                "language": "python"
            })
            
            if response.status_code in [401, 422]:
                self.log_test_result(
                    "Robot execute endpoint exists",
                    True,
                    f"Returns {response.status_code} (endpoint exists, requires auth/validation)"
                )
            elif response.status_code == 404:
                self.log_test_result(
                    "Robot execute endpoint exists",
                    False,
                    "Returns 404 (endpoint missing)"
                )
            else:
                self.log_test_result(
                    "Robot execute endpoint exists",
                    True,
                    f"Unexpected status {response.status_code} but endpoint exists"
                )
        except Exception as e:
            self.log_test_result(
                "Robot execute endpoint test",
                False,
                error=str(e)
            )
    
    def test_health_endpoints(self):
        """Test 4: Verify health check endpoints for WebRTC pipeline."""
        print("\nüîç Testing health check endpoints...")
        
        health_endpoints = [
            "/health",
            "/webrtc/health"
        ]
        
        for endpoint in health_endpoints:
            try:
                response = requests.get(f"{self.base_url}{endpoint}")
                
                if response.status_code == 200:
                    self.log_test_result(
                        f"Health endpoint {endpoint} accessible",
                        True,
                        "Returns 200 OK"
                    )
                elif response.status_code == 401:
                    self.log_test_result(
                        f"Health endpoint {endpoint} exists but requires auth",
                        True,
                        "Endpoint exists but requires authentication"
                    )
                else:
                    self.log_test_result(
                        f"Health endpoint {endpoint}",
                        False,
                        f"Unexpected status: {response.status_code}"
                    )
            except Exception as e:
                self.log_test_result(
                    f"Health endpoint {endpoint} test",
                    False,
                    error=str(e)
                )
    
    def test_robot_registry_endpoints(self):
        """Test 5: Verify robot registry endpoints for admin-registered robots."""
        print("\nüîç Testing robot registry endpoints...")
        
        try:
            # Test public robots endpoint (should work without auth)
            response = requests.get(f"{self.base_url}/robots")
            
            if response.status_code == 200:
                robots = response.json()
                self.log_test_result(
                    "Robot registry endpoint accessible",
                    True,
                    f"Found {len(robots)} robot types available"
                )
            else:
                self.log_test_result(
                    "Robot registry endpoint",
                    False,
                    f"Expected 200, got {response.status_code}"
                )
                
            # Test admin robot management endpoint
            response = requests.get(f"{self.base_url}/admin/robots")
            
            if response.status_code == 401:
                self.log_test_result(
                    "Admin robot management requires authentication",
                    True,
                    "Returns 401 as expected for unauthenticated request"
                )
            else:
                self.log_test_result(
                    "Admin robot management authentication",
                    False,
                    f"Expected 401, got {response.status_code}"
                )
        except Exception as e:
            self.log_test_result(
                "Robot registry endpoints test",
                False,
                error=str(e)
            )
    
    def test_booking_validation_logic(self):
        """Test 6: Check if booking validation is implemented in backend."""
        print("\nüîç Testing booking validation logic...")
        
        # Test the booking endpoints exist
        booking_endpoints = [
            "/bookings",
            "/my-bookings"
        ]
        
        for endpoint in booking_endpoints:
            try:
                response = requests.get(f"{self.base_url}{endpoint}")
                
                if response.status_code in [401, 422]:
                    self.log_test_result(
                        f"Booking endpoint {endpoint} exists",
                        True,
                        f"Returns {response.status_code} (requires authentication)"
                    )
                elif response.status_code == 404:
                    self.log_test_result(
                        f"Booking endpoint {endpoint} exists",
                        False,
                        "Returns 404 (endpoint missing)"
                    )
                else:
                    self.log_test_result(
                        f"Booking endpoint {endpoint} exists",
                        True,
                        f"Unexpected status {response.status_code} but endpoint exists"
                    )
            except Exception as e:
                self.log_test_result(
                    f"Booking endpoint {endpoint} test",
                    False,
                    error=str(e)
                )
    
    def test_error_handling_structure(self):
        """Test 7: Verify error handling structure in the API."""
        print("\nüîç Testing error handling structure...")
        
        # Test that we get proper error responses for missing resources
        try:
            response = requests.get(f"{self.base_url}/nonexistent-endpoint")
            
            if response.status_code == 404:
                self.log_test_result(
                    "API returns proper 404 for missing endpoints",
                    True,
                    "Correct 404 response for nonexistent endpoint"
                )
            else:
                self.log_test_result(
                    "API error handling",
                    False,
                    f"Expected 404, got {response.status_code}"
                )
        except Exception as e:
            self.log_test_result(
                "Error handling test",
                False,
                error=str(e)
            )
    
    def check_frontend_files(self):
        """Test 8: Verify frontend files have proper WebRTC and code execution integration."""
        print("\nüîç Checking frontend file structure...")
        
        frontend_files = [
            "frontend/src/components/RTSPVideoPlayer.jsx",
            "frontend/src/components/TheiaIDE.jsx", 
            "frontend/src/components/CodeEditor.jsx",
            "frontend/src/components/VideoPlayer.jsx",
            "frontend/src/api.js"
        ]
        
        for file_path in frontend_files:
            file_full_path = Path(__file__).parent / file_path
            if file_full_path.exists():
                self.log_test_result(
                    f"Frontend file {file_path} exists",
                    True,
                    "File found"
                )
                
                # Check for specific integrations
                content = file_full_path.read_text()
                
                if "RTSPVideoPlayer" in file_path:
                    if "webrtc" in content.lower() and "ice" in content.lower():
                        self.log_test_result(
                            "RTSPVideoPlayer has WebRTC integration",
                            True,
                            "Contains WebRTC and ICE handling code"
                        )
                    else:
                        self.log_test_result(
                            "RTSPVideoPlayer WebRTC integration",
                            False,
                            "Missing WebRTC/ICE keywords"
                        )
                
                if "api.js" in file_path:
                    if "executeRobotCode" in content and "webrtc" in content.lower():
                        self.log_test_result(
                            "API file has code execution and WebRTC functions",
                            True,
                            "Contains both code execution and WebRTC functions"
                        )
                    else:
                        self.log_test_result(
                            "API file integration",
                            False,
                            "Missing code execution or WebRTC functions"
                        )
            else:
                self.log_test_result(
                    f"Frontend file {file_path} exists",
                    False,
                    "File not found"
                )
    
    def check_backend_files(self):
        """Test 9: Verify backend has proper WebRTC and code execution implementation."""
        print("\nüîç Checking backend file structure...")
        
        backend_files = [
            "backend/main.py",
            "backend/database.py",
            "backend/auth.py"
        ]
        
        for file_path in backend_files:
            file_full_path = Path(__file__).parent / file_path
            if file_full_path.exists():
                self.log_test_result(
                    f"Backend file {file_path} exists", 
                    True,
                    "File found"
                )
                
                # Check for specific implementations
                content = file_full_path.read_text()
                
                if "main.py" in file_path:
                    webrtc_found = "aiortc" in content and "RTCPeerConnection" in content
                    code_exec_found = "execute_robot_code" in content or "/robot/execute" in content
                    booking_found = "has_booking_for_robot" in content or "booking" in content.lower()
                    
                    self.log_test_result(
                        "Backend has WebRTC implementation",
                        webrtc_found,
                        "aiortc and RTCPeerConnection found" if webrtc_found else "Missing WebRTC implementation"
                    )
                    
                    self.log_test_result(
                        "Backend has code execution implementation", 
                        code_exec_found,
                        "Code execution endpoint found" if code_exec_found else "Missing code execution"
                    )
                    
                    self.log_test_result(
                        "Backend has booking validation",
                        booking_found,
                        "Booking validation found" if booking_found else "Missing booking validation"
                    )
            else:
                self.log_test_result(
                    f"Backend file {file_path} exists",
                    False,
                    "File not found"
                )
    
    def run_all_tests(self):
        """Run all tests and generate a comprehensive report."""
        print("üöÄ Starting RTSP-to-WebRTC Pipeline Verification Tests")
        print("=" * 60)
        
        # Run all test methods
        self.test_webrtc_endpoints_exist()
        self.test_webrtc_config_endpoint() 
        self.test_robot_execute_endpoint()
        self.test_health_endpoints()
        self.test_robot_registry_endpoints()
        self.test_booking_validation_logic()
        self.test_error_handling_structure()
        self.check_frontend_files()
        self.check_backend_files()
        
        # Generate summary report
        self.generate_report()
    
    def generate_report(self):
        """Generate a comprehensive test report."""
        print("\n" + "=" * 60)
        print("üìä TEST SUMMARY REPORT")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        
        print(f"Total Tests: {total_tests}")
        print(f"Passed: {passed_tests} ‚úÖ")
        print(f"Failed: {failed_tests} ‚ùå")
        print(f"Success Rate: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nüìã REQUIREMENTS CHECKLIST:")
        print("-" * 40)
        
        # Analyze results against requirements
        requirements = {
            "Backend converts RTSP to WebRTC using aiortc/GStreamer": self._check_requirement(["Backend has WebRTC implementation"]),
            "WebRTC signaling endpoints implemented": self._check_requirement([
                "WebRTC endpoint /webrtc/offer exists",
                "WebRTC endpoint /webrtc/answer exists", 
                "WebRTC endpoint /webrtc/ice-candidate exists",
                "WebRTC endpoint /webrtc/config exists"
            ]),
            "Frontend loads only admin-registered robots": self._check_requirement(["Robot registry endpoint accessible"]),
            "Video stream plays via WebRTC with proper video element": self._check_requirement(["RTSPVideoPlayer has WebRTC integration"]),
            "Browser IDE uploads code ‚Üí backend ‚Üí forwarded to robot": self._check_requirement([
                "API file has code execution and WebRTC functions",
                "Backend has code execution implementation"
            ]),
            "Users can stream video + upload code only with active booking": self._check_requirement([
                "Backend has booking validation",
                "Booking endpoint /bookings exists",
                "Booking endpoint /my-bookings exists"
            ]),
            "Error messages for failure scenarios": self._check_requirement(["API returns proper 404 for missing endpoints"]),
            "Health checks for RTSP ‚Üí WebRTC pipelines": self._check_requirement(["Health endpoint /webrtc/health exists but requires auth"])
        }
        
        for req, status in requirements.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"{status_icon} {req}")
        
        print("\n" + "=" * 60)
        
        # Return overall success
        overall_success = all(requirements.values())
        if overall_success:
            print("üéâ ALL REQUIREMENTS VERIFIED SUCCESSFULLY!")
            print("The RTSP-to-WebRTC conversion and browser playback pipeline")
            print("with code execution is properly implemented.")
        else:
            print("‚ö†Ô∏è  SOME REQUIREMENTS NEED ATTENTION")
            print("Review the failed tests above for specific issues.")
        
        return overall_success
    
    def _check_requirement(self, test_names):
        """Check if all tests for a requirement passed."""
        for test_name in test_names:
            result = next((r for r in self.test_results if r["test"] == test_name), None)
            if not result or not result["success"]:
                return False
        return True

if __name__ == "__main__":
    # Run the comprehensive test suite
    tester = WebRTCPipelineTest()
    success = tester.run_all_tests()
    
    # Exit with appropriate code
    sys.exit(0 if success else 1)